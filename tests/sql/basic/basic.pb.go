// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tests/sql/basic/basic.proto

/*
Package basic is a generated protocol buffer package.

It is generated from these files:
	tests/sql/basic/basic.proto

It has these top-level messages:
*/
package basic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/tcncloud/protoc-gen-persist/persist"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"
import tests_test "github.com/tcncloud/protoc-gen-persist/tests/test"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Amazing service

type AmazingClient interface {
	UniarySelect(ctx context.Context, in *tests_test.PartialTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	UniarySelectWithHooks(ctx context.Context, in *tests_test.PartialTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	ServerStream(ctx context.Context, in *tests_test.Name, opts ...grpc.CallOption) (Amazing_ServerStreamClient, error)
	ServerStreamWithHooks(ctx context.Context, in *tests_test.Name, opts ...grpc.CallOption) (Amazing_ServerStreamWithHooksClient, error)
	Bidirectional(ctx context.Context, opts ...grpc.CallOption) (Amazing_BidirectionalClient, error)
	// Test multi-line query
	BidirectionalWithHooks(ctx context.Context, opts ...grpc.CallOption) (Amazing_BidirectionalWithHooksClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Amazing_ClientStreamClient, error)
	ClientStreamWithHook(ctx context.Context, opts ...grpc.CallOption) (Amazing_ClientStreamWithHookClient, error)
	UnImplementedPersistMethod(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
}

type amazingClient struct {
	cc *grpc.ClientConn
}

func NewAmazingClient(cc *grpc.ClientConn) AmazingClient {
	return &amazingClient{cc}
}

func (c *amazingClient) UniarySelect(ctx context.Context, in *tests_test.PartialTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.Amazing/UniarySelect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amazingClient) UniarySelectWithHooks(ctx context.Context, in *tests_test.PartialTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.Amazing/UniarySelectWithHooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amazingClient) ServerStream(ctx context.Context, in *tests_test.Name, opts ...grpc.CallOption) (Amazing_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Amazing_serviceDesc.Streams[0], c.cc, "/tests.Amazing/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &amazingServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Amazing_ServerStreamClient interface {
	Recv() (*tests_test.ExampleTable, error)
	grpc.ClientStream
}

type amazingServerStreamClient struct {
	grpc.ClientStream
}

func (x *amazingServerStreamClient) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *amazingClient) ServerStreamWithHooks(ctx context.Context, in *tests_test.Name, opts ...grpc.CallOption) (Amazing_ServerStreamWithHooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Amazing_serviceDesc.Streams[1], c.cc, "/tests.Amazing/ServerStreamWithHooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &amazingServerStreamWithHooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Amazing_ServerStreamWithHooksClient interface {
	Recv() (*tests_test.ExampleTable, error)
	grpc.ClientStream
}

type amazingServerStreamWithHooksClient struct {
	grpc.ClientStream
}

func (x *amazingServerStreamWithHooksClient) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *amazingClient) Bidirectional(ctx context.Context, opts ...grpc.CallOption) (Amazing_BidirectionalClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Amazing_serviceDesc.Streams[2], c.cc, "/tests.Amazing/Bidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &amazingBidirectionalClient{stream}
	return x, nil
}

type Amazing_BidirectionalClient interface {
	Send(*tests_test.ExampleTable) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ClientStream
}

type amazingBidirectionalClient struct {
	grpc.ClientStream
}

func (x *amazingBidirectionalClient) Send(m *tests_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *amazingBidirectionalClient) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *amazingClient) BidirectionalWithHooks(ctx context.Context, opts ...grpc.CallOption) (Amazing_BidirectionalWithHooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Amazing_serviceDesc.Streams[3], c.cc, "/tests.Amazing/BidirectionalWithHooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &amazingBidirectionalWithHooksClient{stream}
	return x, nil
}

type Amazing_BidirectionalWithHooksClient interface {
	Send(*tests_test.ExampleTable) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ClientStream
}

type amazingBidirectionalWithHooksClient struct {
	grpc.ClientStream
}

func (x *amazingBidirectionalWithHooksClient) Send(m *tests_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *amazingBidirectionalWithHooksClient) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *amazingClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Amazing_ClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Amazing_serviceDesc.Streams[4], c.cc, "/tests.Amazing/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &amazingClientStreamClient{stream}
	return x, nil
}

type Amazing_ClientStreamClient interface {
	Send(*tests_test.ExampleTable) error
	CloseAndRecv() (*tests_test.NumRows, error)
	grpc.ClientStream
}

type amazingClientStreamClient struct {
	grpc.ClientStream
}

func (x *amazingClientStreamClient) Send(m *tests_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *amazingClientStreamClient) CloseAndRecv() (*tests_test.NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(tests_test.NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *amazingClient) ClientStreamWithHook(ctx context.Context, opts ...grpc.CallOption) (Amazing_ClientStreamWithHookClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Amazing_serviceDesc.Streams[5], c.cc, "/tests.Amazing/ClientStreamWithHook", opts...)
	if err != nil {
		return nil, err
	}
	x := &amazingClientStreamWithHookClient{stream}
	return x, nil
}

type Amazing_ClientStreamWithHookClient interface {
	Send(*tests_test.ExampleTable) error
	CloseAndRecv() (*tests_test.Ids, error)
	grpc.ClientStream
}

type amazingClientStreamWithHookClient struct {
	grpc.ClientStream
}

func (x *amazingClientStreamWithHookClient) Send(m *tests_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *amazingClientStreamWithHookClient) CloseAndRecv() (*tests_test.Ids, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(tests_test.Ids)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *amazingClient) UnImplementedPersistMethod(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.Amazing/UnImplementedPersistMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Amazing service

type AmazingServer interface {
	UniarySelect(context.Context, *tests_test.PartialTable) (*tests_test.ExampleTable, error)
	UniarySelectWithHooks(context.Context, *tests_test.PartialTable) (*tests_test.ExampleTable, error)
	ServerStream(*tests_test.Name, Amazing_ServerStreamServer) error
	ServerStreamWithHooks(*tests_test.Name, Amazing_ServerStreamWithHooksServer) error
	Bidirectional(Amazing_BidirectionalServer) error
	// Test multi-line query
	BidirectionalWithHooks(Amazing_BidirectionalWithHooksServer) error
	ClientStream(Amazing_ClientStreamServer) error
	ClientStreamWithHook(Amazing_ClientStreamWithHookServer) error
	UnImplementedPersistMethod(context.Context, *tests_test.ExampleTable) (*tests_test.ExampleTable, error)
}

func RegisterAmazingServer(s *grpc.Server, srv AmazingServer) {
	s.RegisterService(&_Amazing_serviceDesc, srv)
}

func _Amazing_UniarySelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.PartialTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmazingServer).UniarySelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.Amazing/UniarySelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmazingServer).UniarySelect(ctx, req.(*tests_test.PartialTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Amazing_UniarySelectWithHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.PartialTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmazingServer).UniarySelectWithHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.Amazing/UniarySelectWithHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmazingServer).UniarySelectWithHooks(ctx, req.(*tests_test.PartialTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Amazing_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tests_test.Name)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AmazingServer).ServerStream(m, &amazingServerStreamServer{stream})
}

type Amazing_ServerStreamServer interface {
	Send(*tests_test.ExampleTable) error
	grpc.ServerStream
}

type amazingServerStreamServer struct {
	grpc.ServerStream
}

func (x *amazingServerStreamServer) Send(m *tests_test.ExampleTable) error {
	return x.ServerStream.SendMsg(m)
}

func _Amazing_ServerStreamWithHooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tests_test.Name)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AmazingServer).ServerStreamWithHooks(m, &amazingServerStreamWithHooksServer{stream})
}

type Amazing_ServerStreamWithHooksServer interface {
	Send(*tests_test.ExampleTable) error
	grpc.ServerStream
}

type amazingServerStreamWithHooksServer struct {
	grpc.ServerStream
}

func (x *amazingServerStreamWithHooksServer) Send(m *tests_test.ExampleTable) error {
	return x.ServerStream.SendMsg(m)
}

func _Amazing_Bidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AmazingServer).Bidirectional(&amazingBidirectionalServer{stream})
}

type Amazing_BidirectionalServer interface {
	Send(*tests_test.ExampleTable) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ServerStream
}

type amazingBidirectionalServer struct {
	grpc.ServerStream
}

func (x *amazingBidirectionalServer) Send(m *tests_test.ExampleTable) error {
	return x.ServerStream.SendMsg(m)
}

func (x *amazingBidirectionalServer) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Amazing_BidirectionalWithHooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AmazingServer).BidirectionalWithHooks(&amazingBidirectionalWithHooksServer{stream})
}

type Amazing_BidirectionalWithHooksServer interface {
	Send(*tests_test.ExampleTable) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ServerStream
}

type amazingBidirectionalWithHooksServer struct {
	grpc.ServerStream
}

func (x *amazingBidirectionalWithHooksServer) Send(m *tests_test.ExampleTable) error {
	return x.ServerStream.SendMsg(m)
}

func (x *amazingBidirectionalWithHooksServer) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Amazing_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AmazingServer).ClientStream(&amazingClientStreamServer{stream})
}

type Amazing_ClientStreamServer interface {
	SendAndClose(*tests_test.NumRows) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ServerStream
}

type amazingClientStreamServer struct {
	grpc.ServerStream
}

func (x *amazingClientStreamServer) SendAndClose(m *tests_test.NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *amazingClientStreamServer) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Amazing_ClientStreamWithHook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AmazingServer).ClientStreamWithHook(&amazingClientStreamWithHookServer{stream})
}

type Amazing_ClientStreamWithHookServer interface {
	SendAndClose(*tests_test.Ids) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ServerStream
}

type amazingClientStreamWithHookServer struct {
	grpc.ServerStream
}

func (x *amazingClientStreamWithHookServer) SendAndClose(m *tests_test.Ids) error {
	return x.ServerStream.SendMsg(m)
}

func (x *amazingClientStreamWithHookServer) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Amazing_UnImplementedPersistMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmazingServer).UnImplementedPersistMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.Amazing/UnImplementedPersistMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmazingServer).UnImplementedPersistMethod(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

var _Amazing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tests.Amazing",
	HandlerType: (*AmazingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UniarySelect",
			Handler:    _Amazing_UniarySelect_Handler,
		},
		{
			MethodName: "UniarySelectWithHooks",
			Handler:    _Amazing_UniarySelectWithHooks_Handler,
		},
		{
			MethodName: "UnImplementedPersistMethod",
			Handler:    _Amazing_UnImplementedPersistMethod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Amazing_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServerStreamWithHooks",
			Handler:       _Amazing_ServerStreamWithHooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Bidirectional",
			Handler:       _Amazing_Bidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalWithHooks",
			Handler:       _Amazing_BidirectionalWithHooks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Amazing_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStreamWithHook",
			Handler:       _Amazing_ClientStreamWithHook_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tests/sql/basic/basic.proto",
}

func init() { proto.RegisterFile("tests/sql/basic/basic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x41, 0x6f, 0xd3, 0x4a,
	0x10, 0xc7, 0x6b, 0xeb, 0xbd, 0x3e, 0x69, 0x5f, 0x9f, 0x5e, 0xb5, 0x34, 0x05, 0x85, 0x03, 0x4b,
	0x94, 0x43, 0x5a, 0xa5, 0x49, 0x93, 0x4a, 0x48, 0x08, 0x5a, 0x29, 0x6d, 0x0d, 0x8d, 0x9a, 0xa4,
	0x91, 0xed, 0x50, 0xa9, 0x80, 0xaa, 0x8d, 0xbd, 0x49, 0x56, 0xb5, 0xbd, 0x61, 0xbd, 0x01, 0xca,
	0x91, 0x03, 0x07, 0xc4, 0x81, 0x4a, 0x9c, 0x38, 0xf2, 0x0d, 0x90, 0x38, 0x54, 0x5c, 0xb9, 0x72,
	0xe2, 0x0b, 0x70, 0xe3, 0xc4, 0x9d, 0x13, 0x12, 0x5a, 0x3b, 0x69, 0x9d, 0xb4, 0x29, 0xa4, 0x81,
	0xcb, 0xc8, 0xf6, 0x8c, 0x77, 0xff, 0xf3, 0x9b, 0x99, 0xd5, 0x82, 0xcb, 0x82, 0xf8, 0xc2, 0xcf,
	0xfa, 0x0f, 0x9c, 0x6c, 0x1d, 0xfb, 0xd4, 0x0a, 0x6d, 0xa6, 0xcd, 0x99, 0x60, 0xf0, 0xef, 0xc0,
	0x19, 0x8f, 0xb5, 0x09, 0xf7, 0xa9, 0x2f, 0xb2, 0xac, 0x2d, 0x28, 0xf3, 0xfc, 0xd0, 0x1b, 0xbf,
	0xd2, 0x64, 0xac, 0xe9, 0x90, 0x6c, 0xf0, 0x56, 0xef, 0x34, 0xb2, 0x82, 0xba, 0xc4, 0x17, 0xd8,
	0x6d, 0x77, 0x03, 0xd0, 0x60, 0x80, 0x4d, 0x7c, 0x8b, 0xd3, 0xb6, 0x60, 0xbc, 0x1b, 0x11, 0x0b,
	0x77, 0x97, 0x36, 0x30, 0xe1, 0xe7, 0xfc, 0xdb, 0x69, 0xf0, 0x4f, 0xc1, 0xc5, 0x4f, 0xa8, 0xd7,
	0x84, 0xaf, 0x14, 0x30, 0x55, 0xf3, 0x28, 0xe6, 0xfb, 0x06, 0x71, 0x88, 0x25, 0xe0, 0xa5, 0x4c,
	0xf0, 0x53, 0x60, 0x33, 0x55, 0xcc, 0x05, 0xc5, 0x8e, 0x89, 0xeb, 0x0e, 0x89, 0xf7, 0x79, 0xb4,
	0xc7, 0xd8, 0x6d, 0x3b, 0x24, 0xf0, 0x24, 0xaa, 0x4f, 0x0f, 0x0f, 0xd4, 0x4d, 0x70, 0xdd, 0xd0,
	0x4a, 0xda, 0x9a, 0x89, 0xe6, 0x51, 0x83, 0x33, 0x17, 0x91, 0x30, 0x64, 0x57, 0xc8, 0x18, 0xb4,
	0xdd, 0x22, 0x9c, 0x20, 0x6a, 0x2f, 0x27, 0x73, 0xa8, 0x50, 0x59, 0x47, 0xbe, 0xc0, 0x5c, 0xec,
	0xca, 0x9c, 0x56, 0x92, 0x79, 0xa8, 0x52, 0x1b, 0x82, 0xe3, 0x4f, 0xf0, 0xbd, 0x0a, 0x62, 0x51,
	0x59, 0xdb, 0x54, 0xb4, 0x36, 0x18, 0xdb, 0xf3, 0xcf, 0xa5, 0xef, 0xab, 0x22, 0x05, 0x7e, 0x51,
	0x7e, 0xa3, 0x42, 0xbd, 0x04, 0x66, 0xa3, 0x02, 0x57, 0x49, 0x83, 0x71, 0x22, 0x25, 0xc2, 0x7c,
	0x93, 0x8a, 0x56, 0xa7, 0x9e, 0xb1, 0x98, 0x9b, 0x15, 0x96, 0x67, 0x39, 0xac, 0x63, 0x87, 0x45,
	0xb2, 0x16, 0x9a, 0xc4, 0x5b, 0xe8, 0x95, 0x3b, 0x2c, 0x4e, 0x4b, 0x66, 0xb5, 0xb3, 0xd9, 0x9f,
	0x6e, 0xa1, 0x21, 0x08, 0x3f, 0xef, 0x62, 0x50, 0x80, 0x29, 0x83, 0xf0, 0x87, 0x84, 0x1b, 0x82,
	0x13, 0xec, 0xc2, 0xe9, 0x28, 0x98, 0x0a, 0x76, 0xcf, 0x42, 0x75, 0x4d, 0x92, 0xca, 0x81, 0xb9,
	0x23, 0x50, 0xb7, 0xf4, 0xad, 0xf2, 0x20, 0xa8, 0x0d, 0x4d, 0xd7, 0x90, 0x87, 0x5d, 0xb2, 0x9c,
	0xcc, 0xc1, 0xbf, 0xe4, 0xc3, 0xa2, 0x02, 0x5f, 0xab, 0x20, 0x16, 0xdd, 0xf6, 0xb8, 0x64, 0xa3,
	0xec, 0xff, 0x29, 0x28, 0xd5, 0x47, 0x65, 0x64, 0x05, 0xb2, 0x20, 0xd1, 0xed, 0xc7, 0x2f, 0x48,
	0x74, 0xb5, 0xb1, 0x0a, 0xb2, 0xa8, 0xc0, 0x77, 0x0a, 0xf8, 0x6f, 0x95, 0xda, 0x94, 0x13, 0x4b,
	0xce, 0x38, 0x76, 0xe0, 0x50, 0x04, 0x67, 0xc0, 0xd9, 0x93, 0x6c, 0x1a, 0xa0, 0x52, 0xab, 0xae,
	0x17, 0x4c, 0x6d, 0x80, 0x89, 0xa1, 0x99, 0x28, 0x75, 0xdc, 0xa0, 0xe9, 0x00, 0xcf, 0x1c, 0x5a,
	0x46, 0xa9, 0x64, 0x3e, 0x8d, 0x92, 0x4b, 0x73, 0x5d, 0x6a, 0x61, 0x83, 0xeb, 0x9a, 0x59, 0xd3,
	0x2b, 0xc5, 0xca, 0x6d, 0x34, 0x7f, 0x62, 0xf8, 0x02, 0x9e, 0x29, 0x65, 0x51, 0x81, 0x9f, 0x55,
	0x30, 0xdb, 0x27, 0x7b, 0xc8, 0x1c, 0xfe, 0xa2, 0xfe, 0x17, 0xaa, 0x4c, 0xe0, 0x99, 0x0a, 0x66,
	0x4e, 0xcb, 0x00, 0x5c, 0xfd, 0x69, 0x0a, 0x20, 0x76, 0x6a, 0x0e, 0x40, 0x19, 0x92, 0x84, 0x5e,
	0x06, 0x17, 0xfb, 0xf4, 0x8f, 0xd9, 0x15, 0xa5, 0x01, 0x1c, 0x63, 0xb5, 0x45, 0x40, 0xf8, 0x8d,
	0x02, 0xa6, 0xd6, 0x1c, 0x4a, 0x3c, 0xd1, 0x1d, 0xd6, 0xe1, 0x5c, 0x2f, 0xf4, 0x8d, 0x51, 0xc7,
	0xd5, 0xd9, 0x23, 0x3f, 0x81, 0x25, 0xd1, 0x7b, 0x60, 0xbd, 0x58, 0x31, 0x34, 0xdd, 0x44, 0xc5,
	0x8a, 0xb9, 0x35, 0xd0, 0x17, 0x29, 0x6a, 0xa7, 0xd1, 0x49, 0xa8, 0x77, 0x0a, 0xa5, 0x9a, 0x66,
	0xa0, 0x54, 0x32, 0x97, 0x46, 0x5d, 0xba, 0xc3, 0x1a, 0x01, 0x7e, 0x50, 0xc1, 0x4c, 0x54, 0x64,
	0xaf, 0x0b, 0xce, 0x10, 0xfb, 0x7f, 0xd4, 0x53, 0xb4, 0xfd, 0xc4, 0xf7, 0x60, 0xb0, 0xbf, 0x29,
	0x7f, 0x52, 0xaa, 0x3c, 0x03, 0xa2, 0x3a, 0xc7, 0x3f, 0x03, 0xa2, 0xab, 0x8d, 0x59, 0x6c, 0xa8,
	0x83, 0x78, 0xcd, 0x2b, 0xca, 0x74, 0x5d, 0xe2, 0x09, 0x62, 0x57, 0xc3, 0xa8, 0x32, 0x11, 0x2d,
	0x66, 0x9f, 0x6b, 0x9e, 0x26, 0xe2, 0xcd, 0xe7, 0x87, 0x07, 0xea, 0x7d, 0x70, 0x17, 0xc4, 0x33,
	0xe1, 0x6d, 0x20, 0xd3, 0xbb, 0x0d, 0x64, 0xcc, 0xde, 0x75, 0x61, 0xfa, 0xdf, 0xc4, 0x64, 0x79,
	0x5f, 0xbe, 0xce, 0x2f, 0x8d, 0x24, 0xdc, 0xdd, 0x97, 0x68, 0x5f, 0x1e, 0x1e, 0xa8, 0x13, 0xab,
	0x2b, 0x3b, 0x37, 0x47, 0xfa, 0xf7, 0xe8, 0xc6, 0x73, 0x23, 0xb0, 0xf5, 0xc9, 0x20, 0x72, 0xe9,
	0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0x87, 0xd0, 0x51, 0x11, 0x09, 0x00, 0x00,
}
