// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tests/spanner/basic/basic_example.proto

/*
Package basic is a generated protocol buffer package.

It is generated from these files:
	tests/spanner/basic/basic_example.proto

It has these top-level messages:
	Something
	HasTimestamp
*/
package basic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/tcncloud/protoc-gen-persist/persist"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"
import tests_test "github.com/tcncloud/protoc-gen-persist/tests/test"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MyEnum int32

const (
	MyEnum_OPTION_0 MyEnum = 0
	MyEnum_OPTION_1 MyEnum = 1
)

var MyEnum_name = map[int32]string{
	0: "OPTION_0",
	1: "OPTION_1",
}
var MyEnum_value = map[string]int32{
	"OPTION_0": 0,
	"OPTION_1": 1,
}

func (x MyEnum) String() string {
	return proto.EnumName(MyEnum_name, int32(x))
}
func (MyEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MappedEnum int32

const (
	MappedEnum_OPT_0 MappedEnum = 0
	MappedEnum_OPT_1 MappedEnum = 1
)

var MappedEnum_name = map[int32]string{
	0: "OPT_0",
	1: "OPT_1",
}
var MappedEnum_value = map[string]int32{
	"OPT_0": 0,
	"OPT_1": 1,
}

func (x MappedEnum) String() string {
	return proto.EnumName(MappedEnum_name, int32(x))
}
func (MappedEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Something struct {
	Thing      *Something_SomethingElse `protobuf:"bytes,2,opt,name=thing" json:"thing,omitempty"`
	Myenum     MyEnum                   `protobuf:"varint,3,opt,name=myenum,enum=tests.MyEnum" json:"myenum,omitempty"`
	Mappedenum MappedEnum               `protobuf:"varint,4,opt,name=mappedenum,enum=tests.MappedEnum" json:"mappedenum,omitempty"`
}

func (m *Something) Reset()                    { *m = Something{} }
func (m *Something) String() string            { return proto.CompactTextString(m) }
func (*Something) ProtoMessage()               {}
func (*Something) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Something) GetThing() *Something_SomethingElse {
	if m != nil {
		return m.Thing
	}
	return nil
}

func (m *Something) GetMyenum() MyEnum {
	if m != nil {
		return m.Myenum
	}
	return MyEnum_OPTION_0
}

func (m *Something) GetMappedenum() MappedEnum {
	if m != nil {
		return m.Mappedenum
	}
	return MappedEnum_OPT_0
}

type Something_SomethingElse struct {
	Thing string `protobuf:"bytes,1,opt,name=thing" json:"thing,omitempty"`
}

func (m *Something_SomethingElse) Reset()                    { *m = Something_SomethingElse{} }
func (m *Something_SomethingElse) String() string            { return proto.CompactTextString(m) }
func (*Something_SomethingElse) ProtoMessage()               {}
func (*Something_SomethingElse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Something_SomethingElse) GetThing() string {
	if m != nil {
		return m.Thing
	}
	return ""
}

type HasTimestamp struct {
	Time   *google_protobuf1.Timestamp   `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Some   *Something                    `protobuf:"bytes,2,opt,name=some" json:"some,omitempty"`
	Str    string                        `protobuf:"bytes,3,opt,name=str" json:"str,omitempty"`
	Table  *tests_test.ExampleTable      `protobuf:"bytes,4,opt,name=table" json:"table,omitempty"`
	Strs   []string                      `protobuf:"bytes,5,rep,name=strs" json:"strs,omitempty"`
	Tables []*tests_test.ExampleTable    `protobuf:"bytes,6,rep,name=tables" json:"tables,omitempty"`
	Somes  []*Something                  `protobuf:"bytes,7,rep,name=somes" json:"somes,omitempty"`
	Times  []*google_protobuf1.Timestamp `protobuf:"bytes,8,rep,name=times" json:"times,omitempty"`
}

func (m *HasTimestamp) Reset()                    { *m = HasTimestamp{} }
func (m *HasTimestamp) String() string            { return proto.CompactTextString(m) }
func (*HasTimestamp) ProtoMessage()               {}
func (*HasTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HasTimestamp) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *HasTimestamp) GetSome() *Something {
	if m != nil {
		return m.Some
	}
	return nil
}

func (m *HasTimestamp) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *HasTimestamp) GetTable() *tests_test.ExampleTable {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *HasTimestamp) GetStrs() []string {
	if m != nil {
		return m.Strs
	}
	return nil
}

func (m *HasTimestamp) GetTables() []*tests_test.ExampleTable {
	if m != nil {
		return m.Tables
	}
	return nil
}

func (m *HasTimestamp) GetSomes() []*Something {
	if m != nil {
		return m.Somes
	}
	return nil
}

func (m *HasTimestamp) GetTimes() []*google_protobuf1.Timestamp {
	if m != nil {
		return m.Times
	}
	return nil
}

func init() {
	proto.RegisterType((*Something)(nil), "tests.Something")
	proto.RegisterType((*Something_SomethingElse)(nil), "tests.Something.SomethingElse")
	proto.RegisterType((*HasTimestamp)(nil), "tests.HasTimestamp")
	proto.RegisterEnum("tests.MyEnum", MyEnum_name, MyEnum_value)
	proto.RegisterEnum("tests.MappedEnum", MappedEnum_name, MappedEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExtraSrv service

type ExtraSrvClient interface {
	ExtraUnary(ctx context.Context, in *tests_test.NumRows, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	ExtraMethod(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
}

type extraSrvClient struct {
	cc *grpc.ClientConn
}

func NewExtraSrvClient(cc *grpc.ClientConn) ExtraSrvClient {
	return &extraSrvClient{cc}
}

func (c *extraSrvClient) ExtraUnary(ctx context.Context, in *tests_test.NumRows, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.ExtraSrv/ExtraUnary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extraSrvClient) ExtraMethod(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.ExtraSrv/ExtraMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExtraSrv service

type ExtraSrvServer interface {
	ExtraUnary(context.Context, *tests_test.NumRows) (*tests_test.ExampleTable, error)
	ExtraMethod(context.Context, *tests_test.ExampleTable) (*tests_test.ExampleTable, error)
}

func RegisterExtraSrvServer(s *grpc.Server, srv ExtraSrvServer) {
	s.RegisterService(&_ExtraSrv_serviceDesc, srv)
}

func _ExtraSrv_ExtraUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.NumRows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtraSrvServer).ExtraUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.ExtraSrv/ExtraUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtraSrvServer).ExtraUnary(ctx, req.(*tests_test.NumRows))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtraSrv_ExtraMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtraSrvServer).ExtraMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.ExtraSrv/ExtraMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtraSrvServer).ExtraMethod(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExtraSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tests.ExtraSrv",
	HandlerType: (*ExtraSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtraUnary",
			Handler:    _ExtraSrv_ExtraUnary_Handler,
		},
		{
			MethodName: "ExtraMethod",
			Handler:    _ExtraSrv_ExtraMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tests/spanner/basic/basic_example.proto",
}

// Client API for MySpanner service

type MySpannerClient interface {
	UniaryInsert(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	UniarySelect(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	TestNest(ctx context.Context, in *Something, opts ...grpc.CallOption) (*Something, error)
	TestEverything(ctx context.Context, in *HasTimestamp, opts ...grpc.CallOption) (*HasTimestamp, error)
	UniarySelectWithDirectives(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	UniaryUpdate(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.PartialTable, error)
	UniaryDeleteRange(ctx context.Context, in *tests_test.ExampleTableRange, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	UniaryDeleteSingle(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	NoArgs(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	ServerStream(ctx context.Context, in *tests_test.Name, opts ...grpc.CallOption) (MySpanner_ServerStreamClient, error)
	ClientStreamInsert(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamInsertClient, error)
	ClientStreamDelete(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamDeleteClient, error)
	ClientStreamUpdate(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamUpdateClient, error)
	// hook tests
	UniaryInsertWithHooks(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	UniarySelectWithHooks(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	UniaryUpdateWithHooks(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.PartialTable, error)
	// really ugly, but tests multi-line
	UniaryDeleteWithHooks(ctx context.Context, in *tests_test.ExampleTableRange, opts ...grpc.CallOption) (*tests_test.ExampleTable, error)
	ServerStreamWithHooks(ctx context.Context, in *tests_test.Name, opts ...grpc.CallOption) (MySpanner_ServerStreamWithHooksClient, error)
	ClientStreamUpdateWithHooks(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamUpdateWithHooksClient, error)
}

type mySpannerClient struct {
	cc *grpc.ClientConn
}

func NewMySpannerClient(cc *grpc.ClientConn) MySpannerClient {
	return &mySpannerClient{cc}
}

func (c *mySpannerClient) UniaryInsert(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniaryInsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniarySelect(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniarySelect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) TestNest(ctx context.Context, in *Something, opts ...grpc.CallOption) (*Something, error) {
	out := new(Something)
	err := grpc.Invoke(ctx, "/tests.MySpanner/TestNest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) TestEverything(ctx context.Context, in *HasTimestamp, opts ...grpc.CallOption) (*HasTimestamp, error) {
	out := new(HasTimestamp)
	err := grpc.Invoke(ctx, "/tests.MySpanner/TestEverything", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniarySelectWithDirectives(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniarySelectWithDirectives", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniaryUpdate(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.PartialTable, error) {
	out := new(tests_test.PartialTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniaryUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniaryDeleteRange(ctx context.Context, in *tests_test.ExampleTableRange, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniaryDeleteRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniaryDeleteSingle(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniaryDeleteSingle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) NoArgs(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/NoArgs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) ServerStream(ctx context.Context, in *tests_test.Name, opts ...grpc.CallOption) (MySpanner_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[0], c.cc, "/tests.MySpanner/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MySpanner_ServerStreamClient interface {
	Recv() (*tests_test.ExampleTable, error)
	grpc.ClientStream
}

type mySpannerServerStreamClient struct {
	grpc.ClientStream
}

func (x *mySpannerServerStreamClient) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) ClientStreamInsert(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamInsertClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[1], c.cc, "/tests.MySpanner/ClientStreamInsert", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerClientStreamInsertClient{stream}
	return x, nil
}

type MySpanner_ClientStreamInsertClient interface {
	Send(*tests_test.ExampleTable) error
	CloseAndRecv() (*tests_test.NumRows, error)
	grpc.ClientStream
}

type mySpannerClientStreamInsertClient struct {
	grpc.ClientStream
}

func (x *mySpannerClientStreamInsertClient) Send(m *tests_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mySpannerClientStreamInsertClient) CloseAndRecv() (*tests_test.NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(tests_test.NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) ClientStreamDelete(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamDeleteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[2], c.cc, "/tests.MySpanner/ClientStreamDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerClientStreamDeleteClient{stream}
	return x, nil
}

type MySpanner_ClientStreamDeleteClient interface {
	Send(*tests_test.ExampleTable) error
	CloseAndRecv() (*tests_test.NumRows, error)
	grpc.ClientStream
}

type mySpannerClientStreamDeleteClient struct {
	grpc.ClientStream
}

func (x *mySpannerClientStreamDeleteClient) Send(m *tests_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mySpannerClientStreamDeleteClient) CloseAndRecv() (*tests_test.NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(tests_test.NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) ClientStreamUpdate(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[3], c.cc, "/tests.MySpanner/ClientStreamUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerClientStreamUpdateClient{stream}
	return x, nil
}

type MySpanner_ClientStreamUpdateClient interface {
	Send(*tests_test.ExampleTable) error
	CloseAndRecv() (*tests_test.NumRows, error)
	grpc.ClientStream
}

type mySpannerClientStreamUpdateClient struct {
	grpc.ClientStream
}

func (x *mySpannerClientStreamUpdateClient) Send(m *tests_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mySpannerClientStreamUpdateClient) CloseAndRecv() (*tests_test.NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(tests_test.NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) UniaryInsertWithHooks(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniaryInsertWithHooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniarySelectWithHooks(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniarySelectWithHooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniaryUpdateWithHooks(ctx context.Context, in *tests_test.ExampleTable, opts ...grpc.CallOption) (*tests_test.PartialTable, error) {
	out := new(tests_test.PartialTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniaryUpdateWithHooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniaryDeleteWithHooks(ctx context.Context, in *tests_test.ExampleTableRange, opts ...grpc.CallOption) (*tests_test.ExampleTable, error) {
	out := new(tests_test.ExampleTable)
	err := grpc.Invoke(ctx, "/tests.MySpanner/UniaryDeleteWithHooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) ServerStreamWithHooks(ctx context.Context, in *tests_test.Name, opts ...grpc.CallOption) (MySpanner_ServerStreamWithHooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[4], c.cc, "/tests.MySpanner/ServerStreamWithHooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerServerStreamWithHooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MySpanner_ServerStreamWithHooksClient interface {
	Recv() (*tests_test.ExampleTable, error)
	grpc.ClientStream
}

type mySpannerServerStreamWithHooksClient struct {
	grpc.ClientStream
}

func (x *mySpannerServerStreamWithHooksClient) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) ClientStreamUpdateWithHooks(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamUpdateWithHooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[5], c.cc, "/tests.MySpanner/ClientStreamUpdateWithHooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerClientStreamUpdateWithHooksClient{stream}
	return x, nil
}

type MySpanner_ClientStreamUpdateWithHooksClient interface {
	Send(*tests_test.ExampleTable) error
	CloseAndRecv() (*tests_test.NumRows, error)
	grpc.ClientStream
}

type mySpannerClientStreamUpdateWithHooksClient struct {
	grpc.ClientStream
}

func (x *mySpannerClientStreamUpdateWithHooksClient) Send(m *tests_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mySpannerClientStreamUpdateWithHooksClient) CloseAndRecv() (*tests_test.NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(tests_test.NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MySpanner service

type MySpannerServer interface {
	UniaryInsert(context.Context, *tests_test.ExampleTable) (*tests_test.ExampleTable, error)
	UniarySelect(context.Context, *tests_test.ExampleTable) (*tests_test.ExampleTable, error)
	TestNest(context.Context, *Something) (*Something, error)
	TestEverything(context.Context, *HasTimestamp) (*HasTimestamp, error)
	UniarySelectWithDirectives(context.Context, *tests_test.ExampleTable) (*tests_test.ExampleTable, error)
	UniaryUpdate(context.Context, *tests_test.ExampleTable) (*tests_test.PartialTable, error)
	UniaryDeleteRange(context.Context, *tests_test.ExampleTableRange) (*tests_test.ExampleTable, error)
	UniaryDeleteSingle(context.Context, *tests_test.ExampleTable) (*tests_test.ExampleTable, error)
	NoArgs(context.Context, *tests_test.ExampleTable) (*tests_test.ExampleTable, error)
	ServerStream(*tests_test.Name, MySpanner_ServerStreamServer) error
	ClientStreamInsert(MySpanner_ClientStreamInsertServer) error
	ClientStreamDelete(MySpanner_ClientStreamDeleteServer) error
	ClientStreamUpdate(MySpanner_ClientStreamUpdateServer) error
	// hook tests
	UniaryInsertWithHooks(context.Context, *tests_test.ExampleTable) (*tests_test.ExampleTable, error)
	UniarySelectWithHooks(context.Context, *tests_test.ExampleTable) (*tests_test.ExampleTable, error)
	UniaryUpdateWithHooks(context.Context, *tests_test.ExampleTable) (*tests_test.PartialTable, error)
	// really ugly, but tests multi-line
	UniaryDeleteWithHooks(context.Context, *tests_test.ExampleTableRange) (*tests_test.ExampleTable, error)
	ServerStreamWithHooks(*tests_test.Name, MySpanner_ServerStreamWithHooksServer) error
	ClientStreamUpdateWithHooks(MySpanner_ClientStreamUpdateWithHooksServer) error
}

func RegisterMySpannerServer(s *grpc.Server, srv MySpannerServer) {
	s.RegisterService(&_MySpanner_serviceDesc, srv)
}

func _MySpanner_UniaryInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniaryInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryInsert(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniarySelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniarySelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniarySelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniarySelect(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_TestNest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Something)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).TestNest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/TestNest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).TestNest(ctx, req.(*Something))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_TestEverything_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasTimestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).TestEverything(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/TestEverything",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).TestEverything(ctx, req.(*HasTimestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniarySelectWithDirectives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniarySelectWithDirectives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniarySelectWithDirectives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniarySelectWithDirectives(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniaryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniaryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryUpdate(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniaryDeleteRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTableRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryDeleteRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniaryDeleteRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryDeleteRange(ctx, req.(*tests_test.ExampleTableRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniaryDeleteSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryDeleteSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniaryDeleteSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryDeleteSingle(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_NoArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).NoArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/NoArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).NoArgs(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tests_test.Name)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MySpannerServer).ServerStream(m, &mySpannerServerStreamServer{stream})
}

type MySpanner_ServerStreamServer interface {
	Send(*tests_test.ExampleTable) error
	grpc.ServerStream
}

type mySpannerServerStreamServer struct {
	grpc.ServerStream
}

func (x *mySpannerServerStreamServer) Send(m *tests_test.ExampleTable) error {
	return x.ServerStream.SendMsg(m)
}

func _MySpanner_ClientStreamInsert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MySpannerServer).ClientStreamInsert(&mySpannerClientStreamInsertServer{stream})
}

type MySpanner_ClientStreamInsertServer interface {
	SendAndClose(*tests_test.NumRows) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ServerStream
}

type mySpannerClientStreamInsertServer struct {
	grpc.ServerStream
}

func (x *mySpannerClientStreamInsertServer) SendAndClose(m *tests_test.NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mySpannerClientStreamInsertServer) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MySpanner_ClientStreamDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MySpannerServer).ClientStreamDelete(&mySpannerClientStreamDeleteServer{stream})
}

type MySpanner_ClientStreamDeleteServer interface {
	SendAndClose(*tests_test.NumRows) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ServerStream
}

type mySpannerClientStreamDeleteServer struct {
	grpc.ServerStream
}

func (x *mySpannerClientStreamDeleteServer) SendAndClose(m *tests_test.NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mySpannerClientStreamDeleteServer) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MySpanner_ClientStreamUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MySpannerServer).ClientStreamUpdate(&mySpannerClientStreamUpdateServer{stream})
}

type MySpanner_ClientStreamUpdateServer interface {
	SendAndClose(*tests_test.NumRows) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ServerStream
}

type mySpannerClientStreamUpdateServer struct {
	grpc.ServerStream
}

func (x *mySpannerClientStreamUpdateServer) SendAndClose(m *tests_test.NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mySpannerClientStreamUpdateServer) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MySpanner_UniaryInsertWithHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryInsertWithHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniaryInsertWithHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryInsertWithHooks(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniarySelectWithHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniarySelectWithHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniarySelectWithHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniarySelectWithHooks(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniaryUpdateWithHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryUpdateWithHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniaryUpdateWithHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryUpdateWithHooks(ctx, req.(*tests_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniaryDeleteWithHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tests_test.ExampleTableRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryDeleteWithHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.MySpanner/UniaryDeleteWithHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryDeleteWithHooks(ctx, req.(*tests_test.ExampleTableRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_ServerStreamWithHooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tests_test.Name)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MySpannerServer).ServerStreamWithHooks(m, &mySpannerServerStreamWithHooksServer{stream})
}

type MySpanner_ServerStreamWithHooksServer interface {
	Send(*tests_test.ExampleTable) error
	grpc.ServerStream
}

type mySpannerServerStreamWithHooksServer struct {
	grpc.ServerStream
}

func (x *mySpannerServerStreamWithHooksServer) Send(m *tests_test.ExampleTable) error {
	return x.ServerStream.SendMsg(m)
}

func _MySpanner_ClientStreamUpdateWithHooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MySpannerServer).ClientStreamUpdateWithHooks(&mySpannerClientStreamUpdateWithHooksServer{stream})
}

type MySpanner_ClientStreamUpdateWithHooksServer interface {
	SendAndClose(*tests_test.NumRows) error
	Recv() (*tests_test.ExampleTable, error)
	grpc.ServerStream
}

type mySpannerClientStreamUpdateWithHooksServer struct {
	grpc.ServerStream
}

func (x *mySpannerClientStreamUpdateWithHooksServer) SendAndClose(m *tests_test.NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mySpannerClientStreamUpdateWithHooksServer) Recv() (*tests_test.ExampleTable, error) {
	m := new(tests_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MySpanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tests.MySpanner",
	HandlerType: (*MySpannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UniaryInsert",
			Handler:    _MySpanner_UniaryInsert_Handler,
		},
		{
			MethodName: "UniarySelect",
			Handler:    _MySpanner_UniarySelect_Handler,
		},
		{
			MethodName: "TestNest",
			Handler:    _MySpanner_TestNest_Handler,
		},
		{
			MethodName: "TestEverything",
			Handler:    _MySpanner_TestEverything_Handler,
		},
		{
			MethodName: "UniarySelectWithDirectives",
			Handler:    _MySpanner_UniarySelectWithDirectives_Handler,
		},
		{
			MethodName: "UniaryUpdate",
			Handler:    _MySpanner_UniaryUpdate_Handler,
		},
		{
			MethodName: "UniaryDeleteRange",
			Handler:    _MySpanner_UniaryDeleteRange_Handler,
		},
		{
			MethodName: "UniaryDeleteSingle",
			Handler:    _MySpanner_UniaryDeleteSingle_Handler,
		},
		{
			MethodName: "NoArgs",
			Handler:    _MySpanner_NoArgs_Handler,
		},
		{
			MethodName: "UniaryInsertWithHooks",
			Handler:    _MySpanner_UniaryInsertWithHooks_Handler,
		},
		{
			MethodName: "UniarySelectWithHooks",
			Handler:    _MySpanner_UniarySelectWithHooks_Handler,
		},
		{
			MethodName: "UniaryUpdateWithHooks",
			Handler:    _MySpanner_UniaryUpdateWithHooks_Handler,
		},
		{
			MethodName: "UniaryDeleteWithHooks",
			Handler:    _MySpanner_UniaryDeleteWithHooks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _MySpanner_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamInsert",
			Handler:       _MySpanner_ClientStreamInsert_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStreamDelete",
			Handler:       _MySpanner_ClientStreamDelete_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStreamUpdate",
			Handler:       _MySpanner_ClientStreamUpdate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamWithHooks",
			Handler:       _MySpanner_ServerStreamWithHooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamUpdateWithHooks",
			Handler:       _MySpanner_ClientStreamUpdateWithHooks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tests/spanner/basic/basic_example.proto",
}

func init() { proto.RegisterFile("tests/spanner/basic/basic_example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xdd, 0x6f, 0x1b, 0xc5,
	0x16, 0xbf, 0xbb, 0x89, 0x7d, 0x93, 0x93, 0xb4, 0xd7, 0x9d, 0x7b, 0x73, 0x95, 0xba, 0x14, 0x46,
	0x4b, 0x43, 0x36, 0x21, 0xb5, 0x13, 0xa7, 0x12, 0x88, 0xca, 0x92, 0xd3, 0x64, 0xab, 0x46, 0x69,
	0x9c, 0x68, 0xed, 0xb4, 0x24, 0x02, 0xc2, 0xda, 0x9e, 0xd8, 0x4b, 0xbd, 0xbb, 0xd6, 0xce, 0x38,
	0xd4, 0xaa, 0x78, 0xa9, 0x90, 0x2a, 0x21, 0x90, 0x1a, 0x21, 0x55, 0x82, 0x7f, 0xa0, 0x12, 0x52,
	0x11, 0x88, 0x97, 0x3c, 0x83, 0x84, 0x78, 0xe2, 0x8d, 0x07, 0x9e, 0xe0, 0x01, 0x09, 0x89, 0x7f,
	0x80, 0x37, 0x84, 0x66, 0xc6, 0x1f, 0x1b, 0xc7, 0x76, 0x12, 0xd7, 0x2f, 0xbc, 0x6c, 0xe6, 0xe3,
	0xcc, 0x39, 0xbf, 0xf3, 0x9b, 0xf3, 0x11, 0x0f, 0x4c, 0x33, 0x42, 0x19, 0x8d, 0xd3, 0x8a, 0xe5,
	0xba, 0xc4, 0x8f, 0xe7, 0x2c, 0x6a, 0xe7, 0xe5, 0x77, 0x97, 0xdc, 0xb7, 0x9c, 0x4a, 0x99, 0xc4,
	0x2a, 0xbe, 0xc7, 0x3c, 0x14, 0x12, 0x82, 0xd1, 0x89, 0x0a, 0xf1, 0xa9, 0x4d, 0x59, 0xdc, 0xab,
	0x30, 0xdb, 0x73, 0xa9, 0xdc, 0x8d, 0xbe, 0x54, 0xf4, 0xbc, 0x62, 0x99, 0xc4, 0xc5, 0x2c, 0x57,
	0xdd, 0x8b, 0x33, 0xdb, 0x21, 0x94, 0x59, 0x4e, 0xa5, 0x2e, 0x80, 0xdb, 0x05, 0x0a, 0x84, 0xe6,
	0x7d, 0xbb, 0xc2, 0x3c, 0xbf, 0x2e, 0x31, 0x21, 0x91, 0xf0, 0xaf, 0xf8, 0xc8, 0x65, 0xed, 0x5b,
	0x05, 0x46, 0x33, 0x9e, 0x43, 0x58, 0xc9, 0x76, 0x8b, 0xe8, 0x1a, 0x84, 0xc4, 0x60, 0x52, 0xc5,
	0x8a, 0x3e, 0x96, 0x78, 0x31, 0x26, 0x0e, 0xc5, 0x9a, 0x02, 0xad, 0x91, 0x51, 0xa6, 0xc4, 0x94,
	0xc2, 0x68, 0x0a, 0xc2, 0x4e, 0x8d, 0xb8, 0x55, 0x67, 0x72, 0x08, 0x2b, 0xfa, 0xf9, 0xc4, 0xb9,
	0xfa, 0xb1, 0xf5, 0x9a, 0xe1, 0x56, 0x1d, 0xb3, 0xbe, 0x89, 0x16, 0x00, 0x1c, 0xab, 0x52, 0x21,
	0x05, 0x21, 0x3a, 0x2c, 0x44, 0x2f, 0x34, 0x44, 0xc5, 0x86, 0x10, 0x0f, 0x08, 0x45, 0xa7, 0xe0,
	0xdc, 0x11, 0x8b, 0xe8, 0x7f, 0x0d, 0x80, 0x0a, 0x56, 0xf4, 0xd1, 0x3a, 0x00, 0xed, 0x7b, 0x15,
	0xc6, 0x6f, 0x59, 0x34, 0xdb, 0x20, 0x05, 0xc5, 0x60, 0x98, 0x33, 0x24, 0xa4, 0xc6, 0x12, 0xd1,
	0x98, 0x64, 0x27, 0xd6, 0x60, 0x27, 0xd6, 0x94, 0x34, 0x85, 0x1c, 0xba, 0x02, 0xc3, 0xd4, 0x73,
	0x48, 0xdd, 0xed, 0x48, 0xbb, 0xdb, 0xa6, 0xd8, 0x45, 0x11, 0x18, 0xa2, 0xcc, 0x17, 0x4e, 0x8e,
	0x9a, 0x7c, 0x88, 0x62, 0x10, 0x62, 0x56, 0xae, 0x4c, 0x84, 0x37, 0x63, 0x89, 0xc9, 0xfa, 0x41,
	0xc1, 0xaf, 0x21, 0xef, 0x37, 0xcb, 0xf7, 0x4d, 0x29, 0x86, 0x10, 0x0c, 0x53, 0xe6, 0xd3, 0xc9,
	0x10, 0x1e, 0xd2, 0x47, 0x4d, 0x31, 0x46, 0xf3, 0x10, 0x16, 0x9b, 0x74, 0x32, 0x8c, 0x87, 0x7a,
	0x2a, 0xa9, 0xcb, 0xa1, 0x57, 0x20, 0xc4, 0xf1, 0xd0, 0xc9, 0x7f, 0x8b, 0x03, 0xc7, 0xe1, 0xca,
	0x6d, 0x34, 0x0f, 0x21, 0x11, 0x27, 0x93, 0x23, 0x42, 0xae, 0x17, 0x0d, 0x52, 0x70, 0xf6, 0x0a,
	0x84, 0xe5, 0xa5, 0xa1, 0x71, 0x18, 0xd9, 0xd8, 0xcc, 0xae, 0x6e, 0xa4, 0x77, 0xe7, 0x23, 0xff,
	0x0a, 0xcc, 0x16, 0x22, 0xca, 0xac, 0x06, 0xd0, 0xba, 0x2f, 0x34, 0x0a, 0xa1, 0x8d, 0xcd, 0xac,
	0x10, 0xab, 0x0f, 0x17, 0x22, 0x4a, 0xe2, 0x1b, 0x05, 0x46, 0x8c, 0xfb, 0xcc, 0xb7, 0x32, 0xfe,
	0x3e, 0x7a, 0x1b, 0x40, 0x8c, 0xb7, 0x5c, 0xcb, 0xaf, 0xa1, 0xff, 0x06, 0x1d, 0x4c, 0x57, 0x1d,
	0xd3, 0x7b, 0x9f, 0x46, 0xbb, 0x7a, 0xad, 0xe1, 0x87, 0x87, 0x07, 0xea, 0x25, 0xb8, 0x98, 0x31,
	0x6e, 0x1b, 0xcb, 0x59, 0x3c, 0x8b, 0x6f, 0x9a, 0x1b, 0xeb, 0x98, 0x70, 0x7d, 0xbb, 0x55, 0xa1,
	0x70, 0x09, 0xc6, 0x84, 0xfa, 0x75, 0xc2, 0x4a, 0x5e, 0x01, 0x75, 0x55, 0xd5, 0xdd, 0x48, 0x34,
	0xf4, 0xf8, 0xf0, 0x40, 0x55, 0x12, 0x7f, 0x62, 0x18, 0x5d, 0xaf, 0x65, 0x64, 0xb6, 0xa2, 0xaf,
	0x15, 0x18, 0xdf, 0x72, 0x6d, 0xcb, 0xaf, 0xad, 0xba, 0x94, 0xf8, 0xac, 0x1f, 0xcd, 0x9a, 0xc3,
	0xe1, 0x97, 0x60, 0x5e, 0xaa, 0xc0, 0xb6, 0xcb, 0x3c, 0x5c, 0x4f, 0xfd, 0x5d, 0x71, 0x9f, 0x58,
	0xb7, 0x0b, 0x73, 0x98, 0x32, 0xcb, 0x67, 0xbb, 0xfc, 0x16, 0xe6, 0xb0, 0x6b, 0x39, 0x64, 0x06,
	0xae, 0xdc, 0xb1, 0xca, 0x55, 0x42, 0xb1, 0x9e, 0xe2, 0xfb, 0xa9, 0xa0, 0x80, 0x96, 0xb3, 0x5c,
	0xcb, 0xb5, 0xa8, 0x36, 0x83, 0x54, 0xbb, 0x80, 0xa0, 0xb5, 0x87, 0x3e, 0x6e, 0x62, 0xce, 0x90,
	0x32, 0xc9, 0xf7, 0x87, 0xf9, 0x16, 0xc7, 0xbc, 0x0c, 0xaf, 0x35, 0x29, 0xdf, 0xf3, 0x3d, 0xa7,
	0x0d, 0xf5, 0xdd, 0x12, 0xf1, 0x09, 0xb6, 0x0b, 0xc9, 0x94, 0x5d, 0xc0, 0x4b, 0xe9, 0x15, 0x81,
	0x3a, 0x99, 0xe2, 0x5f, 0x01, 0x6a, 0x58, 0x8c, 0x72, 0x30, 0x92, 0x25, 0x94, 0xa5, 0x09, 0x65,
	0xe8, 0x58, 0x9c, 0x46, 0x8f, 0xad, 0x68, 0x09, 0x6e, 0xf9, 0x2a, 0xbc, 0x7a, 0x3a, 0xcb, 0xb2,
	0xfc, 0xfc, 0xa1, 0xc0, 0x79, 0x6e, 0xc4, 0xd8, 0x27, 0x7e, 0x4d, 0x2e, 0x35, 0x42, 0x2c, 0x58,
	0x14, 0xa2, 0x9d, 0x16, 0xb5, 0x67, 0x0a, 0xb7, 0xf8, 0x54, 0x81, 0x4b, 0x3d, 0x4c, 0xc2, 0xf5,
	0x80, 0x4d, 0xdb, 0x21, 0xc2, 0x5f, 0x9e, 0x63, 0xc9, 0x14, 0xff, 0xca, 0x29, 0xf3, 0x93, 0x29,
	0xca, 0x7c, 0x31, 0x11, 0xa7, 0x92, 0x29, 0x79, 0x78, 0x4d, 0xac, 0x70, 0x8b, 0x38, 0x89, 0x53,
	0x72, 0xd0, 0x50, 0x20, 0x96, 0xe4, 0xa0, 0xae, 0x44, 0xae, 0xf0, 0xbf, 0x4d, 0x45, 0xf2, 0x9c,
	0xcc, 0xfd, 0x2f, 0x15, 0x88, 0x06, 0xef, 0xf7, 0xae, 0xcd, 0x4a, 0x2b, 0xb6, 0x4f, 0xf2, 0xcc,
	0xde, 0x27, 0xb4, 0xaf, 0xdb, 0x7e, 0x8b, 0x33, 0x70, 0x17, 0xd6, 0x7a, 0x10, 0x90, 0x7a, 0x70,
	0x73, 0xc3, 0x5c, 0x36, 0x76, 0x57, 0xd3, 0x2b, 0xc6, 0x9b, 0x49, 0xdb, 0x2d, 0x90, 0xfb, 0x1f,
	0x9c, 0x32, 0x02, 0xbe, 0x6a, 0x06, 0xe4, 0x56, 0xa5, 0x60, 0x31, 0x72, 0x5a, 0x88, 0x9b, 0x96,
	0xcf, 0x6c, 0xab, 0x2c, 0x21, 0x96, 0x39, 0xc4, 0x22, 0x4c, 0x48, 0x15, 0x6d, 0xf1, 0x00, 0xb3,
	0x94, 0xb0, 0x40, 0x02, 0x25, 0x53, 0xed, 0xc9, 0x94, 0xd4, 0x3c, 0xdf, 0x72, 0x8b, 0x84, 0x6a,
	0x80, 0x36, 0x7d, 0xdb, 0xb1, 0xfc, 0xda, 0x1a, 0xa9, 0xe9, 0x12, 0xfa, 0xcc, 0x91, 0xfc, 0xe1,
	0xc0, 0x9f, 0x2a, 0x70, 0x41, 0x42, 0x5e, 0x21, 0x65, 0xc2, 0x88, 0xc9, 0xcf, 0xa2, 0xcb, 0x5d,
	0xeb, 0x32, 0xdf, 0xee, 0xc1, 0xef, 0x36, 0x07, 0x9f, 0x85, 0xd4, 0x8a, 0x71, 0xdb, 0xc8, 0x1a,
	0x8d, 0xf2, 0x15, 0xf4, 0x20, 0x93, 0x5d, 0x32, 0xb3, 0x7a, 0x1d, 0xb6, 0x5d, 0x98, 0xc1, 0x46,
	0x7a, 0x45, 0x4f, 0x11, 0xb7, 0x20, 0x26, 0x6b, 0xab, 0xe9, 0x15, 0x7d, 0x79, 0x63, 0x06, 0x8d,
	0x34, 0x04, 0x50, 0x58, 0xee, 0xa1, 0x87, 0x0a, 0xa0, 0x20, 0xd2, 0x8c, 0xed, 0x16, 0xcb, 0xa4,
	0xaf, 0x28, 0x78, 0x9d, 0xa3, 0x5c, 0x84, 0x85, 0xee, 0x28, 0xef, 0x2c, 0xdd, 0xde, 0x32, 0x32,
	0xfa, 0xb4, 0x95, 0xcb, 0x4f, 0xcf, 0xe1, 0x85, 0xc4, 0xe2, 0x1c, 0x16, 0xf4, 0x95, 0x20, 0x9c,
	0xf6, 0x96, 0xfc, 0x62, 0x7f, 0xd1, 0x37, 0xcb, 0xed, 0x4e, 0xc1, 0xcb, 0x54, 0x84, 0x73, 0xe7,
	0x8c, 0x2f, 0xdb, 0x8e, 0xcd, 0xf0, 0x02, 0x7a, 0x17, 0xc6, 0x33, 0xc4, 0xdf, 0x27, 0x7e, 0x86,
	0xf9, 0xc4, 0x72, 0x9a, 0x15, 0x45, 0x76, 0x12, 0xcb, 0xe9, 0x65, 0x47, 0xe3, 0x76, 0x2e, 0x07,
	0xd2, 0xfc, 0xb8, 0x87, 0xf3, 0x0a, 0x2f, 0xf9, 0x68, 0xb9, 0x6c, 0x13, 0x97, 0x49, 0x13, 0x27,
	0x16, 0xfe, 0x4e, 0xcd, 0x4c, 0x7b, 0x8f, 0xdb, 0x22, 0xb0, 0xbe, 0x9a, 0xce, 0x18, 0x66, 0x16,
	0xaf, 0xa6, 0xb3, 0x1b, 0xa7, 0xaa, 0xf9, 0x75, 0x8a, 0x3b, 0x95, 0xfc, 0xc5, 0xe3, 0xa5, 0x5e,
	0xe4, 0x97, 0xae, 0xa0, 0x07, 0x47, 0x21, 0xcb, 0x48, 0x38, 0x2b, 0xe4, 0x6b, 0x1c, 0x72, 0x1c,
	0xa6, 0x4e, 0xbc, 0x7e, 0x71, 0xe5, 0x1c, 0x8a, 0x6a, 0x17, 0x74, 0x05, 0x7d, 0xd1, 0x46, 0xd8,
	0x89, 0x49, 0xde, 0xd1, 0x7a, 0x9e, 0x5b, 0x7f, 0x07, 0x6e, 0x56, 0x3b, 0xe5, 0xf7, 0x89, 0xd9,
	0x2d, 0x4a, 0x0e, 0xde, 0x5c, 0xeb, 0x98, 0xd0, 0xc3, 0x8d, 0x7a, 0xa4, 0x2b, 0xe8, 0x77, 0x15,
	0x26, 0x82, 0x0d, 0x9d, 0x17, 0xcf, 0x5b, 0x9e, 0x77, 0xaf, 0xbf, 0xc8, 0xfd, 0x4c, 0xe5, 0xa8,
	0x3f, 0x55, 0xe1, 0x8e, 0x7d, 0xc6, 0xde, 0x8e, 0x71, 0x3f, 0xbd, 0xdd, 0xcc, 0xc2, 0xff, 0x83,
	0xe8, 0x6f, 0x90, 0x3d, 0xcf, 0x27, 0x1c, 0x3f, 0x7a, 0xa3, 0x68, 0xb3, 0x52, 0x35, 0x17, 0xcb,
	0x7b, 0x4e, 0x9c, 0xe5, 0xdd, 0x7c, 0xd9, 0xab, 0x16, 0xe4, 0x6f, 0x81, 0xfc, 0xd5, 0x22, 0x71,
	0xaf, 0x36, 0x7e, 0x55, 0x1c, 0xfd, 0x35, 0x52, 0xe2, 0xae, 0xef, 0x64, 0x8e, 0x72, 0xb2, 0xb4,
	0xc7, 0x88, 0xff, 0xbc, 0x4a, 0xd1, 0xb3, 0x26, 0xd3, 0xad, 0x36, 0xd5, 0x3f, 0xd3, 0xbf, 0x88,
	0x26, 0xfd, 0xb3, 0x02, 0xfa, 0x69, 0xff, 0x23, 0xe1, 0xdc, 0xfd, 0x93, 0xf8, 0xfa, 0xad, 0xc9,
	0x97, 0x4c, 0xa0, 0x33, 0xf3, 0x75, 0xa4, 0x5d, 0x3e, 0x11, 0x91, 0xf9, 0x58, 0x85, 0xcc, 0x56,
	0x5f, 0x09, 0xd5, 0x6c, 0x97, 0x78, 0xd3, 0x5c, 0x5d, 0x5f, 0x32, 0xb7, 0x77, 0xd7, 0x8c, 0xed,
	0x6e, 0xed, 0xb2, 0x45, 0xb3, 0x34, 0x36, 0x68, 0x9a, 0xa5, 0xd6, 0xc1, 0xd0, 0xfc, 0x6b, 0x93,
	0x66, 0x59, 0x25, 0x5b, 0x34, 0xf7, 0xdd, 0xdd, 0x3f, 0x11, 0x5c, 0x3f, 0x52, 0x21, 0x2c, 0x4b,
	0x27, 0x0c, 0xf3, 0xda, 0x09, 0xe7, 0x8e, 0xfe, 0x03, 0x19, 0x69, 0x6b, 0xf1, 0x18, 0xfe, 0xd3,
	0xd6, 0xe5, 0x61, 0xa4, 0x7b, 0x9f, 0x6f, 0x51, 0x2c, 0x61, 0x0f, 0x9a, 0x62, 0xa9, 0x75, 0x30,
	0x14, 0x3f, 0x51, 0x61, 0x22, 0xd8, 0xa4, 0x5b, 0x14, 0x9f, 0xa5, 0x5b, 0xff, 0x28, 0x32, 0xfe,
	0x07, 0xa5, 0x67, 0xbf, 0xe6, 0xb4, 0x04, 0x4d, 0x0d, 0x8e, 0x96, 0xa0, 0xd6, 0x81, 0xd0, 0x32,
	0xaf, 0xa0, 0x9f, 0x54, 0xb8, 0x74, 0xbc, 0x53, 0x9e, 0x26, 0xd1, 0x3b, 0xb6, 0xcc, 0x0f, 0x45,
	0xdc, 0xfd, 0xa5, 0x40, 0xbc, 0x6b, 0xd3, 0x14, 0xb9, 0x3c, 0x6d, 0xd1, 0xc2, 0xde, 0x34, 0xae,
	0xdc, 0xeb, 0xdd, 0x1d, 0xcd, 0x1d, 0x78, 0xe1, 0x38, 0xba, 0x01, 0x31, 0xba, 0xdd, 0xc9, 0xf3,
	0x81, 0xf0, 0xaa, 0x2b, 0xd1, 0xef, 0x94, 0x8f, 0x0e, 0x0f, 0xd4, 0x43, 0x05, 0x76, 0xe0, 0x62,
	0xd7, 0x07, 0x8e, 0xc8, 0x98, 0x16, 0x5e, 0xaf, 0xf1, 0xe9, 0xec, 0xe2, 0x99, 0xac, 0x39, 0x35,
	0xce, 0x13, 0xec, 0x00, 0x6a, 0xbc, 0x69, 0xb5, 0x9e, 0x3e, 0x22, 0xe7, 0xb5, 0xfa, 0x73, 0xc9,
	0x6c, 0x7f, 0x2e, 0x88, 0x87, 0x40, 0xf1, 0xf2, 0x70, 0xe3, 0x91, 0xf2, 0xf9, 0xe1, 0x81, 0x9a,
	0xea, 0x5f, 0xcd, 0x75, 0xf1, 0xdd, 0x79, 0x6e, 0x0d, 0xb9, 0xb0, 0x90, 0x5e, 0xfc, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0xeb, 0x2d, 0x08, 0x02, 0xbb, 0x14, 0x00, 0x00,
}
