// Copyright 2017, TCN Inc.
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package examples.test_issue_32;

option go_package = "github.com/tcncloud/protoc-gen-persist/examples/test_issue_32;test";
option (persist.pkg) = "github.com/tcncloud/persist;persist";

import "persist/options.proto";
import "google/protobuf/timestamp.proto";

message Fld {

}
message Request{
    int32 id = 1;
    Fld test = 2;
}

message Response  {
    int32 id = 1;
}

service TestService {
    option (persist.service_type) = SQL;
    option (persist.mapping) = {
        types: [
            {
                proto_type_name: ".google.protobuf.Timestamp"
                proto_type: TYPE_MESSAGE
                go_type: "MyTime"
                go_package: ""
            }
        ]
    };

    rpc GetTime(Request) returns (Response) {
        option (persist.ql) = {
            query: ["SELECT time FROM timesource WHERE time = $1"]
            arguments: ["id"]
            before: {
                name: "TestHook"
                package: ""
            }
        };
    }
}