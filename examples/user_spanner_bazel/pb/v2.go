// This file is generated by protoc-gen-persist
// Source File: pb/user.proto
// DO NOT EDIT !

// TXs, Queries, Hooks, TypeMappings, Handlers, Rows, Iters
package pb

import (
	"fmt"
	io "io"

	spanner "cloud.google.com/go/spanner"
	"google.golang.org/api/iterator"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "golang.org/x/net/context"
	codes "google.golang.org/grpc/codes"
	gstatus "google.golang.org/grpc/status"
)

// WriteHandlers
// RestOf<S>Handlers
type RestOfUServHandlers interface {
	UpdateAllNames(*Empty, UServ_UpdateAllNamesServer) error
}

func (this *UServ_Impl) UpdateAllNames(req *Empty, stream UServ_UpdateAllNamesServer) error {
	return this.HANDLERS.UpdateAllNames(req, stream)
}

// WriteTypeMappigns
type UServ_TypeMappings interface {
	TimestampTimestamp() UServTimestampTimestampMappingImpl
	SliceStringParam() UServSliceStringParamMappingImpl
}
type UServ_DefaultTypeMappings struct{}

func (this *UServ_DefaultTypeMappings) TimestampTimestamp() UServTimestampTimestampMappingImpl {
	return &UServ_DefaultTimestampTimestampMappingImpl{}
}

type UServ_DefaultTimestampTimestampMappingImpl struct{}

func (this *UServ_DefaultTimestampTimestampMappingImpl) ToProto(**timestamp.Timestamp) error {
	return nil
}
func (this *UServ_DefaultTimestampTimestampMappingImpl) Empty() UServTimestampTimestampMappingImpl {
	return this
}
func (this *UServ_DefaultTimestampTimestampMappingImpl) ToSpanner(*timestamp.Timestamp) UServTimestampTimestampMappingImpl {
	return this
}
func (this *UServ_DefaultTimestampTimestampMappingImpl) SpannerScan(*spanner.GenericColumnValue) error {
	return nil
}
func (this *UServ_DefaultTimestampTimestampMappingImpl) SpannerValue() (interface{}, error) {
	return "DEFAULT_TYPE_MAPPING_VALUE", nil
}

type UServTimestampTimestampMappingImpl interface {
	ToProto(**timestamp.Timestamp) error
	Empty() UServTimestampTimestampMappingImpl
	ToSpanner(*timestamp.Timestamp) UServTimestampTimestampMappingImpl
	SpannerScan(*spanner.GenericColumnValue) error
	SpannerValue() (interface{}, error)
}

func (this *UServ_DefaultTypeMappings) SliceStringParam() UServSliceStringParamMappingImpl {
	return &UServ_DefaultSliceStringParamMappingImpl{}
}

type UServ_DefaultSliceStringParamMappingImpl struct{}

func (this *UServ_DefaultSliceStringParamMappingImpl) ToProto(**SliceStringParam) error {
	return nil
}
func (this *UServ_DefaultSliceStringParamMappingImpl) Empty() UServSliceStringParamMappingImpl {
	return this
}
func (this *UServ_DefaultSliceStringParamMappingImpl) ToSpanner(*SliceStringParam) UServSliceStringParamMappingImpl {
	return this
}
func (this *UServ_DefaultSliceStringParamMappingImpl) SpannerScan(*spanner.GenericColumnValue) error {
	return nil
}
func (this *UServ_DefaultSliceStringParamMappingImpl) SpannerValue() (interface{}, error) {
	return "DEFAULT_TYPE_MAPPING_VALUE", nil
}

type UServSliceStringParamMappingImpl interface {
	ToProto(**SliceStringParam) error
	Empty() UServSliceStringParamMappingImpl
	ToSpanner(*SliceStringParam) UServSliceStringParamMappingImpl
	SpannerScan(src *spanner.GenericColumnValue) error
	SpannerValue() (interface{}, error)
}

type UServ_Opts struct {
	MAPPINGS UServ_TypeMappings
	HOOKS    UServ_Hooks
}

type UServ_Hooks interface {
	InsertUsersBeforeHook(context.Context, *User) (*Empty, error)
	InsertUsersAfterHook(context.Context, *User, *Empty) error
	GetAllUsersBeforeHook(context.Context, *Empty) (*User, error)
	GetAllUsersAfterHook(context.Context, *Empty, *User) error
}
type alwaysScanner struct {
	i *interface{}
}

func (s *alwaysScanner) Scan(src interface{}) error {
	s.i = &src
	return nil
}

type Result interface {
	LastInsertId() (int64, error)
	RowsAffected() (int64, error)
}
type SpannerResult struct {
	// TODO shouldn't be an iter
	iter *spanner.RowIterator
}

func (sr *SpannerResult) LastInsertId() (int64, error) {
	// sr.iter.QueryStats or sr.iter.QueryPlan
	return -1, nil
}
func (sr *SpannerResult) RowsAffected() (int64, error) {
	// Execution statistics for the query. Available after RowIterator.Next returns iterator.Done
	return sr.iter.RowCount, nil
}

type Runnable interface {
	QueryWithStats(context.Context, spanner.Statement) *spanner.RowIterator
}

// func DefaultClientStreamingPersistTx(ctx context.Context, db *spanner.Client) (PersistTx, error) {
//   // TODO dont need if spanner is taking care of it
// 	return db.BeginTx(ctx, nil)
// }
// func DefaultServerStreamingPersistTx(ctx context.Context, db *spanner.Client) (PersistTx, error) {
// 	return NopPersistTx(db)
// }
// func DefaultUnaryPersistTx(ctx context.Context, db *spanner.Client) (PersistTx, error) {
// 	return NopPersistTx(db)
// }

// type ignoreTx struct {
// 	r Runnable
// }

// func (this *ignoreTx) Commit() error   { return nil }
// func (this *ignoreTx) Rollback() error { return nil }
// func (this *ignoreTx) QueryContext(ctx context.Context, x string, ys ...interface{}) (*spanner.RowIterator, error) {
// 	return this.r.QueryContext(ctx, x, ys...)
// }
// func (this *ignoreTx) ExecContext(ctx context.Context, x string, ys ...interface{}) (SpannerResult, error) {
// 	return this.r.ExecContext(ctx, x, ys...)
// }

type UServ_QueryOpts struct {
	MAPPINGS UServ_TypeMappings
	db       Runnable
	ctx      context.Context
}

func DefaultUServQueryOpts(db Runnable) UServ_QueryOpts {
	return UServ_QueryOpts{
		db: db,
	}
}

type UServ_Queries struct {
	opts UServ_Opts
}

//type PersistTx interface {
//	Commit() error
//	Rollback() error
//	Runnable
//}

//func (tx *PersistTx) Commit() error {
//  //TODO
//}
//func (tx *PersistTx) Rollback() error {
//  //TODO
//}

// func NopPersistTx(r Runnable) (PersistTx, error) {
// 	return &ignoreTx{r}, nil
// }

type UServ_InsertUsersIn interface {
	GetId() int64
	GetName() string
	GetFriends() *Friends
	GetCreatedOn() *timestamp.Timestamp
}
type UServ_InsertUsersOut interface {
}

type UServ_InsertUsersRow struct {
	item UServ_InsertUsersOut
	err  error
}

func newUServ_InsertUsersRow(item UServ_InsertUsersOut, err error) *UServ_InsertUsersRow {
	return &UServ_InsertUsersRow{item, err}
}

// Unwrap takes an address to a proto.Message as its only parameter
// Unwrap can only set into output protos of that match method return types + the out option on the query itself
func (this *UServ_InsertUsersRow) Unwrap(pointerToMsg proto.Message) error {
	if this.err != nil {
		return this.err
	}
	if o, ok := (pointerToMsg).(*Empty); ok {
		if o == nil {
			return fmt.Errorf("must initialize *Empty before giving to Unwrap()")
		}
		res, _ := this.Empty()
		_ = res

		return nil
	}

	return nil
}

// one for each Output type of the methods that use this query + the output proto itself

func (this *UServ_InsertUsersRow) Empty() (*Empty, error) {
	if this.err != nil {
		return nil, this.err
	}
	return &Empty{}, nil
}

func (this *UServ_InsertUsersRow) Proto() (*Empty, error) {
	if this.err != nil {
		return nil, this.err
	}
	return &Empty{}, nil
}

// UServPersistQueries returns all the known 'SQL' queires for the 'UServ' service.
func UServPersistQueries(opts ...UServ_Opts) *UServ_Queries {
	var myOpts UServ_Opts
	if len(opts) > 0 {
		myOpts = opts[0]
	} else {
		myOpts = UServOpts(nil, nil)
	}
	return &UServ_Queries{
		opts: myOpts,
	}
}

// camel case the services query name
// method for every query

// InsertUsersQuery returns a new struct wrapping the current UServ_QueryOpts
// that will perform 'UServ' services 'insert_users_query' on the database
// when executed
func (this *UServ_Queries) InsertUsers(ctx context.Context, db Runnable) *UServ_InsertUsersQuery {
	return &UServ_InsertUsersQuery{
		opts: UServ_QueryOpts{
			MAPPINGS: this.opts.MAPPINGS,
		},
		ctx: ctx,
		db:  db,
	}
}

// I dont know this is a insert query, I only know this is a query
type UServ_InsertUsersQuery struct {
	opts UServ_QueryOpts
	ctx  context.Context
	db   Runnable
}

func (this *UServ_InsertUsersQuery) QueryInTypeUser()  {}
func (this *UServ_InsertUsersQuery) QueryOutTypeUser() {}

// the main execute function
func (this *UServ_InsertUsersQuery) Execute(x UServ_InsertUsersIn) *UServ_InsertUsersIter {
	ctx := this.ctx
	result := &UServ_InsertUsersIter{
		result: SpannerResult{},
		tm:     this.opts.MAPPINGS,
		ctx:    ctx,
	}
	params, err := func() (map[string]interface{}, error) {
		result := make(map[string]interface{})
		result["id"] = x.GetId()
		result["name"] = x.GetName()
		friends, err := proto.Marshal(x.GetFriends())
		if err != nil {
			return nil, err
		}
		result["friends"] = friends
		created_on, err := this.opts.MAPPINGS.TimestampTimestamp().ToSpanner(x.GetCreatedOn()).SpannerValue()
		if err != nil {
			return nil, err
		}
		result["created_on"] = created_on

		return result, nil
	}()
	if err != nil {
		result.err = err
		return result
	}
	iter := this.db.QueryWithStats(this.ctx, spanner.Statement{
		SQL:    "INSERT INTO users (id, name, friends, created_on) VALUES (@id, @name, @friends, @created_on)",
		Params: params,
	})
	result.rows = iter

	return result
}

//<SERVICE><QUERY (camel)><MESSAGE TYPE>Iter
type UServ_InsertUsersIter struct {
	result SpannerResult
	rows   *spanner.RowIterator
	err    error
	tm     UServ_TypeMappings
	ctx    context.Context
}

func (this *UServ_InsertUsersIter) IterOutTypeUser() {}
func (this *UServ_InsertUsersIter) IterInTypeUser()  {}

// Each performs 'fun' on each row in the result set.
// Each respects the context passed to it.
// It will stop iteration, and returns ctx.Err() if encountered.
// TODO this will not work outside of the transaction...
// TODO can just call the "Do" method on spanners iterator
func (this *UServ_InsertUsersIter) Each(fun func(*UServ_InsertUsersRow) error) error {
	for {
		select {
		case <-this.ctx.Done():
			return this.ctx.Err()
		default:
			if row, ok := this.Next(); !ok {
				return nil
			} else if err := fun(row); err != nil {
				return err
			}
		}
	}
	return nil
}

// One returns the sole row, or ensures an error if there was not one result when this row is converted
func (this *UServ_InsertUsersIter) One() *UServ_InsertUsersRow {
	first, hasFirst := this.Next()
	_, hasSecond := this.Next()
	if !hasFirst || hasSecond {
		amount := "none"
		if hasSecond {
			amount = "multiple"
		}
		return &UServ_InsertUsersRow{err: fmt.Errorf("expected exactly 1 result from query 'InsertUsers' found %s", amount)}
	}
	return first
}

// Zero returns an error if there were any rows in the result
func (this *UServ_InsertUsersIter) Zero() error {
	if _, ok := this.Next(); ok {
		return fmt.Errorf("expected exactly 0 results from query 'InsertUsers'")
	}
	return nil
}

// Next returns the next scanned row out of the database, or (nil, false) if there are no more rows
func (this *UServ_InsertUsersIter) Next() (*UServ_InsertUsersRow, bool) {
	row, err := this.rows.Next()
	_ = row
	if err == iterator.Done {
		return nil, false
	}
	if err != nil {
		return &UServ_InsertUsersRow{err: err}, true
	}

	res := &Empty{}
	return &UServ_InsertUsersRow{item: res}, true
}

// Slice returns all rows found in the iterator as a Slice.
func (this *UServ_InsertUsersIter) Slice() []*UServ_InsertUsersRow {
	var results []*UServ_InsertUsersRow
	for {
		if i, ok := this.Next(); ok {
			results = append(results, i)
		} else {
			break
		}
	}
	return results
}

func UServOpts(hooks UServ_Hooks, mappings UServ_TypeMappings) UServ_Opts {
	opts := UServ_Opts{
		HOOKS:    &UServ_DefaultHooks{},
		MAPPINGS: &UServ_DefaultTypeMappings{},
	}
	if hooks != nil {
		opts.HOOKS = hooks
	}
	if mappings != nil {
		opts.MAPPINGS = mappings
	}
	return opts
}

type UServ_Impl struct {
	opts     *UServ_Opts
	QUERIES  *UServ_Queries
	HANDLERS RestOfUServHandlers
	DB       *spanner.Client
}

func UServPersistImpl(db *spanner.Client, handlers RestOfUServHandlers, opts ...UServ_Opts) *UServ_Impl {
	var myOpts UServ_Opts
	if len(opts) > 0 {
		myOpts = opts[0]
	} else {
		myOpts = UServOpts(nil, nil)
	}
	return &UServ_Impl{
		opts:     &myOpts,
		QUERIES:  UServPersistQueries(myOpts),
		DB:       db,
		HANDLERS: handlers,
	}
}

type UServ_DefaultHooks struct{}

func (*UServ_DefaultHooks) InsertUsersBeforeHook(context.Context, *User) (*Empty, error) {
	return nil, nil
}
func (*UServ_DefaultHooks) GetAllUsersBeforeHook(context.Context, *Empty) (*User, error) {
	return nil, nil
}
func (*UServ_DefaultHooks) InsertUsersAfterHook(context.Context, *User, *Empty) error {
	return nil
}
func (*UServ_DefaultHooks) GetAllUsersAfterHook(context.Context, *Empty, *User) error {
	return nil
}

// THIS is the grpc handler
func (this *UServ_Impl) InsertUsers(stream UServ_InsertUsersServer) error {
	if err := this.InsertUsersTx(stream); err != nil {
		return gstatus.Errorf(codes.Unknown, "error executing 'insert_users' query: %v", err)
	}
	return nil
}

func (this *UServ_Impl) InsertUsersTx(stream UServ_InsertUsersServer) error {
	var first *User
	users := make([]*User, 0)
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, "error receiving request: %v", err)
		}

		if first == nil {
			first = req
		}

		users = append(users, req)

		beforeRes, err := this.opts.HOOKS.InsertUsersBeforeHook(stream.Context(), req)
		if err != nil {
			return gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
		} else if beforeRes != nil {
			continue
		}
	}

	_, err := this.DB.ReadWriteTransaction(stream.Context(), func(ctx context.Context, tx *spanner.ReadWriteTransaction) error {
		query := this.QUERIES.InsertUsers(stream.Context(), tx)
		for _, user := range users {
			err := query.Execute(user).Zero()
			if err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		return err
	}

	res := &Empty{}
	if err := this.opts.HOOKS.InsertUsersAfterHook(stream.Context(), first, res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
	}

	if err := stream.SendAndClose(res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error sending back response: %v", err)
	}

	return nil
}

// GetAllUsersQuery returns a new struct wrapping the current UServ_QueryOpts
// that will perform 'UServ' services 'get_all_users' on the database
// when executed
func (this *UServ_Queries) GetAllUsers(ctx context.Context, db Runnable) *UServ_GetAllUsersQuery {
	return &UServ_GetAllUsersQuery{
		opts: UServ_QueryOpts{
			MAPPINGS: this.opts.MAPPINGS,
		},
		ctx: ctx,
		db:  db,
	}
}

type UServ_GetAllUsersQuery struct {
	opts UServ_QueryOpts
	ctx  context.Context
	db   Runnable
}

func (this *UServ_GetAllUsersQuery) QueryInTypeUser()  {}
func (this *UServ_GetAllUsersQuery) QueryOutTypeUser() {}

// Executes the query with parameters retrieved from x
func (this *UServ_GetAllUsersQuery) Execute(x UServ_GetAllUsersIn) *UServ_GetAllUsersIter {
	result := &UServ_GetAllUsersIter{
		result: SpannerResult{},
		tm:     this.opts.MAPPINGS,
		ctx:    this.ctx,
	}

	params, err := func() (map[string]interface{}, error) {
		result := make(map[string]interface{})
		return result, nil
	}()
	if err != nil {
		result.err = err
		return result
	}

	iter := this.db.QueryWithStats(this.ctx, spanner.Statement{
		SQL:    "SELECT id, name, friends, created_on FROM users",
		Params: params,
	})
	result.rows = iter
	return result
}

type UServ_GetAllUsersIter struct {
	result SpannerResult
	rows   *spanner.RowIterator
	err    error
	tm     UServ_TypeMappings
	ctx    context.Context
}

func (this *UServ_GetAllUsersIter) IterOutTypeUser() {}
func (this *UServ_GetAllUsersIter) IterInTypeEmpty() {}

// Each performs 'fun' on each row in the result set.
// Each respects the context passed to it.
// It will stop iteration, and returns this.ctx.Err() if encountered.
func (this *UServ_GetAllUsersIter) Each(fun func(*UServ_GetAllUsersRow) error) error {
	for {
		select {
		// TODO start here. find where each is called, and make sure the iterator is available to use
		case <-this.ctx.Done():
			return this.ctx.Err()
		default:
			// it's calling next on something that can't be nexted
			if row, ok := this.Next(); !ok {
				return nil
			} else if err := fun(row); err != nil {
				return err
			}
		}
	}
}

// One returns the sole row, or ensures an error if there was not one result when this row is converted
func (this *UServ_GetAllUsersIter) One() *UServ_GetAllUsersRow {
	first, hasFirst := this.Next()
	_, hasSecond := this.Next()
	if !hasFirst || hasSecond {
		amount := "none"
		if hasSecond {
			amount = "multiple"
		}
		return &UServ_GetAllUsersRow{err: fmt.Errorf("expected exactly 1 result from query 'GetAllUsers' found %s", amount)}
	}
	return first
}

// Zero returns an error if there were any rows in the result
func (this *UServ_GetAllUsersIter) Zero() error {
	if _, ok := this.Next(); ok {
		return fmt.Errorf("expected exactly 0 results from query 'GetAllUsers'")
	}
	return nil
}

// Next returns the next scanned row out of the database, or (nil, false) if there are no more rows
func (this *UServ_GetAllUsersIter) Next() (*UServ_GetAllUsersRow, bool) {
	if this.rows == nil || this.err == io.EOF {
		return nil, false
	} else if this.err != nil {
		err := this.err
		this.err = io.EOF
		return &UServ_GetAllUsersRow{err: err}, true
	}
	row, err := this.rows.Next()
	if err == iterator.Done {
		// this.err = io.EOF
		return nil, false
	}
	if err != nil {
		return &UServ_GetAllUsersRow{err: err}, true
	}

	var id int64
	if err := row.ColumnByName("id", &id); err != nil {
		return &UServ_GetAllUsersRow{err: fmt.Errorf("cant convert db column id to protobuf go type ")}, true
	}

	var name string
	if err := row.ColumnByName("name", &name); err != nil {
		return &UServ_GetAllUsersRow{err: fmt.Errorf("cant convert db column name to protobuf go type ")}, true
	}

	var tmpFriends []byte
	if err := row.ColumnByName("friends", &tmpFriends); err != nil {
		return &UServ_GetAllUsersRow{err: fmt.Errorf("cant convert db column friends to protobuf go type *Friends")}, true
	}
	var friends = new(Friends)
	if err := proto.Unmarshal(tmpFriends, friends); err != nil {
		// TODO finally found the error dawg. If i had a good debugger this would have been so much easier
		return &UServ_GetAllUsersRow{err: err}, true
	}

	var tmpCreatedOn spanner.GenericColumnValue
	var created_on *timestamp.Timestamp
	if err := row.ColumnByName("created_on", &tmpCreatedOn); err != nil {
		return &UServ_GetAllUsersRow{err: fmt.Errorf("could not convert mapped db column created_on to type *timestamp.Timestamp: %v", err)}, true
	}

	var converted = this.tm.TimestampTimestamp().Empty()
	if err := converted.SpannerScan(&tmpCreatedOn); err != nil {
		return &UServ_GetAllUsersRow{err: fmt.Errorf("could not convert mapped db column created_on to type on User.CreatedOn: %v", err)}, true
	}

	if err := converted.ToProto(&created_on); err != nil {
		return &UServ_GetAllUsersRow{err: fmt.Errorf("could not convert mapped db column created_onto type on User.CreatedOn: %v", err)}, true
	}

	return &UServ_GetAllUsersRow{item: &User{Id: id, Name: name, Friends: friends, CreatedOn: created_on}}, true
}

// Slice returns all rows found in the iterator as a Slice.
func (this *UServ_GetAllUsersIter) Slice() []*UServ_GetAllUsersRow {
	var results []*UServ_GetAllUsersRow
	for {
		if i, ok := this.Next(); ok {
			results = append(results, i)
		} else {
			break
		}
	}
	return results
}

type UServ_GetAllUsersIn interface {
}
type UServ_GetAllUsersOut interface {
	GetId() int64
	GetName() string
	GetFriends() *Friends
	GetCreatedOn() *timestamp.Timestamp
}
type UServ_GetAllUsersRow struct {
	item UServ_GetAllUsersOut
	err  error
}

func newUServ_GetAllUsersRow(item UServ_GetAllUsersOut, err error) *UServ_GetAllUsersRow {
	return &UServ_GetAllUsersRow{item, err}
}

// Unwrap takes an address to a proto.Message as its only parameter
// Unwrap can only set into output protos of that match method return types + the out option on the query itself
func (this *UServ_GetAllUsersRow) Unwrap(pointerToMsg proto.Message) error {
	if this.err != nil {
		return this.err
	}
	if o, ok := (pointerToMsg).(*User); ok {
		if o == nil {
			return fmt.Errorf("must initialize *User before giving to Unwrap()")
		}
		res, _ := this.User()
		_ = res
		o.Id = res.Id
		o.Name = res.Name
		o.Friends = res.Friends
		o.CreatedOn = res.CreatedOn
		return nil
	}
	return nil
}
func (this *UServ_GetAllUsersRow) User() (*User, error) {
	if this.err != nil {
		return nil, this.err
	}
	return &User{
		Id:        this.item.GetId(),
		Name:      this.item.GetName(),
		Friends:   this.item.GetFriends(),
		CreatedOn: this.item.GetCreatedOn(),
	}, nil
}

func (this *UServ_GetAllUsersRow) Proto() (*User, error) {
	if this.err != nil {
		return nil, this.err
	}
	return &User{
		Id:        this.item.GetId(),
		Name:      this.item.GetName(),
		Friends:   this.item.GetFriends(),
		CreatedOn: this.item.GetCreatedOn(),
	}, nil
}

// THIS is the grpc handler
func (this *UServ_Impl) GetAllUsers(req *Empty, stream UServ_GetAllUsersServer) error {
	if err := this.GetAllUsersTx(req, stream); err != nil {
		return gstatus.Errorf(codes.Unknown, "error executing 'get_all_users' query: %v", err)
	}
	return nil
}

func (this *UServ_Impl) GetAllUsersTx(req *Empty, stream UServ_GetAllUsersServer) error {
	query := this.QUERIES.GetAllUsers(stream.Context(), this.DB.Single())
	iter := query.Execute(req)
	return iter.Each(func(row *UServ_GetAllUsersRow) error {
		res, err := row.User()
		if err != nil {
			return err
		}
		return stream.Send(res)
	})
}
