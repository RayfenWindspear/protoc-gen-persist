// This file is generated by protoc-gen-persist
// Source File: examples/spanner/bob_example/bobs.proto
// DO NOT EDIT !
package bob_example

import (
	io "io"

	spanner "cloud.google.com/go/spanner"
	mytime "github.com/tcncloud/protoc-gen-persist/examples/mytime"
	persist_lib "github.com/tcncloud/protoc-gen-persist/examples/spanner/bob_example/persist_lib"
	context "golang.org/x/net/context"
	codes "google.golang.org/grpc/codes"
	gstatus "google.golang.org/grpc/status"
)

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
// In order for your code to work you have to create a file
// in this package with the following content:
//
// type BobsImpl struct {
//	PERSIST *persist_lib.BobsPersistHelper
// }
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// don't eat our spanner import, or complain
var _ = spanner.NewClient

func (s *BobsImpl) DeleteBobs(ctx context.Context, req *Bob) (*Empty, error) {
	var err error
	_ = err

	params := &persist_lib.BobsDeleteBobsInput{}
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
	}

	var res = Empty{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.DeleteBobs(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (s *BobsImpl) PutBobs(stream Bobs_PutBobsServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.PutBobs(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, err.Error())
		}

		params := &persist_lib.BobsPutBobsInput{}
		params.Id = req.Id
		params.Name = req.Name
		if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
			return gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
		}

		feed(params)
	}
	row, err := stop()
	if err != nil {
		return err
	}
	res := NumRows{}
	if row != nil {
		err := func() error {
			var Count int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("count", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Count = local.Int64
				}
				res.Count = Count
			}

			return nil
		}()
		if err != nil {
			return err
		}

	}

	if err := stream.SendAndClose(&res); err != nil {
		return err
	}
	return nil
}

// spanner server streaming GetBobs
func (s *BobsImpl) GetBobs(req *Empty, stream Bobs_GetBobsServer) error {
	var err error
	_ = err

	params := &persist_lib.BobsGetBobsInput{}

	var iterErr error
	_ = iterErr
	err = s.PERSIST.GetBobs(stream.Context(), params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		res := Bob{}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()

		if err := stream.Send(&res); err != nil {
			iterErr = err
			return
		}
	})
	if err != nil {
		return err
	} else if iterErr != nil {
		return iterErr
	}
	return nil
}

// spanner server streaming GetPeopleFromNames
func (s *BobsImpl) GetPeopleFromNames(req *Names, stream Bobs_GetPeopleFromNamesServer) error {
	var err error
	_ = err

	params := &persist_lib.BobsGetPeopleFromNamesInput{}
	params.Names = req.Names

	var iterErr error
	_ = iterErr
	err = s.PERSIST.GetPeopleFromNames(stream.Context(), params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		res := Bob{}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()

		if err := stream.Send(&res); err != nil {
			iterErr = err
			return
		}
	})
	if err != nil {
		return err
	} else if iterErr != nil {
		return iterErr
	}
	return nil
}
