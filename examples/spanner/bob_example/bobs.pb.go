// Code generated by protoc-gen-go.
// source: examples/spanner/bob_example/bobs.proto
// DO NOT EDIT!

/*
Package bob_example is a generated protocol buffer package.

It is generated from these files:
	examples/spanner/bob_example/bobs.proto

It has these top-level messages:
	Bob
	NumRows
	Empty
*/
package bob_example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/tcncloud/protoc-gen-persist/persist"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Bob struct {
	Id        int64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StartTime *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Name      string                      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *Bob) Reset()                    { *m = Bob{} }
func (m *Bob) String() string            { return proto.CompactTextString(m) }
func (*Bob) ProtoMessage()               {}
func (*Bob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Bob) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bob) GetStartTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Bob) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NumRows struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *NumRows) Reset()                    { *m = NumRows{} }
func (m *NumRows) String() string            { return proto.CompactTextString(m) }
func (*NumRows) ProtoMessage()               {}
func (*NumRows) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NumRows) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Bob)(nil), "bob.Bob")
	proto.RegisterType((*NumRows)(nil), "bob.NumRows")
	proto.RegisterType((*Empty)(nil), "bob.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bobs service

type BobsClient interface {
	// Delete all bob events before the time in the end key
	DeleteBobs(ctx context.Context, in *Bob, opts ...grpc.CallOption) (*Empty, error)
	PutBobs(ctx context.Context, opts ...grpc.CallOption) (Bobs_PutBobsClient, error)
	GetBobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Bobs_GetBobsClient, error)
}

type bobsClient struct {
	cc *grpc.ClientConn
}

func NewBobsClient(cc *grpc.ClientConn) BobsClient {
	return &bobsClient{cc}
}

func (c *bobsClient) DeleteBobs(ctx context.Context, in *Bob, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/bob.Bobs/DeleteBobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bobsClient) PutBobs(ctx context.Context, opts ...grpc.CallOption) (Bobs_PutBobsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bobs_serviceDesc.Streams[0], c.cc, "/bob.Bobs/PutBobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &bobsPutBobsClient{stream}
	return x, nil
}

type Bobs_PutBobsClient interface {
	Send(*Bob) error
	CloseAndRecv() (*NumRows, error)
	grpc.ClientStream
}

type bobsPutBobsClient struct {
	grpc.ClientStream
}

func (x *bobsPutBobsClient) Send(m *Bob) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bobsPutBobsClient) CloseAndRecv() (*NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bobsClient) GetBobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Bobs_GetBobsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bobs_serviceDesc.Streams[1], c.cc, "/bob.Bobs/GetBobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &bobsGetBobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bobs_GetBobsClient interface {
	Recv() (*Bob, error)
	grpc.ClientStream
}

type bobsGetBobsClient struct {
	grpc.ClientStream
}

func (x *bobsGetBobsClient) Recv() (*Bob, error) {
	m := new(Bob)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Bobs service

type BobsServer interface {
	// Delete all bob events before the time in the end key
	DeleteBobs(context.Context, *Bob) (*Empty, error)
	PutBobs(Bobs_PutBobsServer) error
	GetBobs(*Empty, Bobs_GetBobsServer) error
}

func RegisterBobsServer(s *grpc.Server, srv BobsServer) {
	s.RegisterService(&_Bobs_serviceDesc, srv)
}

func _Bobs_DeleteBobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BobsServer).DeleteBobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.Bobs/DeleteBobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BobsServer).DeleteBobs(ctx, req.(*Bob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bobs_PutBobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BobsServer).PutBobs(&bobsPutBobsServer{stream})
}

type Bobs_PutBobsServer interface {
	SendAndClose(*NumRows) error
	Recv() (*Bob, error)
	grpc.ServerStream
}

type bobsPutBobsServer struct {
	grpc.ServerStream
}

func (x *bobsPutBobsServer) SendAndClose(m *NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bobsPutBobsServer) Recv() (*Bob, error) {
	m := new(Bob)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bobs_GetBobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BobsServer).GetBobs(m, &bobsGetBobsServer{stream})
}

type Bobs_GetBobsServer interface {
	Send(*Bob) error
	grpc.ServerStream
}

type bobsGetBobsServer struct {
	grpc.ServerStream
}

func (x *bobsGetBobsServer) Send(m *Bob) error {
	return x.ServerStream.SendMsg(m)
}

var _Bobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.Bobs",
	HandlerType: (*BobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteBobs",
			Handler:    _Bobs_DeleteBobs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutBobs",
			Handler:       _Bobs_PutBobs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBobs",
			Handler:       _Bobs_GetBobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "examples/spanner/bob_example/bobs.proto",
}

func init() { proto.RegisterFile("examples/spanner/bob_example/bobs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x51, 0x6b, 0xd3, 0x50,
	0x14, 0x26, 0xe9, 0xb6, 0xba, 0x33, 0x11, 0xb9, 0x28, 0xd6, 0x3c, 0xb8, 0x4b, 0x5e, 0x92, 0x8c,
	0x2e, 0x91, 0x09, 0x82, 0xc8, 0x18, 0xcd, 0x7a, 0x91, 0xb2, 0x9a, 0xce, 0x34, 0xf3, 0x61, 0x0f,
	0xce, 0xdc, 0xe4, 0xae, 0x46, 0x92, 0xdc, 0x90, 0xdc, 0xa0, 0x7d, 0x12, 0x7c, 0xf4, 0xc9, 0xfe,
	0x0f, 0x7f, 0x40, 0x7f, 0x9e, 0xdc, 0xa4, 0xed, 0x8a, 0x88, 0x20, 0xe4, 0xe1, 0xfb, 0x92, 0x73,
	0xce, 0x77, 0xbe, 0x93, 0x0f, 0x0c, 0xf6, 0x35, 0xcc, 0x8a, 0x94, 0x55, 0x4e, 0x55, 0x84, 0x79,
	0xce, 0x4a, 0x87, 0x72, 0x7a, 0xb3, 0x7a, 0x29, 0x71, 0x65, 0x17, 0x25, 0x17, 0x1c, 0x75, 0x28,
	0xa7, 0xda, 0xe3, 0x82, 0x95, 0x55, 0x52, 0x09, 0x87, 0x17, 0x22, 0xe1, 0xf9, 0xea, 0x9b, 0x76,
	0x38, 0xe3, 0x7c, 0x96, 0x32, 0xa7, 0x61, 0xb4, 0xbe, 0x75, 0x44, 0x92, 0xb1, 0x4a, 0x84, 0x59,
	0xd1, 0x16, 0xe8, 0x31, 0x74, 0x5c, 0x4e, 0xd1, 0x03, 0x50, 0x93, 0xb8, 0xa7, 0x60, 0xc5, 0xec,
	0xf8, 0x6a, 0x12, 0xa3, 0x57, 0x00, 0x95, 0x08, 0x4b, 0x71, 0x23, 0xeb, 0x7b, 0x2a, 0x56, 0xcc,
	0x83, 0x13, 0xcd, 0x6e, 0x87, 0xd9, 0xeb, 0x61, 0x76, 0xb0, 0x1e, 0xe6, 0xef, 0x37, 0xd5, 0x92,
	0x23, 0x04, 0x3b, 0x79, 0x98, 0xb1, 0x5e, 0x07, 0x2b, 0xe6, 0xbe, 0xdf, 0x60, 0xfd, 0x10, 0xba,
	0x5e, 0x9d, 0xf9, 0xfc, 0x4b, 0x85, 0x1e, 0xc1, 0x6e, 0xc4, 0xeb, 0x5c, 0xac, 0xc4, 0x5a, 0xa2,
	0x77, 0x61, 0x97, 0x64, 0x85, 0x98, 0x9f, 0xfc, 0xea, 0xc0, 0x8e, 0xcb, 0x69, 0x85, 0x04, 0xc0,
	0x90, 0xa5, 0x4c, 0xb0, 0x86, 0xdd, 0xb3, 0x29, 0xa7, 0xb6, 0xcb, 0xa9, 0x06, 0x0d, 0x6a, 0x8a,
	0xf5, 0xcb, 0xef, 0xcb, 0x85, 0x7a, 0x01, 0xa7, 0x43, 0x32, 0x26, 0x01, 0xc1, 0xc1, 0xc0, 0x1d,
	0x13, 0xd3, 0x90, 0x67, 0x12, 0x21, 0x4d, 0x99, 0x61, 0xe1, 0x69, 0x30, 0xf0, 0x03, 0xd3, 0x70,
	0x39, 0x35, 0x2c, 0x4c, 0xbc, 0x61, 0x0b, 0xfb, 0xf8, 0xcc, 0xc2, 0x17, 0x23, 0x6f, 0x68, 0x9e,
	0x4f, 0x2c, 0xb4, 0xe5, 0x14, 0x7d, 0x83, 0xee, 0x65, 0x2d, 0xfe, 0x90, 0xbc, 0xdf, 0xa0, 0x95,
	0x01, 0xfd, 0x5a, 0x8a, 0x5e, 0xc1, 0xe9, 0xc8, 0x9b, 0x12, 0x3f, 0xc0, 0x23, 0x2f, 0x98, 0xe0,
	0x8d, 0x24, 0x36, 0x93, 0xb8, 0x8f, 0xa5, 0xe7, 0x3e, 0xbe, 0x1b, 0x6b, 0xe1, 0xf7, 0x83, 0xf1,
	0x15, 0x99, 0x62, 0xf3, 0xac, 0x8f, 0xe5, 0x63, 0x21, 0x79, 0xe4, 0xe6, 0x36, 0xdb, 0xf2, 0xa6,
	0x82, 0x06, 0xd0, 0x7d, 0xc3, 0xda, 0x05, 0xb6, 0x9c, 0x6a, 0x9b, 0x65, 0xf4, 0x67, 0x52, 0xfe,
	0x29, 0x3c, 0x99, 0x92, 0x31, 0x39, 0x0f, 0xf0, 0x11, 0xbe, 0x2d, 0x79, 0x76, 0xb7, 0xc0, 0x73,
	0x45, 0xfb, 0xfc, 0x63, 0xb9, 0x50, 0x3f, 0xc2, 0x07, 0xf8, 0xc7, 0x0f, 0x7b, 0x78, 0xa0, 0xef,
	0xbd, 0x9d, 0x4b, 0x7a, 0xf4, 0x72, 0x96, 0x88, 0x4f, 0x35, 0xb5, 0x23, 0x9e, 0x39, 0x22, 0xca,
	0xa3, 0x94, 0xd7, 0x71, 0x9b, 0x97, 0xe8, 0x78, 0xc6, 0xf2, 0xe3, 0x75, 0xb0, 0x36, 0x71, 0xcc,
	0xe6, 0x72, 0xd7, 0x9f, 0xcb, 0x85, 0xaa, 0xb8, 0xef, 0xae, 0x27, 0xff, 0xdb, 0xfe, 0x97, 0x34,
	0xbf, 0xde, 0xc2, 0x74, 0xaf, 0x69, 0x7e, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xbb, 0xcf,
	0xfa, 0x00, 0x03, 0x00, 0x00,
}
