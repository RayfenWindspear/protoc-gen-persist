// Copyright 2017, TCN Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package examples;

option go_package="github.com/tcncloud/protoc-gen-persist/examples/spanner/delete;delete";

import "persist/options.proto";

// This file is to show what kinds of spanner key ranges are generated
// from different types of delete queries.
message Empty { }

service Delete {
  option (persist.service_type) = SPANNER;
  // single primary key deletes (easy)
  rpc DeleteEquals(Empty) returns (Empty){
    option (persist.ql) = {
      query: "DELETE TABLE('mytable') START(1) END(1) KIND(CC)",
      arguments: []
    };
  };
  rpc DeleteGreater(Empty) returns (Empty) {
    option (persist.ql) = {
      query:"DELETE TABLE('mytable') START(1) END() KIND(CO)"
      arguments:[]
    };
  };
  rpc DeleteLess(Empty) returns (Empty) {
    option (persist.ql) = {
      query:"DELETE TABLE('mytable') START('b123b_asdf', 1.1) END(10) KIND(OC)"
      arguments:[]
    };
  };
  // multi primary key deletes (hard)
  rpc DeleteMultiEquals(Empty) returns (Empty) {
    option (persist.ql) = {
      query:"DELETE TABLE('mytable')START(1, 50) END(1, 50) KIND(CC)"
      arguments:[]
    };
  };
}
