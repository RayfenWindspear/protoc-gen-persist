// This file is generated by protoc-gen-persist
// Source File: examples/spanner/basic/basic_example.proto
// DO NOT EDIT !
package basic

import (
	"cloud.google.com/go/spanner"
	mytime "github.com/tcncloud/protoc-gen-persist/examples/mytime"
	persist_lib "github.com/tcncloud/protoc-gen-persist/examples/spanner/basic/persist_lib"
	hooks "github.com/tcncloud/protoc-gen-persist/examples/spanner/hooks"
	test "github.com/tcncloud/protoc-gen-persist/examples/test"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	gstatus "google.golang.org/grpc/status"
)

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
// In order for your code to work you have to create a file
// in this package with the following content:
//
// type MySpannerImpl struct {
//	PERSIST *persist_lib.MySpannerPersistHelper
// }
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

func (s *MySpannerImpl) UniaryInsertWithHooks(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err

	beforeRes, err := hooks.UniaryInsertBeforeHook(req)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	if beforeRes != nil {

		return beforeRes, nil
	}

	params := &persist_lib.MySpannerUniaryInsertWithHooksInput{}
	params.Id = req.Id
	params.Name = req.Name
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
	}

	var res = test.ExampleTable{}
	var iterErr error
	err = s.PERSIST.UniaryInsertWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		if err := row.ColumnByName("id", &Id); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.Id = Id
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				return
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		if err := row.ColumnByName("name", &Name); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.Name = Name
	})
	if err != nil {
		return nil, err
	}

	err = hooks.UniaryInsertAfterHook(req, &res)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}

	return &res, nil
}

func (s *MySpannerImpl) UniarySelectWithHooks(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err

	beforeRes, err := hooks.UniaryInsertBeforeHook(req)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	if beforeRes != nil {

		return beforeRes, nil
	}

	params := &persist_lib.MySpannerUniarySelectWithHooksInput{}
	params.Id = req.Id

	var res = test.ExampleTable{}
	var iterErr error
	err = s.PERSIST.UniarySelectWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		if err := row.ColumnByName("id", &Id); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.Id = Id
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				return
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		if err := row.ColumnByName("name", &Name); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.Name = Name
	})
	if err != nil {
		return nil, err
	}

	err = hooks.UniaryInsertAfterHook(req, &res)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}

	return &res, nil
}
