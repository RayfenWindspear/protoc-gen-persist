// This file is generated by protoc-gen-persist
// Source File: examples/spanner/basic/basic_example.proto
// DO NOT EDIT !
package basic

import (
	sql "database/sql"
	fmt "fmt"
	mytime "github.com/tcncloud/protoc-gen-persist/examples/mytime"
	pb "github.com/tcncloud/protoc-gen-persist/examples/spanner/basic"
	persist_lib "github.com/tcncloud/protoc-gen-persist/examples/spanner/basic/persist_lib"
	test "github.com/tcncloud/protoc-gen-persist/examples/test"
	context "golang.org/x/net/context"
	iterator "google.golang.org/api/iterator"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	io "io"
	strings "strings"
)

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
// In order for your code to work you have to create a file
// in this package with the following content:
//
// type MySpannerImpl struct {
// 	SpannerDB *spanner.Client
//	PERSIST *persist_lib.PersistHelper
// }
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

func (s *MySpannerImpl) UniaryInsert(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {

	params := map[string]interface{}{}

	params["@id"] = req.Id

	params["@name"] = req.Name

	if params["@start_time"], err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
	}

	var res *test.ExampleTable
	var iterErr error
	s.PERSIST.UniaryInsert(ctx, params, func(row map[string]interface{}) {
		var ok bool

		var Id int64
		Id, ok = row["$field.ProtoName"].(int64)
		if !ok {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.Id = Id

		var StartTime *spanner.GenericColumnValue
		StartTime, ok = row["$field.ProtoName"].(*spanner.GenericColumValue)
		if !ok {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.StartTime, err = (mytime.MyTime{}).SpannerScan(StartTime).ToProto()
		if err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
		}

		var Name string
		Name, ok = row["$field.ProtoName"].(string)
		if !ok {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.Name = Name

	})

	return res, nil
}

func (s *MySpannerImpl) UniarySelect(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {

	params := map[string]interface{}{}

	params["@id"] = req.Id

	params["@name"] = req.Name

	if params["@start_time"], err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
	}

	var res *test.ExampleTable
	var iterErr error
	s.PERSIST.UniarySelect(ctx, params, func(row map[string]interface{}) {
		var ok bool

		var Id int64
		Id, ok = row["$field.ProtoName"].(int64)
		if !ok {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.Id = Id

		var StartTime *spanner.GenericColumnValue
		StartTime, ok = row["$field.ProtoName"].(*spanner.GenericColumValue)
		if !ok {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.StartTime, err = (mytime.MyTime{}).SpannerScan(StartTime).ToProto()
		if err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
		}

		var Name string
		Name, ok = row["$field.ProtoName"].(string)
		if !ok {
			iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
		}

		res.Name = Name

	})

	return res, nil
}

func (s *MySpannerImpl) ClientStreamInsert(stream pb.MySpanner_ClientStreamInsertServer) error {

	var err error
	feed, stop := s.PERSIST.ClientStreamInsert(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, err.Error())
		}

		params := map[string]interface{}{}

		params["@id"] = req.Id

		params["@name"] = req.Name

		if params["@start_time"], err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
			return gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
		}

		if err := feed(params); err != nil {
			return err
		}
	}
	row := stop()
	res := test.NumRows{}
	var ok bool

	var Count int64
	Count, ok = row["$field.ProtoName"].(int64)
	if !ok {
		iterErr = gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
	}

	res.Count = Count

	if err := stream.SendAndClose(res); err != nil {
		return err
	}
	return nil
}
