// This file is generated by protoc-gen-persist
// Source File: examples/spanner/basic/basic_example.proto
// DO NOT EDIT !
package basic

import (
	io "io"

	"cloud.google.com/go/spanner"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	mytime "github.com/tcncloud/protoc-gen-persist/examples/mytime"
	persist_lib "github.com/tcncloud/protoc-gen-persist/examples/spanner/basic/persist_lib"
	hooks "github.com/tcncloud/protoc-gen-persist/examples/spanner/hooks"
	test "github.com/tcncloud/protoc-gen-persist/examples/test"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	gstatus "google.golang.org/grpc/status"
)

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
// In order for your code to work you have to create a file
// in this package with the following content:
//
// type MySpannerImpl struct {
//	PERSIST *persist_lib.MySpannerPersistHelper
// }
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

func (s *MySpannerImpl) UniaryInsert(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err

	params := &persist_lib.MySpannerUniaryInsertInput{}
	params.Id = req.Id
	params.Name = req.Name
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
	}

	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniaryInsert(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (s *MySpannerImpl) UniarySelect(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err

	params := &persist_lib.MySpannerUniarySelectInput{}
	params.Id = req.Id
	params.Name = req.Name

	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniarySelect(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (s *MySpannerImpl) TestNest(ctx context.Context, req *Something) (*Something, error) {
	var err error
	_ = err

	params := &persist_lib.MySpannerTestNestInput{}
	params.Thing = req.Thing

	var res = Something{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.TestNest(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Thing *Something_SomethingElse
			if err := row.ColumnByName("thing", Thing); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
			}
			res.Thing = Thing

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (s *MySpannerImpl) TestEverything(ctx context.Context, req *HasTimestamp) (*HasTimestamp, error) {
	var err error
	_ = err

	params := &persist_lib.MySpannerTestEverythingInput{}
	params.Some = req.Some
	params.Somes = req.Somes
	params.Str = req.Str
	params.Strs = req.Strs
	params.Table = req.Table
	params.Tables = req.Tables
	if params.Time, err = (mytime.MyTime{}).ToSpanner(req.Time).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
	}
	params.Times = req.Times

	var res = HasTimestamp{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.TestEverything(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Time *spanner.GenericColumnValue
			if err := row.ColumnByName("time", Time); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(Time); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.Time = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Some *Something
			if err := row.ColumnByName("some", Some); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
			}
			res.Some = Some

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Str string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("str", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Str = local.StringVal
				}
				res.Str = Str
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Table *test.ExampleTable
			if err := row.ColumnByName("table", Table); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
			}
			res.Table = Table

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Strs []string
			{
				local := make([]spanner.NullString, 0)
				if err := row.ColumnByName("strs", &local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				for _, l := range local {
					if l.Valid {
						Strs = append(Strs, l.StringVal)
					}
				}
				res.Strs = Strs
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Tables []*test.ExampleTable
			if err := row.ColumnByName("tables", &Tables); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
			}
			res.Tables = Tables

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Somes []*Something
			if err := row.ColumnByName("somes", &Somes); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
			}
			res.Somes = Somes

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Times []*timestamp.Timestamp
			if err := row.ColumnByName("times", &Times); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
			}
			res.Times = Times

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (s *MySpannerImpl) UniarySelectWithDirectives(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err

	params := &persist_lib.MySpannerUniarySelectWithDirectivesInput{}
	params.Id = req.Id
	params.Name = req.Name

	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniarySelectWithDirectives(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (s *MySpannerImpl) UniaryUpdate(ctx context.Context, req *test.ExampleTable) (*test.PartialTable, error) {
	var err error
	_ = err

	params := &persist_lib.MySpannerUniaryUpdateInput{}
	params.Id = req.Id
	params.Name = req.Name
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
	}

	var res = test.PartialTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniaryUpdate(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (s *MySpannerImpl) UniaryDeleteRange(ctx context.Context, req *test.ExampleTableRange) (*test.ExampleTable, error) {
	var err error
	_ = err

	params := &persist_lib.MySpannerUniaryDeleteRangeInput{}
	params.EndId = req.EndId
	params.StartId = req.StartId

	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniaryDeleteRange(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (s *MySpannerImpl) UniaryDeleteSingle(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err

	params := &persist_lib.MySpannerUniaryDeleteSingleInput{}
	params.Id = req.Id

	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniaryDeleteSingle(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (s *MySpannerImpl) NoArgs(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err

	params := &persist_lib.MySpannerNoArgsInput{}

	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.NoArgs(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// spanner server streaming ServerStream
func (s *MySpannerImpl) ServerStream(req *test.Name, stream MySpanner_ServerStreamServer) error {
	var err error
	_ = err

	params := &persist_lib.MySpannerServerStreamInput{}

	var iterErr error
	_ = iterErr
	err = s.PERSIST.ServerStream(stream.Context(), params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		res := test.ExampleTable{}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()

		if err := stream.Send(&res); err != nil {
			iterErr = err
			return
		}
	})
	if err != nil {
		return err
	} else if iterErr != nil {
		return iterErr
	}
	return nil
}

func (s *MySpannerImpl) ClientStreamInsert(stream MySpanner_ClientStreamInsertServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.ClientStreamInsert(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, err.Error())
		}

		params := &persist_lib.MySpannerClientStreamInsertInput{}
		params.Id = req.Id
		params.Name = req.Name
		if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
			return gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
		}

		feed(params)
	}
	row, err := stop()
	if err != nil {
		return err
	}
	res := test.NumRows{}
	if row != nil {
		err := func() error {
			var Count int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("count", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Count = local.Int64
				}
				res.Count = Count
			}

			return nil
		}()
		if err != nil {
			return err
		}

	}

	if err := stream.SendAndClose(&res); err != nil {
		return err
	}
	return nil
}

func (s *MySpannerImpl) ClientStreamDelete(stream MySpanner_ClientStreamDeleteServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.ClientStreamDelete(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, err.Error())
		}

		params := &persist_lib.MySpannerClientStreamDeleteInput{}
		params.Id = req.Id

		feed(params)
	}
	row, err := stop()
	if err != nil {
		return err
	}
	res := test.NumRows{}
	if row != nil {
		err := func() error {
			var Count int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("count", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Count = local.Int64
				}
				res.Count = Count
			}

			return nil
		}()
		if err != nil {
			return err
		}

	}

	if err := stream.SendAndClose(&res); err != nil {
		return err
	}
	return nil
}

func (s *MySpannerImpl) ClientStreamUpdate(stream MySpanner_ClientStreamUpdateServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.ClientStreamUpdate(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, err.Error())
		}

		params := &persist_lib.MySpannerClientStreamUpdateInput{}
		params.Id = req.Id
		params.Name = req.Name
		if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
			return gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
		}

		feed(params)
	}
	row, err := stop()
	if err != nil {
		return err
	}
	res := test.NumRows{}
	if row != nil {
		err := func() error {
			var Count int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("count", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Count = local.Int64
				}
				res.Count = Count
			}

			return nil
		}()
		if err != nil {
			return err
		}

	}

	if err := stream.SendAndClose(&res); err != nil {
		return err
	}
	return nil
}

func (s *MySpannerImpl) UniaryInsertWithHooks(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err

	beforeRes, err := hooks.UniaryInsertBeforeHook(req)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	if beforeRes != nil {

		return beforeRes, nil
	}

	params := &persist_lib.MySpannerUniaryInsertWithHooksInput{}
	params.Id = req.Id
	params.Name = req.Name
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
	}

	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniaryInsertWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	err = hooks.UniaryInsertAfterHook(req, &res)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}

	return &res, nil
}

func (s *MySpannerImpl) UniarySelectWithHooks(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err

	beforeRes, err := hooks.UniaryInsertBeforeHook(req)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	if beforeRes != nil {

		return beforeRes, nil
	}

	params := &persist_lib.MySpannerUniarySelectWithHooksInput{}
	params.Id = req.Id

	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniarySelectWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	err = hooks.UniaryInsertAfterHook(req, &res)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}

	return &res, nil
}

func (s *MySpannerImpl) UniaryUpdateWithHooks(ctx context.Context, req *test.ExampleTable) (*test.PartialTable, error) {
	var err error
	_ = err

	beforeRes, err := hooks.UniaryUpdateBeforeHook(req)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	if beforeRes != nil {

		return beforeRes, nil
	}

	params := &persist_lib.MySpannerUniaryUpdateWithHooksInput{}
	params.Id = req.Id
	params.Name = req.Name
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type: %v", err)
	}

	var res = test.PartialTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniaryUpdateWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	err = hooks.UniaryUpdateAfterHook(req, &res)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}

	return &res, nil
}

func (s *MySpannerImpl) UniaryDeleteWithHooks(ctx context.Context, req *test.ExampleTableRange) (*test.ExampleTable, error) {
	var err error
	_ = err

	beforeRes, err := hooks.UniaryDeleteBeforeHook(req)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	if beforeRes != nil {

		return beforeRes, nil
	}

	params := &persist_lib.MySpannerUniaryDeleteWithHooksInput{}
	params.EndId = req.EndId
	params.StartId = req.StartId

	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	err = s.PERSIST.UniaryDeleteWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()
	})
	if err != nil {
		return nil, err
	}

	err = hooks.UniaryDeleteAfterHook(req, &res)
	if err != nil {
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}

	return &res, nil
}

// spanner server streaming ServerStreamWithHooks
func (s *MySpannerImpl) ServerStreamWithHooks(req *test.Name, stream MySpanner_ServerStreamWithHooksServer) error {
	var err error
	_ = err

	beforeRes, err := hooks.ServerStreamBeforeHook(req)
	if err != nil {
		return grpc.Errorf(codes.Unknown, err.Error())
	}
	if beforeRes != nil {

		for _, res := range beforeRes {
			err = stream.Send(res)
			if err != nil {
				return err
			}
		}
		return nil
	}

	params := &persist_lib.MySpannerServerStreamWithHooksInput{}

	var iterErr error
	_ = iterErr
	err = s.PERSIST.ServerStreamWithHooks(stream.Context(), params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		res := test.ExampleTable{}
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Id int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("id", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Id = local.Int64
				}
				res.Id = Id
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var StartTime *spanner.GenericColumnValue
			if err := row.ColumnByName("start_time", StartTime); err != nil {
				return gstatus.Errorf(codes.Unknown, "could not convert type %v", err)
			}
			{
				local := &mytime.MyTime{}
				if err := local.SpannerScan(StartTime); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out custom type: %s", err)
				}
				res.StartTime = local.ToProto()
			}

			return nil
		}()
		if iterErr != nil {
			return
		}
		iterErr = func() error {
			var Name string
			{
				local := &spanner.NullString{}
				if err := row.ColumnByName("name", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Name = local.StringVal
				}
				res.Name = Name
			}

			return nil
		}()

		err = hooks.ServerStreamAfterHook(req, &res)
		if err != nil {
			iterErr = grpc.Errorf(codes.Unknown, err.Error())
		}

		if err := stream.Send(&res); err != nil {
			iterErr = err
			return
		}
	})
	if err != nil {
		return err
	} else if iterErr != nil {
		return iterErr
	}
	return nil
}

func (s *MySpannerImpl) ClientStreamUpdateWithHooks(stream MySpanner_ClientStreamUpdateWithHooksServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.ClientStreamUpdateWithHooks(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, err.Error())
		}

		beforeRes, err := hooks.ClientStreamUpdateBeforeHook(req)
		if err != nil {
			return grpc.Errorf(codes.Unknown, err.Error())
		}
		if beforeRes != nil {
			continue

		}

		params := &persist_lib.MySpannerClientStreamUpdateWithHooksInput{}
		params.Id = req.Id
		params.Name = req.Name

		feed(params)
	}
	row, err := stop()
	if err != nil {
		return err
	}
	res := test.NumRows{}
	if row != nil {
		err := func() error {
			var Count int64
			{
				local := &spanner.NullInt64{}
				if err := row.ColumnByName("count", local); err != nil {
					return gstatus.Errorf(codes.Unknown, "could not scan out message type: %s", err)
				}
				if local.Valid {
					Count = local.Int64
				}
				res.Count = Count
			}

			return nil
		}()
		if err != nil {
			return err
		}

	}

	err = hooks.ClientStreamUpdateAfterHook(nil, &res)
	if err != nil {
		return grpc.Errorf(codes.Unknown, err.Error())
	}

	if err := stream.SendAndClose(&res); err != nil {
		return err
	}
	return nil
}
