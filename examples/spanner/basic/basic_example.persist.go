// This file is generated by protoc-gen-persist
// Source File: examples/spanner/basic/basic_example.proto
// DO NOT EDIT !
package basic

import (
	io "io"

	spanner "cloud.google.com/go/spanner"
	"github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	mytime "github.com/tcncloud/protoc-gen-persist/examples/mytime"
	persist_lib "github.com/tcncloud/protoc-gen-persist/examples/spanner/basic/persist_lib"
	hooks "github.com/tcncloud/protoc-gen-persist/examples/spanner/hooks"
	test "github.com/tcncloud/protoc-gen-persist/examples/test"
	context "golang.org/x/net/context"
	codes "google.golang.org/grpc/codes"
	gstatus "google.golang.org/grpc/status"
)

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
// In order for your code to work you have to create a file
// in this package with the following content:
//
// type MySpannerImpl struct {
//	PERSIST *persist_lib.MySpannerPersistHelper
// }
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// don't eat our spanner import, or complain
var _ = spanner.NewClient

func (s *MySpannerImpl) UniaryInsert(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err
	params := &persist_lib.Test_ExampleTableInput{}
	// set 'ExampleTable.start_time' in params
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type to persist_lib type: %v, err", err)
	}
	// set 'ExampleTable.name' in params
	params.Name = req.Name
	// set 'ExampleTable.id' in params
	params.Id = req.Id
	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniaryInsert(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) UniarySelect(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err
	params := &persist_lib.Test_ExampleTableInput{}
	// set 'ExampleTable.id' in params
	params.Id = req.Id
	// set 'ExampleTable.name' in params
	params.Name = req.Name
	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniarySelect(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) TestNest(ctx context.Context, req *Something) (*Something, error) {
	var err error
	_ = err
	params := &persist_lib.SomethingInput{}
	// set 'Something.thing' in params
	{
		raw, err := proto.Marshal(req.Thing)
		if err != nil {
			return nil, gstatus.Errorf(codes.Unknown, "could not convert type to []byte, err: %s", err)
		}
		params.Thing = raw
	}
	var res = Something{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.TestNest(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Thing []byte
		if err := row.ColumnByName("thing", &Thing); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := new(Something_SomethingElse)
			if err := proto.Unmarshal(Thing, local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.Thing = local
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) TestEverything(ctx context.Context, req *HasTimestamp) (*HasTimestamp, error) {
	var err error
	_ = err
	params := &persist_lib.HasTimestampInput{}
	// set 'HasTimestamp.table' in params
	{
		raw, err := proto.Marshal(req.Table)
		if err != nil {
			return nil, gstatus.Errorf(codes.Unknown, "could not convert type to []byte, err: %s", err)
		}
		params.Table = raw
	}
	// set 'HasTimestamp.times' in params
	{
		var bytesOfBytes [][]byte
		for _, msg := range req.Times {
			raw, err := proto.Marshal(msg)
			if err != nil {
				return nil, gstatus.Errorf(codes.Unknown, "could not convert type to [][]byte, err: %s", err)
			}
			bytesOfBytes = append(bytesOfBytes, raw)
		}
		params.Times = bytesOfBytes
	}
	// set 'HasTimestamp.somes' in params
	{
		var bytesOfBytes [][]byte
		for _, msg := range req.Somes {
			raw, err := proto.Marshal(msg)
			if err != nil {
				return nil, gstatus.Errorf(codes.Unknown, "could not convert type to [][]byte, err: %s", err)
			}
			bytesOfBytes = append(bytesOfBytes, raw)
		}
		params.Somes = bytesOfBytes
	}
	// set 'HasTimestamp.strs' in params
	params.Strs = req.Strs
	// set 'HasTimestamp.tables' in params
	{
		var bytesOfBytes [][]byte
		for _, msg := range req.Tables {
			raw, err := proto.Marshal(msg)
			if err != nil {
				return nil, gstatus.Errorf(codes.Unknown, "could not convert type to [][]byte, err: %s", err)
			}
			bytesOfBytes = append(bytesOfBytes, raw)
		}
		params.Tables = bytesOfBytes
	}
	// set 'HasTimestamp.time' in params
	if params.Time, err = (mytime.MyTime{}).ToSpanner(req.Time).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type to persist_lib type: %v, err", err)
	}
	// set 'HasTimestamp.some' in params
	{
		raw, err := proto.Marshal(req.Some)
		if err != nil {
			return nil, gstatus.Errorf(codes.Unknown, "could not convert type to []byte, err: %s", err)
		}
		params.Some = raw
	}
	// set 'HasTimestamp.str' in params
	params.Str = req.Str
	var res = HasTimestamp{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.TestEverything(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Time *spanner.GenericColumnValue
		if err := row.ColumnByName("time", Time); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(Time); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.Time = local.ToProto()
		}
		var Some []byte
		if err := row.ColumnByName("some", &Some); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := new(Something)
			if err := proto.Unmarshal(Some, local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.Some = local
		}
		var Str string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("str", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Str = local.StringVal
			}
			res.Str = Str
		}
		var Table []byte
		if err := row.ColumnByName("table", &Table); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := new(test.ExampleTable)
			if err := proto.Unmarshal(Table, local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.Table = local
		}
		var Strs []string
		{
			local := make([]spanner.NullString, 0)
			if err := row.ColumnByName("strs", &local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			for _, l := range local {
				if l.Valid {
					Strs = append(Strs, l.StringVal)
					res.Strs = Strs
				}
			}
		}
		var Tables [][]byte
		if err := row.ColumnByName("tables", &Tables); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := make([]*test.ExampleTable, len(Tables))
			for i := range local {
				local[i] = new(test.ExampleTable)
				if err := proto.Unmarshal(Tables[i], local[i]); err != nil {
					iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
				}
			}
			res.Tables = local
		}
		var Somes [][]byte
		if err := row.ColumnByName("somes", &Somes); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := make([]*Something, len(Somes))
			for i := range local {
				local[i] = new(Something)
				if err := proto.Unmarshal(Somes[i], local[i]); err != nil {
					iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
				}
			}
			res.Somes = local
		}
		var Times [][]byte
		if err := row.ColumnByName("times", &Times); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := make([]*timestamp.Timestamp, len(Times))
			for i := range local {
				local[i] = new(timestamp.Timestamp)
				if err := proto.Unmarshal(Times[i], local[i]); err != nil {
					iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
				}
			}
			res.Times = local
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) UniarySelectWithDirectives(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err
	params := &persist_lib.Test_ExampleTableInput{}
	// set 'ExampleTable.id' in params
	params.Id = req.Id
	// set 'ExampleTable.name' in params
	params.Name = req.Name
	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniarySelectWithDirectives(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) UniaryUpdate(ctx context.Context, req *test.ExampleTable) (*test.PartialTable, error) {
	var err error
	_ = err
	params := &persist_lib.Test_ExampleTableInput{}
	// set 'ExampleTable.start_time' in params
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type to persist_lib type: %v, err", err)
	}
	// set 'ExampleTable.name' in params
	params.Name = req.Name
	// set 'ExampleTable.id' in params
	params.Id = req.Id
	var res = test.PartialTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniaryUpdate(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) UniaryDeleteRange(ctx context.Context, req *test.ExampleTableRange) (*test.ExampleTable, error) {
	var err error
	_ = err
	params := &persist_lib.Test_ExampleTableRangeInput{}
	// set 'ExampleTableRange.start_id' in params
	params.StartId = req.StartId
	// set 'ExampleTableRange.end_id' in params
	params.EndId = req.EndId
	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniaryDeleteRange(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) UniaryDeleteSingle(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err
	params := &persist_lib.Test_ExampleTableInput{}
	// set 'ExampleTable.id' in params
	params.Id = req.Id
	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniaryDeleteSingle(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) NoArgs(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err
	params := &persist_lib.Test_ExampleTableInput{}
	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.NoArgs(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) ServerStream(req *test.Name, stream MySpanner_ServerStreamServer) error {
	var err error
	_ = err
	params := &persist_lib.Test_NameInput{}
	var iterErr error
	err = s.PERSIST.ServerStream(stream.Context(), params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		res := test.ExampleTable{}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
		if err := stream.Send(&res); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
	})
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error during iteration: %v", err)
	} else if iterErr != nil {
		return iterErr
	}
	return nil
}

func (s *MySpannerImpl) ClientStreamInsert(stream MySpanner_ClientStreamInsertServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.ClientStreamInsert(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, "error recieving input: %v", err)
		}
		params := &persist_lib.Test_ExampleTableInput{}
		// set 'ExampleTable.id' in params
		params.Id = req.Id
		// set 'ExampleTable.start_time' in params
		if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
			return gstatus.Errorf(codes.Unknown, "could not convert type to persist_lib type: %v, err", err)
		}
		// set 'ExampleTable.name' in params
		params.Name = req.Name
		feed(params)
	}
	row, err := stop()
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error receiving result row: %v", err)
	}
	res := test.NumRows{}
	if row != nil {
		var Count int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("count", local); err != nil {
				return gstatus.Errorf(codes.Unknown, "couldnt scan out message, err: %v", err)
			}
			if local.Valid {
				Count = local.Int64
			}
			res.Count = Count
		}
	}
	if err := stream.SendAndClose(&res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error sending response: %v", err)
	}
	return nil
}

func (s *MySpannerImpl) ClientStreamDelete(stream MySpanner_ClientStreamDeleteServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.ClientStreamDelete(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, "error recieving input: %v", err)
		}
		params := &persist_lib.Test_ExampleTableInput{}
		// set 'ExampleTable.id' in params
		params.Id = req.Id
		feed(params)
	}
	row, err := stop()
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error receiving result row: %v", err)
	}
	res := test.NumRows{}
	if row != nil {
		var Count int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("count", local); err != nil {
				return gstatus.Errorf(codes.Unknown, "couldnt scan out message, err: %v", err)
			}
			if local.Valid {
				Count = local.Int64
			}
			res.Count = Count
		}
	}
	if err := stream.SendAndClose(&res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error sending response: %v", err)
	}
	return nil
}

func (s *MySpannerImpl) ClientStreamUpdate(stream MySpanner_ClientStreamUpdateServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.ClientStreamUpdate(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, "error recieving input: %v", err)
		}
		params := &persist_lib.Test_ExampleTableInput{}
		// set 'ExampleTable.name' in params
		params.Name = req.Name
		// set 'ExampleTable.id' in params
		params.Id = req.Id
		// set 'ExampleTable.start_time' in params
		if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
			return gstatus.Errorf(codes.Unknown, "could not convert type to persist_lib type: %v, err", err)
		}
		feed(params)
	}
	row, err := stop()
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error receiving result row: %v", err)
	}
	res := test.NumRows{}
	if row != nil {
		var Count int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("count", local); err != nil {
				return gstatus.Errorf(codes.Unknown, "couldnt scan out message, err: %v", err)
			}
			if local.Valid {
				Count = local.Int64
			}
			res.Count = Count
		}
	}
	if err := stream.SendAndClose(&res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error sending response: %v", err)
	}
	return nil
}

func (s *MySpannerImpl) UniaryInsertWithHooks(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err
	beforeRes, err := hooks.UniaryInsertBeforeHook(req)
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
	} else if beforeRes != nil {
		return beforeRes, nil
	}
	params := &persist_lib.Test_ExampleTableInput{}
	// set 'ExampleTable.id' in params
	params.Id = req.Id
	// set 'ExampleTable.start_time' in params
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type to persist_lib type: %v, err", err)
	}
	// set 'ExampleTable.name' in params
	params.Name = req.Name
	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniaryInsertWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	if err := hooks.UniaryInsertAfterHook(req, &res); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) UniarySelectWithHooks(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	var err error
	_ = err
	beforeRes, err := hooks.UniaryInsertBeforeHook(req)
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
	} else if beforeRes != nil {
		return beforeRes, nil
	}
	params := &persist_lib.Test_ExampleTableInput{}
	// set 'ExampleTable.id' in params
	params.Id = req.Id
	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniarySelectWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	if err := hooks.UniaryInsertAfterHook(req, &res); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) UniaryUpdateWithHooks(ctx context.Context, req *test.ExampleTable) (*test.PartialTable, error) {
	var err error
	_ = err
	beforeRes, err := hooks.UniaryUpdateBeforeHook(req)
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
	} else if beforeRes != nil {
		return beforeRes, nil
	}
	params := &persist_lib.Test_ExampleTableInput{}
	// set 'ExampleTable.start_time' in params
	if params.StartTime, err = (mytime.MyTime{}).ToSpanner(req.StartTime).SpannerValue(); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "could not convert type to persist_lib type: %v, err", err)
	}
	// set 'ExampleTable.name' in params
	params.Name = req.Name
	// set 'ExampleTable.id' in params
	params.Id = req.Id
	var res = test.PartialTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniaryUpdateWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	if err := hooks.UniaryUpdateAfterHook(req, &res); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) UniaryDeleteWithHooks(ctx context.Context, req *test.ExampleTableRange) (*test.ExampleTable, error) {
	var err error
	_ = err
	beforeRes, err := hooks.UniaryDeleteBeforeHook(req)
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
	} else if beforeRes != nil {
		return beforeRes, nil
	}
	params := &persist_lib.Test_ExampleTableRangeInput{}
	// set 'ExampleTableRange.start_id' in params
	params.StartId = req.StartId
	// set 'ExampleTableRange.end_id' in params
	params.EndId = req.EndId
	var res = test.ExampleTable{}
	var iterErr error
	_ = iterErr
	_ = res
	err = s.PERSIST.UniaryDeleteWithHooks(ctx, params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in closure: %v", err)
	}
	if err := hooks.UniaryDeleteAfterHook(req, &res); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
	}
	return &res, nil
}

func (s *MySpannerImpl) ServerStreamWithHooks(req *test.Name, stream MySpanner_ServerStreamWithHooksServer) error {
	var err error
	_ = err
	beforeRes, err := hooks.ServerStreamBeforeHook(req)
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
	} else if beforeRes != nil {
		for _, res := range beforeRes {
			if err := stream.Send(res); err != nil {
				return gstatus.Errorf(codes.Unknown, "error sending back before hook result: %v", err)
			}
		}
	}
	params := &persist_lib.Test_NameInput{}
	var iterErr error
	err = s.PERSIST.ServerStreamWithHooks(stream.Context(), params, func(row *spanner.Row) {
		if row == nil { // there was no return data
			return
		}
		res := test.ExampleTable{}
		var Id int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("id", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Id = local.Int64
			}
			res.Id = Id
		}
		var StartTime *spanner.GenericColumnValue
		if err := row.ColumnByName("start_time", StartTime); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
		{
			local := &mytime.MyTime{}
			if err := local.SpannerScan(StartTime); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			res.StartTime = local.ToProto()
		}
		var Name string
		{
			local := &spanner.NullString{}
			if err := row.ColumnByName("name", local); err != nil {
				iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
			}
			if local.Valid {
				Name = local.StringVal
			}
			res.Name = Name
		}
		if err := hooks.ServerStreamAfterHook(req, &res); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
			return
		}
		if err := stream.Send(&res); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "couldnt scan out message err: %v", err)
		}
	})
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error during iteration: %v", err)
	} else if iterErr != nil {
		return iterErr
	}
	return nil
}

func (s *MySpannerImpl) ClientStreamUpdateWithHooks(stream MySpanner_ClientStreamUpdateWithHooksServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.ClientStreamUpdateWithHooks(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, "error recieving input: %v", err)
		}
		beforeRes, err := hooks.ClientStreamUpdateBeforeHook(req)
		if err != nil {
			return gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
		} else if beforeRes != nil {
			continue
		}
		params := &persist_lib.Test_ExampleTableInput{}
		// set 'ExampleTable.id' in params
		params.Id = req.Id
		// set 'ExampleTable.name' in params
		params.Name = req.Name
		feed(params)
	}
	row, err := stop()
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error receiving result row: %v", err)
	}
	res := test.NumRows{}
	if row != nil {
		var Count int64
		{
			local := &spanner.NullInt64{}
			if err := row.ColumnByName("count", local); err != nil {
				return gstatus.Errorf(codes.Unknown, "couldnt scan out message, err: %v", err)
			}
			if local.Valid {
				Count = local.Int64
			}
			res.Count = Count
		}
	}
	// NOTE: I dont want to store your requests in memory
	// So the after hook is called with an empty request
	req := &test.ExampleTable{}
	if err := hooks.ClientStreamUpdateAfterHook(req, &res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
	}
	if err := stream.SendAndClose(&res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error sending response: %v", err)
	}
	return nil
}
