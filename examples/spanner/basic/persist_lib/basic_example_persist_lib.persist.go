// This file is generated by protoc-gen-persist

// Source File: examples/spanner/basic/basic_example.proto
// DO NOT EDIT

package persist_lib

import (
	"cloud.google.com/go/spanner"
	"golang.org/x/net/context"
)

type MySpannerPersistHelper struct {
	Handlers MySpannerHandlers
}

type MySpannerHandlers interface {
	GetUniaryUpdateHandler() func(context.Context, *MySpannerUniaryUpdateInput, func(*spanner.Row)) error
	GetUniaryDeleteRangeHandler() func(context.Context, *MySpannerUniaryDeleteRangeInput, func(*spanner.Row)) error
	GetUniaryDeleteSingleHandler() func(context.Context, *MySpannerUniaryDeleteSingleInput, func(*spanner.Row)) error
}

func (p *MySpannerPersistHelper) UniaryUpdate(ctx context.Context, params *MySpannerUniaryUpdateInput, fn func(row *spanner.Row)) error {
	return p.Handlers.GetUniaryUpdateHandler()(ctx, params, fn)
}

func (p *MySpannerPersistHelper) UniaryDeleteRange(ctx context.Context, params *MySpannerUniaryDeleteRangeInput, fn func(row *spanner.Row)) error {
	return p.Handlers.GetUniaryDeleteRangeHandler()(ctx, params, fn)
}

func (p *MySpannerPersistHelper) UniaryDeleteSingle(ctx context.Context, params *MySpannerUniaryDeleteSingleInput, fn func(row *spanner.Row)) error {
	return p.Handlers.GetUniaryDeleteSingleHandler()(ctx, params, fn)
}

// input type definitions

type MySpannerUniaryUpdateInput struct {
	Id        int64
	Name      string
	StartTime interface{}
}

type MySpannerUniaryDeleteRangeInput struct {
	EndId   int64
	StartId int64
}

type MySpannerUniaryDeleteSingleInput struct {
	Id int64
}

func ExampleTableForUniaryUpdate(req *MySpannerUniaryUpdateInput) *spanner.Mutation {
	return spanner.UpdateMap("example_table", map[string]interface{}{
		"start_time": req.StartTime,
		"name":       "oranges",
		"id":         req.Id,
	})
}

func ExampleTableRangeForUniaryDeleteRange(req *MySpannerUniaryDeleteRangeInput) *spanner.Mutation {
	return spanner.Delete("example_table", spanner.KeyRange{
		Start: spanner.Key{
			req.StartId,
		},
		End: spanner.Key{
			req.EndId,
		},
		Kind: spanner.ClosedOpen,
	})
}

func ExampleTableForUniaryDeleteSingle(req *MySpannerUniaryDeleteSingleInput) *spanner.Mutation {
	return spanner.Delete("example_table", spanner.Key{
		"abc",
		123,
		req.Id,
	})
}

// Default method implementations

func DefaultUniaryUpdateHandler(cli *spanner.Client) func(context.Context, *MySpannerUniaryUpdateInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *MySpannerUniaryUpdateInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableForUniaryUpdate(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result

		return nil
	}
}

func DefaultUniaryDeleteRangeHandler(cli *spanner.Client) func(context.Context, *MySpannerUniaryDeleteRangeInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *MySpannerUniaryDeleteRangeInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableRangeForUniaryDeleteRange(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result

		return nil
	}
}

func DefaultUniaryDeleteSingleHandler(cli *spanner.Client) func(context.Context, *MySpannerUniaryDeleteSingleInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *MySpannerUniaryDeleteSingleInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableForUniaryDeleteSingle(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result

		return nil
	}
}
