// This file is generated by protoc-gen-persist
// Source File: examples/spanner/basic/basic_example.proto
// DO NOT EDIT
package persist_lib

import (
	"cloud.google.com/go/spanner"
	"golang.org/x/net/context"
)

type MySpannerPersistHelper struct {
	Handlers MySpannerHandlers
}
type MySpannerHandlers struct {
	UniaryInsertHandler                func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error
	UniarySelectHandler                func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error
	TestNestHandler                    func(context.Context, *SomethingInput, func(*spanner.Row)) error
	TestEverythingHandler              func(context.Context, *HasTimestampInput, func(*spanner.Row)) error
	UniarySelectWithDirectivesHandler  func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error
	UniaryUpdateHandler                func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error
	UniaryDeleteRangeHandler           func(context.Context, *Test_ExampleTableRangeInput, func(*spanner.Row)) error
	UniaryDeleteSingleHandler          func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error
	NoArgsHandler                      func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error
	ServerStreamHandler                func(context.Context, *Test_NameInput, func(*spanner.Row)) error
	ClientStreamInsertHandler          func(context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error))
	ClientStreamDeleteHandler          func(context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error))
	ClientStreamUpdateHandler          func(context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error))
	UniaryInsertWithHooksHandler       func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error
	UniarySelectWithHooksHandler       func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error
	UniaryUpdateWithHooksHandler       func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error
	UniaryDeleteWithHooksHandler       func(context.Context, *Test_ExampleTableRangeInput, func(*spanner.Row)) error
	ServerStreamWithHooksHandler       func(context.Context, *Test_NameInput, func(*spanner.Row)) error
	ClientStreamUpdateWithHooksHandler func(context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error))
}

// handler implementation
// next must be called on each result row
func (p *MySpannerPersistHelper) UniaryInsert(ctx context.Context, params *Test_ExampleTableInput, next func(*spanner.Row)) error {
	return p.Handlers.UniaryInsertHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) UniarySelect(ctx context.Context, params *Test_ExampleTableInput, next func(*spanner.Row)) error {
	return p.Handlers.UniarySelectHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) TestNest(ctx context.Context, params *SomethingInput, next func(*spanner.Row)) error {
	return p.Handlers.TestNestHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) TestEverything(ctx context.Context, params *HasTimestampInput, next func(*spanner.Row)) error {
	return p.Handlers.TestEverythingHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) UniarySelectWithDirectives(ctx context.Context, params *Test_ExampleTableInput, next func(*spanner.Row)) error {
	return p.Handlers.UniarySelectWithDirectivesHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) UniaryUpdate(ctx context.Context, params *Test_ExampleTableInput, next func(*spanner.Row)) error {
	return p.Handlers.UniaryUpdateHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) UniaryDeleteRange(ctx context.Context, params *Test_ExampleTableRangeInput, next func(*spanner.Row)) error {
	return p.Handlers.UniaryDeleteRangeHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) UniaryDeleteSingle(ctx context.Context, params *Test_ExampleTableInput, next func(*spanner.Row)) error {
	return p.Handlers.UniaryDeleteSingleHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) NoArgs(ctx context.Context, params *Test_ExampleTableInput, next func(*spanner.Row)) error {
	return p.Handlers.NoArgsHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) ServerStream(ctx context.Context, params *Test_NameInput, next func(*spanner.Row)) error {
	return p.Handlers.ServerStreamHandler(ctx, params, next)
}

// given a context, returns two functions.  (feed, stop)
// feed will be called once for every row recieved by the handler
// stop will be called when the client is done streaming. it expects
//a  *spanner.Row to be returned, or nil.
func (p *MySpannerPersistHelper) ClientStreamInsert(ctx context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
	return p.Handlers.ClientStreamInsertHandler(ctx)
}

// given a context, returns two functions.  (feed, stop)
// feed will be called once for every row recieved by the handler
// stop will be called when the client is done streaming. it expects
//a  *spanner.Row to be returned, or nil.
func (p *MySpannerPersistHelper) ClientStreamDelete(ctx context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
	return p.Handlers.ClientStreamDeleteHandler(ctx)
}

// given a context, returns two functions.  (feed, stop)
// feed will be called once for every row recieved by the handler
// stop will be called when the client is done streaming. it expects
//a  *spanner.Row to be returned, or nil.
func (p *MySpannerPersistHelper) ClientStreamUpdate(ctx context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
	return p.Handlers.ClientStreamUpdateHandler(ctx)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) UniaryInsertWithHooks(ctx context.Context, params *Test_ExampleTableInput, next func(*spanner.Row)) error {
	return p.Handlers.UniaryInsertWithHooksHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) UniarySelectWithHooks(ctx context.Context, params *Test_ExampleTableInput, next func(*spanner.Row)) error {
	return p.Handlers.UniarySelectWithHooksHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) UniaryUpdateWithHooks(ctx context.Context, params *Test_ExampleTableInput, next func(*spanner.Row)) error {
	return p.Handlers.UniaryUpdateWithHooksHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) UniaryDeleteWithHooks(ctx context.Context, params *Test_ExampleTableRangeInput, next func(*spanner.Row)) error {
	return p.Handlers.UniaryDeleteWithHooksHandler(ctx, params, next)
}

// next must be called on each result row
func (p *MySpannerPersistHelper) ServerStreamWithHooks(ctx context.Context, params *Test_NameInput, next func(*spanner.Row)) error {
	return p.Handlers.ServerStreamWithHooksHandler(ctx, params, next)
}

// given a context, returns two functions.  (feed, stop)
// feed will be called once for every row recieved by the handler
// stop will be called when the client is done streaming. it expects
//a  *spanner.Row to be returned, or nil.
func (p *MySpannerPersistHelper) ClientStreamUpdateWithHooks(ctx context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
	return p.Handlers.ClientStreamUpdateWithHooksHandler(ctx)
}

// input type definitions
type Test_ExampleTableInput struct {
	Id        int64
	StartTime interface{}
	Name      string
}
type SomethingInput struct {
	Thing []byte
}
type HasTimestampInput struct {
	Time   interface{}
	Some   []byte
	Str    string
	Table  []byte
	Strs   []string
	Tables [][]byte
	Somes  [][]byte
	Times  [][]byte
}
type Test_ExampleTableRangeInput struct {
	StartId int64
	EndId   int64
}
type Test_NameInput struct {
	Name string
}

// all our queries represented as spanner functions or mutations
func ExampleTableFromUniaryInsertQuery(req *Test_ExampleTableInput) *spanner.Mutation {
	return spanner.InsertMap("example_table", map[string]interface{}{
		"id":         req.Id,
		"start_time": req.StartTime,
		"name":       "bananas",
	})
}
func ExampleTableFromUniarySelectQuery(req *Test_ExampleTableInput) spanner.Statement {
	return spanner.Statement{
		SQL: "SELECT * from example_table Where id=@id AND name=@name",
		Params: map[string]interface{}{
			"@id":   req.Id,
			"@name": req.Name,
		},
	}
}
func SomethingFromTestNestQuery(req *SomethingInput) spanner.Statement {
	return spanner.Statement{
		SQL: "SELECT * from example_table Where id=@thing",
		Params: map[string]interface{}{
			"@thing": req.Thing,
		},
	}
}
func HasTimestampFromTestEverythingQuery(req *HasTimestampInput) spanner.Statement {
	return spanner.Statement{
		SQL: "SELECT * from example_table Where id=@time AND some=@some AND str=@str AND table=@table AND times = @times AND somes = @somes AND strs = @strs AND tables = @tables",
		Params: map[string]interface{}{
			"@time":   req.Time,
			"@some":   req.Some,
			"@str":    req.Str,
			"@table":  req.Table,
			"@times":  req.Times,
			"@somes":  req.Somes,
			"@strs":   req.Strs,
			"@tables": req.Tables,
		},
	}
}
func ExampleTableFromUniarySelectWithDirectivesQuery(req *Test_ExampleTableInput) spanner.Statement {
	return spanner.Statement{
		SQL: "SELECT * from example_table@{FORCE_INDEX=index} Where id=@id AND name=@name",
		Params: map[string]interface{}{
			"@id":   req.Id,
			"@name": req.Name,
		},
	}
}
func ExampleTableFromUniaryUpdateQuery(req *Test_ExampleTableInput) *spanner.Mutation {
	return spanner.UpdateMap("example_table", map[string]interface{}{
		"start_time": req.StartTime,
		"name":       "oranges",
		"id":         req.Id,
	})
}
func ExampleTableRangeFromUniaryDeleteRangeQuery(req *Test_ExampleTableRangeInput) *spanner.Mutation {
	return spanner.Delete("example_table", spanner.KeyRange{
		Start: spanner.Key{
			req.StartId,
		},
		End: spanner.Key{
			req.EndId,
		},
		Kind: spanner.ClosedOpen,
	})
}
func ExampleTableFromUniaryDeleteSingleQuery(req *Test_ExampleTableInput) *spanner.Mutation {
	return spanner.Delete("example_table", spanner.Key{
		"abc",
		123,
		req.Id,
	})
}
func ExampleTableFromNoArgsQuery(req *Test_ExampleTableInput) spanner.Statement {
	return spanner.Statement{
		SQL:    "select * from example_table limit 1",
		Params: map[string]interface{}{},
	}
}
func NameFromServerStreamQuery(req *Test_NameInput) spanner.Statement {
	return spanner.Statement{
		SQL:    "SELECT * FROM example_table",
		Params: map[string]interface{}{},
	}
}
func ExampleTableFromClientStreamInsertQuery(req *Test_ExampleTableInput) *spanner.Mutation {
	return spanner.InsertMap("example_table", map[string]interface{}{
		"name":       3,
		"id":         req.Id,
		"start_time": req.StartTime,
	})
}
func ExampleTableFromClientStreamDeleteQuery(req *Test_ExampleTableInput) *spanner.Mutation {
	return spanner.Delete("example_table", spanner.Key{
		req.Id,
	})
}
func ExampleTableFromClientStreamUpdateQuery(req *Test_ExampleTableInput) *spanner.Mutation {
	return spanner.UpdateMap("example_table", map[string]interface{}{
		"start_time": req.StartTime,
		"name":       req.Name,
		"id":         req.Id,
	})
}
func ExampleTableFromUniaryInsertWithHooksQuery(req *Test_ExampleTableInput) *spanner.Mutation {
	return spanner.InsertMap("example_table", map[string]interface{}{
		"id":         req.Id,
		"start_time": req.StartTime,
		"name":       "bananas",
	})
}
func ExampleTableFromUniarySelectWithHooksQuery(req *Test_ExampleTableInput) spanner.Statement {
	return spanner.Statement{
		SQL: "SELECT * from example_table Where id=@id",
		Params: map[string]interface{}{
			"@id": req.Id,
		},
	}
}
func ExampleTableFromUniaryUpdateWithHooksQuery(req *Test_ExampleTableInput) *spanner.Mutation {
	return spanner.UpdateMap("example_table", map[string]interface{}{
		"start_time": req.StartTime,
		"name":       "oranges",
		"id":         req.Id,
	})
}
func ExampleTableRangeFromUniaryDeleteWithHooksQuery(req *Test_ExampleTableRangeInput) *spanner.Mutation {
	return spanner.Delete("example_table", spanner.KeyRange{
		Start: spanner.Key{
			req.StartId,
		},
		End: spanner.Key{
			req.EndId,
		},
		Kind: spanner.ClosedOpen,
	})
}
func NameFromServerStreamWithHooksQuery(req *Test_NameInput) spanner.Statement {
	return spanner.Statement{
		SQL:    "SELECT * FROM example_table",
		Params: map[string]interface{}{},
	}
}
func ExampleTableFromClientStreamUpdateWithHooksQuery(req *Test_ExampleTableInput) *spanner.Mutation {
	return spanner.UpdateMap("example_table", map[string]interface{}{
		"name": "asdf",
		"id":   req.Id,
	})
}

// Default method implementations
func DefaultUniaryInsertHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableFromUniaryInsertQuery(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result
		return nil
	}
}
func DefaultUniarySelectHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableInput, next func(*spanner.Row)) error {
		iter := cli.Single().Query(ctx, ExampleTableFromUniarySelectQuery(req))
		if err := iter.Do(func(r *spanner.Row) error {
			next(r)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}
}
func DefaultTestNestHandler(cli *spanner.Client) func(context.Context, *SomethingInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *SomethingInput, next func(*spanner.Row)) error {
		iter := cli.Single().Query(ctx, SomethingFromTestNestQuery(req))
		if err := iter.Do(func(r *spanner.Row) error {
			next(r)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}
}
func DefaultTestEverythingHandler(cli *spanner.Client) func(context.Context, *HasTimestampInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *HasTimestampInput, next func(*spanner.Row)) error {
		iter := cli.Single().Query(ctx, HasTimestampFromTestEverythingQuery(req))
		if err := iter.Do(func(r *spanner.Row) error {
			next(r)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}
}
func DefaultUniarySelectWithDirectivesHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableInput, next func(*spanner.Row)) error {
		iter := cli.Single().Query(ctx, ExampleTableFromUniarySelectWithDirectivesQuery(req))
		if err := iter.Do(func(r *spanner.Row) error {
			next(r)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}
}
func DefaultUniaryUpdateHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableFromUniaryUpdateQuery(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result
		return nil
	}
}
func DefaultUniaryDeleteRangeHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableRangeInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableRangeInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableRangeFromUniaryDeleteRangeQuery(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result
		return nil
	}
}
func DefaultUniaryDeleteSingleHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableFromUniaryDeleteSingleQuery(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result
		return nil
	}
}
func DefaultNoArgsHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableInput, next func(*spanner.Row)) error {
		iter := cli.Single().Query(ctx, ExampleTableFromNoArgsQuery(req))
		if err := iter.Do(func(r *spanner.Row) error {
			next(r)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}
}
func DefaultServerStreamHandler(cli *spanner.Client) func(context.Context, *Test_NameInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_NameInput, next func(*spanner.Row)) error {
		iter := cli.Single().Query(ctx, NameFromServerStreamQuery(req))
		if err := iter.Do(func(r *spanner.Row) error {
			next(r)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}
}
func DefaultClientStreamInsertHandler(cli *spanner.Client) func(context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
	return func(ctx context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
		var muts []*spanner.Mutation
		feed := func(req *Test_ExampleTableInput) {
			muts = append(muts, ExampleTableFromClientStreamInsertQuery(req))
		}
		done := func() (*spanner.Row, error) {
			if _, err := cli.Apply(ctx, muts); err != nil {
				return nil, err
			}
			return nil, nil // we dont have a row, because we are an apply
		}
		return feed, done
	}
}
func DefaultClientStreamDeleteHandler(cli *spanner.Client) func(context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
	return func(ctx context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
		var muts []*spanner.Mutation
		feed := func(req *Test_ExampleTableInput) {
			muts = append(muts, ExampleTableFromClientStreamDeleteQuery(req))
		}
		done := func() (*spanner.Row, error) {
			if _, err := cli.Apply(ctx, muts); err != nil {
				return nil, err
			}
			return nil, nil // we dont have a row, because we are an apply
		}
		return feed, done
	}
}
func DefaultClientStreamUpdateHandler(cli *spanner.Client) func(context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
	return func(ctx context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
		var muts []*spanner.Mutation
		feed := func(req *Test_ExampleTableInput) {
			muts = append(muts, ExampleTableFromClientStreamUpdateQuery(req))
		}
		done := func() (*spanner.Row, error) {
			if _, err := cli.Apply(ctx, muts); err != nil {
				return nil, err
			}
			return nil, nil // we dont have a row, because we are an apply
		}
		return feed, done
	}
}
func DefaultUniaryInsertWithHooksHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableFromUniaryInsertWithHooksQuery(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result
		return nil
	}
}
func DefaultUniarySelectWithHooksHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableInput, next func(*spanner.Row)) error {
		iter := cli.Single().Query(ctx, ExampleTableFromUniarySelectWithHooksQuery(req))
		if err := iter.Do(func(r *spanner.Row) error {
			next(r)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}
}
func DefaultUniaryUpdateWithHooksHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableFromUniaryUpdateWithHooksQuery(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result
		return nil
	}
}
func DefaultUniaryDeleteWithHooksHandler(cli *spanner.Client) func(context.Context, *Test_ExampleTableRangeInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_ExampleTableRangeInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableRangeFromUniaryDeleteWithHooksQuery(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result
		return nil
	}
}
func DefaultServerStreamWithHooksHandler(cli *spanner.Client) func(context.Context, *Test_NameInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *Test_NameInput, next func(*spanner.Row)) error {
		iter := cli.Single().Query(ctx, NameFromServerStreamWithHooksQuery(req))
		if err := iter.Do(func(r *spanner.Row) error {
			next(r)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}
}
func DefaultClientStreamUpdateWithHooksHandler(cli *spanner.Client) func(context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
	return func(ctx context.Context) (func(*Test_ExampleTableInput), func() (*spanner.Row, error)) {
		var muts []*spanner.Mutation
		feed := func(req *Test_ExampleTableInput) {
			muts = append(muts, ExampleTableFromClientStreamUpdateWithHooksQuery(req))
		}
		done := func() (*spanner.Row, error) {
			if _, err := cli.Apply(ctx, muts); err != nil {
				return nil, err
			}
			return nil, nil // we dont have a row, because we are an apply
		}
		return feed, done
	}
}
