// This file is generated by protoc-gen-persist

// Source File: examples/spanner/basic/basic_example.proto
// DO NOT EDIT

package persist_lib

import (
	"cloud.google.com/go/spanner"
	"golang.org/x/net/context"
)

type MySpannerPersistHelper struct {
	Handlers MySpannerHandlers
}

type MySpannerHandlers interface {
	GetUniaryInsertWithHooksHandler() func(context.Context, *MySpannerUniaryInsertWithHooksInput, func(*spanner.Row)) error
	GetUniarySelectWithHooksHandler() func(context.Context, *MySpannerUniarySelectWithHooksInput, func(*spanner.Row)) error
}

func (p *MySpannerPersistHelper) UniaryInsertWithHooks(ctx context.Context, params *MySpannerUniaryInsertWithHooksInput, fn func(row *spanner.Row)) error {
	return p.Handlers.GetUniaryInsertWithHooksHandler()(ctx, params, fn)
}

func (p *MySpannerPersistHelper) UniarySelectWithHooks(ctx context.Context, params *MySpannerUniarySelectWithHooksInput, fn func(row *spanner.Row)) error {
	return p.Handlers.GetUniarySelectWithHooksHandler()(ctx, params, fn)
}

// input type definitions

type MySpannerUniaryInsertWithHooksInput struct {
	Id        int64
	Name      string
	StartTime interface{}
}

type MySpannerUniarySelectWithHooksInput struct {
	Id int64
}

func ExampleTableForUniaryInsertWithHooks(req *MySpannerUniaryInsertWithHooksInput) *spanner.Mutation {
	return spanner.InsertMap("example_table", map[string]interface{}{
		"id":         req.Id,
		"start_time": req.StartTime,
		"name":       "bananas",
	})
}

func ExampleTableForUniarySelectWithHooks(req *MySpannerUniarySelectWithHooksInput) spanner.Statement {
	return spanner.Statement{
		SQL: "SELECT * from example_table Where id=@id",
		Params: map[string]interface{}{
			"@id": req.Id,
		},
	}
}

// Default method implementations

func DefaultUniaryInsertWithHooksHandler(cli *spanner.Client) func(context.Context, *MySpannerUniaryInsertWithHooksInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *MySpannerUniaryInsertWithHooksInput, next func(*spanner.Row)) error {
		if _, err := cli.Apply(ctx, []*spanner.Mutation{ExampleTableForUniaryInsertWithHooks(req)}); err != nil {
			return err
		}
		next(nil) // this is an apply, it has no result

		return nil
	}
}

func DefaultUniarySelectWithHooksHandler(cli *spanner.Client) func(context.Context, *MySpannerUniarySelectWithHooksInput, func(*spanner.Row)) error {
	return func(ctx context.Context, req *MySpannerUniarySelectWithHooksInput, next func(*spanner.Row)) error {
		iter := cli.Single().Query(ctx, ExampleTableForUniarySelectWithHooks(req))
		if err := iter.Do(func(r *spanner.Row) error {
			next(r)
			return nil
		}); err != nil {
			return err
		}

		return nil
	}
}
