// Code generated by protoc-gen-go.
// source: examples/spanner/basic/basic_example.proto
// DO NOT EDIT!

/*
Package basic is a generated protocol buffer package.

It is generated from these files:
	examples/spanner/basic/basic_example.proto

It has these top-level messages:
*/
package basic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/tcncloud/protoc-gen-persist/persist"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"
import examples_test "github.com/tcncloud/protoc-gen-persist/examples/test"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MySpanner service

type MySpannerClient interface {
	UniaryInsert(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error)
	UniarySelect(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error)
	UniaryUpdate(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.PartialTable, error)
	UniaryDelete(ctx context.Context, in *examples_test.ExampleTableRange, opts ...grpc.CallOption) (*examples_test.ExampleTable, error)
	NoArgs(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error)
	ServerStream(ctx context.Context, in *examples_test.Name, opts ...grpc.CallOption) (MySpanner_ServerStreamClient, error)
	ClientStreamInsert(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamInsertClient, error)
	ClientStreamDelete(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamDeleteClient, error)
	ClientStreamUpdate(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamUpdateClient, error)
	// hook examples
	UniaryInsertWithHooks(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error)
	UniarySelectWithHooks(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error)
	UniaryUpdateWithHooks(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.PartialTable, error)
	UniaryDeleteWithHooks(ctx context.Context, in *examples_test.ExampleTableRange, opts ...grpc.CallOption) (*examples_test.ExampleTable, error)
	ServerStreamWithHooks(ctx context.Context, in *examples_test.Name, opts ...grpc.CallOption) (MySpanner_ServerStreamWithHooksClient, error)
	ClientStreamUpdateWithHooks(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamUpdateWithHooksClient, error)
}

type mySpannerClient struct {
	cc *grpc.ClientConn
}

func NewMySpannerClient(cc *grpc.ClientConn) MySpannerClient {
	return &mySpannerClient{cc}
}

func (c *mySpannerClient) UniaryInsert(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error) {
	out := new(examples_test.ExampleTable)
	err := grpc.Invoke(ctx, "/examples.MySpanner/UniaryInsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniarySelect(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error) {
	out := new(examples_test.ExampleTable)
	err := grpc.Invoke(ctx, "/examples.MySpanner/UniarySelect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniaryUpdate(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.PartialTable, error) {
	out := new(examples_test.PartialTable)
	err := grpc.Invoke(ctx, "/examples.MySpanner/UniaryUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniaryDelete(ctx context.Context, in *examples_test.ExampleTableRange, opts ...grpc.CallOption) (*examples_test.ExampleTable, error) {
	out := new(examples_test.ExampleTable)
	err := grpc.Invoke(ctx, "/examples.MySpanner/UniaryDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) NoArgs(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error) {
	out := new(examples_test.ExampleTable)
	err := grpc.Invoke(ctx, "/examples.MySpanner/NoArgs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) ServerStream(ctx context.Context, in *examples_test.Name, opts ...grpc.CallOption) (MySpanner_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[0], c.cc, "/examples.MySpanner/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MySpanner_ServerStreamClient interface {
	Recv() (*examples_test.ExampleTable, error)
	grpc.ClientStream
}

type mySpannerServerStreamClient struct {
	grpc.ClientStream
}

func (x *mySpannerServerStreamClient) Recv() (*examples_test.ExampleTable, error) {
	m := new(examples_test.ExampleTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) ClientStreamInsert(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamInsertClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[1], c.cc, "/examples.MySpanner/ClientStreamInsert", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerClientStreamInsertClient{stream}
	return x, nil
}

type MySpanner_ClientStreamInsertClient interface {
	Send(*examples_test.ExampleTable) error
	CloseAndRecv() (*examples_test.NumRows, error)
	grpc.ClientStream
}

type mySpannerClientStreamInsertClient struct {
	grpc.ClientStream
}

func (x *mySpannerClientStreamInsertClient) Send(m *examples_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mySpannerClientStreamInsertClient) CloseAndRecv() (*examples_test.NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(examples_test.NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) ClientStreamDelete(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamDeleteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[2], c.cc, "/examples.MySpanner/ClientStreamDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerClientStreamDeleteClient{stream}
	return x, nil
}

type MySpanner_ClientStreamDeleteClient interface {
	Send(*examples_test.ExampleTable) error
	CloseAndRecv() (*examples_test.NumRows, error)
	grpc.ClientStream
}

type mySpannerClientStreamDeleteClient struct {
	grpc.ClientStream
}

func (x *mySpannerClientStreamDeleteClient) Send(m *examples_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mySpannerClientStreamDeleteClient) CloseAndRecv() (*examples_test.NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(examples_test.NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) ClientStreamUpdate(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[3], c.cc, "/examples.MySpanner/ClientStreamUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerClientStreamUpdateClient{stream}
	return x, nil
}

type MySpanner_ClientStreamUpdateClient interface {
	Send(*examples_test.ExampleTable) error
	CloseAndRecv() (*examples_test.NumRows, error)
	grpc.ClientStream
}

type mySpannerClientStreamUpdateClient struct {
	grpc.ClientStream
}

func (x *mySpannerClientStreamUpdateClient) Send(m *examples_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mySpannerClientStreamUpdateClient) CloseAndRecv() (*examples_test.NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(examples_test.NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) UniaryInsertWithHooks(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error) {
	out := new(examples_test.ExampleTable)
	err := grpc.Invoke(ctx, "/examples.MySpanner/UniaryInsertWithHooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniarySelectWithHooks(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.ExampleTable, error) {
	out := new(examples_test.ExampleTable)
	err := grpc.Invoke(ctx, "/examples.MySpanner/UniarySelectWithHooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniaryUpdateWithHooks(ctx context.Context, in *examples_test.ExampleTable, opts ...grpc.CallOption) (*examples_test.PartialTable, error) {
	out := new(examples_test.PartialTable)
	err := grpc.Invoke(ctx, "/examples.MySpanner/UniaryUpdateWithHooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) UniaryDeleteWithHooks(ctx context.Context, in *examples_test.ExampleTableRange, opts ...grpc.CallOption) (*examples_test.ExampleTable, error) {
	out := new(examples_test.ExampleTable)
	err := grpc.Invoke(ctx, "/examples.MySpanner/UniaryDeleteWithHooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySpannerClient) ServerStreamWithHooks(ctx context.Context, in *examples_test.Name, opts ...grpc.CallOption) (MySpanner_ServerStreamWithHooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[4], c.cc, "/examples.MySpanner/ServerStreamWithHooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerServerStreamWithHooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MySpanner_ServerStreamWithHooksClient interface {
	Recv() (*examples_test.ExampleTable, error)
	grpc.ClientStream
}

type mySpannerServerStreamWithHooksClient struct {
	grpc.ClientStream
}

func (x *mySpannerServerStreamWithHooksClient) Recv() (*examples_test.ExampleTable, error) {
	m := new(examples_test.ExampleTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySpannerClient) ClientStreamUpdateWithHooks(ctx context.Context, opts ...grpc.CallOption) (MySpanner_ClientStreamUpdateWithHooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MySpanner_serviceDesc.Streams[5], c.cc, "/examples.MySpanner/ClientStreamUpdateWithHooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &mySpannerClientStreamUpdateWithHooksClient{stream}
	return x, nil
}

type MySpanner_ClientStreamUpdateWithHooksClient interface {
	Send(*examples_test.ExampleTable) error
	CloseAndRecv() (*examples_test.NumRows, error)
	grpc.ClientStream
}

type mySpannerClientStreamUpdateWithHooksClient struct {
	grpc.ClientStream
}

func (x *mySpannerClientStreamUpdateWithHooksClient) Send(m *examples_test.ExampleTable) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mySpannerClientStreamUpdateWithHooksClient) CloseAndRecv() (*examples_test.NumRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(examples_test.NumRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MySpanner service

type MySpannerServer interface {
	UniaryInsert(context.Context, *examples_test.ExampleTable) (*examples_test.ExampleTable, error)
	UniarySelect(context.Context, *examples_test.ExampleTable) (*examples_test.ExampleTable, error)
	UniaryUpdate(context.Context, *examples_test.ExampleTable) (*examples_test.PartialTable, error)
	UniaryDelete(context.Context, *examples_test.ExampleTableRange) (*examples_test.ExampleTable, error)
	NoArgs(context.Context, *examples_test.ExampleTable) (*examples_test.ExampleTable, error)
	ServerStream(*examples_test.Name, MySpanner_ServerStreamServer) error
	ClientStreamInsert(MySpanner_ClientStreamInsertServer) error
	ClientStreamDelete(MySpanner_ClientStreamDeleteServer) error
	ClientStreamUpdate(MySpanner_ClientStreamUpdateServer) error
	// hook examples
	UniaryInsertWithHooks(context.Context, *examples_test.ExampleTable) (*examples_test.ExampleTable, error)
	UniarySelectWithHooks(context.Context, *examples_test.ExampleTable) (*examples_test.ExampleTable, error)
	UniaryUpdateWithHooks(context.Context, *examples_test.ExampleTable) (*examples_test.PartialTable, error)
	UniaryDeleteWithHooks(context.Context, *examples_test.ExampleTableRange) (*examples_test.ExampleTable, error)
	ServerStreamWithHooks(*examples_test.Name, MySpanner_ServerStreamWithHooksServer) error
	ClientStreamUpdateWithHooks(MySpanner_ClientStreamUpdateWithHooksServer) error
}

func RegisterMySpannerServer(s *grpc.Server, srv MySpannerServer) {
	s.RegisterService(&_MySpanner_serviceDesc, srv)
}

func _MySpanner_UniaryInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.MySpanner/UniaryInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryInsert(ctx, req.(*examples_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniarySelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniarySelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.MySpanner/UniarySelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniarySelect(ctx, req.(*examples_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniaryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.MySpanner/UniaryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryUpdate(ctx, req.(*examples_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniaryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.ExampleTableRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.MySpanner/UniaryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryDelete(ctx, req.(*examples_test.ExampleTableRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_NoArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).NoArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.MySpanner/NoArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).NoArgs(ctx, req.(*examples_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(examples_test.Name)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MySpannerServer).ServerStream(m, &mySpannerServerStreamServer{stream})
}

type MySpanner_ServerStreamServer interface {
	Send(*examples_test.ExampleTable) error
	grpc.ServerStream
}

type mySpannerServerStreamServer struct {
	grpc.ServerStream
}

func (x *mySpannerServerStreamServer) Send(m *examples_test.ExampleTable) error {
	return x.ServerStream.SendMsg(m)
}

func _MySpanner_ClientStreamInsert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MySpannerServer).ClientStreamInsert(&mySpannerClientStreamInsertServer{stream})
}

type MySpanner_ClientStreamInsertServer interface {
	SendAndClose(*examples_test.NumRows) error
	Recv() (*examples_test.ExampleTable, error)
	grpc.ServerStream
}

type mySpannerClientStreamInsertServer struct {
	grpc.ServerStream
}

func (x *mySpannerClientStreamInsertServer) SendAndClose(m *examples_test.NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mySpannerClientStreamInsertServer) Recv() (*examples_test.ExampleTable, error) {
	m := new(examples_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MySpanner_ClientStreamDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MySpannerServer).ClientStreamDelete(&mySpannerClientStreamDeleteServer{stream})
}

type MySpanner_ClientStreamDeleteServer interface {
	SendAndClose(*examples_test.NumRows) error
	Recv() (*examples_test.ExampleTable, error)
	grpc.ServerStream
}

type mySpannerClientStreamDeleteServer struct {
	grpc.ServerStream
}

func (x *mySpannerClientStreamDeleteServer) SendAndClose(m *examples_test.NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mySpannerClientStreamDeleteServer) Recv() (*examples_test.ExampleTable, error) {
	m := new(examples_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MySpanner_ClientStreamUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MySpannerServer).ClientStreamUpdate(&mySpannerClientStreamUpdateServer{stream})
}

type MySpanner_ClientStreamUpdateServer interface {
	SendAndClose(*examples_test.NumRows) error
	Recv() (*examples_test.ExampleTable, error)
	grpc.ServerStream
}

type mySpannerClientStreamUpdateServer struct {
	grpc.ServerStream
}

func (x *mySpannerClientStreamUpdateServer) SendAndClose(m *examples_test.NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mySpannerClientStreamUpdateServer) Recv() (*examples_test.ExampleTable, error) {
	m := new(examples_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MySpanner_UniaryInsertWithHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryInsertWithHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.MySpanner/UniaryInsertWithHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryInsertWithHooks(ctx, req.(*examples_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniarySelectWithHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniarySelectWithHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.MySpanner/UniarySelectWithHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniarySelectWithHooks(ctx, req.(*examples_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniaryUpdateWithHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.ExampleTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryUpdateWithHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.MySpanner/UniaryUpdateWithHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryUpdateWithHooks(ctx, req.(*examples_test.ExampleTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_UniaryDeleteWithHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.ExampleTableRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySpannerServer).UniaryDeleteWithHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.MySpanner/UniaryDeleteWithHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySpannerServer).UniaryDeleteWithHooks(ctx, req.(*examples_test.ExampleTableRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySpanner_ServerStreamWithHooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(examples_test.Name)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MySpannerServer).ServerStreamWithHooks(m, &mySpannerServerStreamWithHooksServer{stream})
}

type MySpanner_ServerStreamWithHooksServer interface {
	Send(*examples_test.ExampleTable) error
	grpc.ServerStream
}

type mySpannerServerStreamWithHooksServer struct {
	grpc.ServerStream
}

func (x *mySpannerServerStreamWithHooksServer) Send(m *examples_test.ExampleTable) error {
	return x.ServerStream.SendMsg(m)
}

func _MySpanner_ClientStreamUpdateWithHooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MySpannerServer).ClientStreamUpdateWithHooks(&mySpannerClientStreamUpdateWithHooksServer{stream})
}

type MySpanner_ClientStreamUpdateWithHooksServer interface {
	SendAndClose(*examples_test.NumRows) error
	Recv() (*examples_test.ExampleTable, error)
	grpc.ServerStream
}

type mySpannerClientStreamUpdateWithHooksServer struct {
	grpc.ServerStream
}

func (x *mySpannerClientStreamUpdateWithHooksServer) SendAndClose(m *examples_test.NumRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mySpannerClientStreamUpdateWithHooksServer) Recv() (*examples_test.ExampleTable, error) {
	m := new(examples_test.ExampleTable)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MySpanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "examples.MySpanner",
	HandlerType: (*MySpannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UniaryInsert",
			Handler:    _MySpanner_UniaryInsert_Handler,
		},
		{
			MethodName: "UniarySelect",
			Handler:    _MySpanner_UniarySelect_Handler,
		},
		{
			MethodName: "UniaryUpdate",
			Handler:    _MySpanner_UniaryUpdate_Handler,
		},
		{
			MethodName: "UniaryDelete",
			Handler:    _MySpanner_UniaryDelete_Handler,
		},
		{
			MethodName: "NoArgs",
			Handler:    _MySpanner_NoArgs_Handler,
		},
		{
			MethodName: "UniaryInsertWithHooks",
			Handler:    _MySpanner_UniaryInsertWithHooks_Handler,
		},
		{
			MethodName: "UniarySelectWithHooks",
			Handler:    _MySpanner_UniarySelectWithHooks_Handler,
		},
		{
			MethodName: "UniaryUpdateWithHooks",
			Handler:    _MySpanner_UniaryUpdateWithHooks_Handler,
		},
		{
			MethodName: "UniaryDeleteWithHooks",
			Handler:    _MySpanner_UniaryDeleteWithHooks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _MySpanner_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamInsert",
			Handler:       _MySpanner_ClientStreamInsert_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStreamDelete",
			Handler:       _MySpanner_ClientStreamDelete_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStreamUpdate",
			Handler:       _MySpanner_ClientStreamUpdate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamWithHooks",
			Handler:       _MySpanner_ServerStreamWithHooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamUpdateWithHooks",
			Handler:       _MySpanner_ClientStreamUpdateWithHooks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "examples/spanner/basic/basic_example.proto",
}

func init() { proto.RegisterFile("examples/spanner/basic/basic_example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 911 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x97, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x80, 0x65, 0x0b, 0x55, 0xcb, 0xb0, 0x07, 0x34, 0xa8, 0x2b, 0x94, 0x82, 0x18, 0x19, 0x81,
	0xd2, 0xa8, 0x9b, 0xec, 0x2e, 0x12, 0x42, 0x82, 0xc8, 0xa4, 0x89, 0x57, 0x94, 0x6d, 0xd3, 0x95,
	0xed, 0xb6, 0x62, 0xb5, 0x6c, 0x99, 0xc4, 0x93, 0x74, 0xc0, 0xf6, 0x58, 0x33, 0x13, 0x96, 0x5e,
	0x41, 0x1c, 0x40, 0x80, 0x28, 0xdc, 0xb8, 0xb1, 0x57, 0x7e, 0x00, 0xfd, 0x15, 0x9c, 0x10, 0x27,
	0xf6, 0xc4, 0x81, 0x9f, 0xc0, 0x09, 0x81, 0xc6, 0x93, 0x38, 0xa9, 0xb3, 0x0d, 0x49, 0xe3, 0x1e,
	0xb8, 0x38, 0xb1, 0x3c, 0xf3, 0xe6, 0xf3, 0xe7, 0xf7, 0xe6, 0x69, 0x40, 0x85, 0x7c, 0x82, 0xa3,
	0x24, 0x24, 0xa2, 0x26, 0x12, 0x1c, 0xc7, 0x84, 0xd7, 0x3a, 0x58, 0xd0, 0xae, 0xbe, 0x1e, 0x0e,
	0x1f, 0x56, 0x13, 0xce, 0x24, 0x83, 0x57, 0x46, 0x63, 0x4b, 0xab, 0x09, 0xe1, 0x82, 0x0a, 0x59,
	0x63, 0x89, 0xa4, 0x2c, 0x16, 0x7a, 0x40, 0xe9, 0xa5, 0x3e, 0x63, 0xfd, 0x90, 0xd4, 0xd2, 0xbb,
	0xce, 0xa0, 0x57, 0x93, 0x34, 0x22, 0x42, 0xe2, 0x28, 0x19, 0x0e, 0x40, 0xf9, 0x01, 0x01, 0x11,
	0x5d, 0x4e, 0x13, 0xc9, 0xf8, 0x70, 0xc4, 0xf3, 0x19, 0x8f, 0x24, 0x42, 0xa6, 0x17, 0xfd, 0xe4,
	0xd6, 0x77, 0x6b, 0xe0, 0xe9, 0x9d, 0x63, 0x4f, 0x53, 0xc2, 0x9f, 0x0c, 0x70, 0x75, 0x2f, 0xa6,
	0x98, 0x1f, 0x6f, 0xc5, 0x82, 0x70, 0x09, 0xd7, 0xaa, 0xa3, 0x99, 0xd5, 0x74, 0x92, 0xa3, 0xef,
	0x7c, 0xdc, 0x09, 0x49, 0x69, 0xd6, 0x43, 0x0b, 0x7f, 0x7a, 0x7a, 0x62, 0xde, 0x07, 0xef, 0xea,
	0x40, 0x88, 0xc6, 0x92, 0xa1, 0xe1, 0xf0, 0x43, 0xa9, 0x46, 0xa0, 0x32, 0x0d, 0x36, 0x90, 0x90,
	0x98, 0xcb, 0x43, 0xf5, 0x46, 0x1b, 0x28, 0xc6, 0x11, 0x59, 0x47, 0x68, 0x1f, 0x87, 0x03, 0x22,
	0x50, 0xd9, 0xde, 0x40, 0xf6, 0x06, 0xb2, 0x3a, 0x38, 0xc6, 0x31, 0x16, 0xd6, 0x3a, 0x34, 0x69,
	0x00, 0xc1, 0x78, 0x02, 0xfc, 0x2a, 0xa3, 0xf5, 0x48, 0x48, 0xba, 0xcb, 0xd0, 0x6e, 0x2a, 0xda,
	0x3a, 0xb8, 0xe9, 0x39, 0xdb, 0x4e, 0xd3, 0x47, 0x15, 0xd4, 0xe3, 0x2c, 0xca, 0xf1, 0x1e, 0x1c,
	0x11, 0x4e, 0x10, 0x0d, 0xea, 0x36, 0x6a, 0xb4, 0x5b, 0x29, 0x6d, 0xdd, 0x4e, 0xa1, 0x9e, 0x52,
	0xff, 0xe1, 0x8f, 0x19, 0xce, 0x5e, 0x12, 0x60, 0x49, 0x16, 0xc3, 0xb9, 0x8b, 0xb9, 0xa4, 0x38,
	0xd4, 0x38, 0x07, 0x0a, 0xc7, 0x05, 0x6f, 0xeb, 0x40, 0x39, 0x0e, 0x41, 0xe4, 0x84, 0xb6, 0xba,
	0xad, 0xc5, 0xd5, 0x2d, 0xc6, 0x71, 0xdc, 0x27, 0xc2, 0x42, 0x0f, 0x33, 0xd0, 0x33, 0xba, 0x14,
	0xe9, 0x0f, 0x19, 0x63, 0x8b, 0x84, 0x44, 0x12, 0x88, 0x66, 0x30, 0xba, 0x2a, 0xde, 0x6c, 0x6f,
	0x77, 0x14, 0xe8, 0x6d, 0x70, 0xab, 0xe5, 0x6c, 0x3b, 0xbe, 0x83, 0x6e, 0xbb, 0xbb, 0x3b, 0x39,
	0x5a, 0xcf, 0x6f, 0xb8, 0x7e, 0xd9, 0x5e, 0x47, 0x4e, 0xbb, 0xa5, 0x7e, 0xee, 0x6c, 0xb5, 0x5b,
	0xe5, 0xe6, 0xee, 0x3a, 0xbc, 0xa2, 0xd1, 0x68, 0x00, 0x57, 0x48, 0x1c, 0xa8, 0xdf, 0x18, 0xac,
	0xb4, 0x59, 0x83, 0xf7, 0xc5, 0x12, 0x1f, 0xb2, 0xa2, 0x80, 0x5e, 0x01, 0x2f, 0x8b, 0x34, 0x23,
	0x9e, 0xfc, 0x21, 0x43, 0x1a, 0x51, 0x89, 0x6e, 0xc2, 0x1e, 0xb8, 0xea, 0x11, 0xfe, 0x31, 0xe1,
	0x9e, 0xe4, 0x04, 0x47, 0xf0, 0xb9, 0x5c, 0xe0, 0x36, 0x8e, 0xfe, 0x63, 0x35, 0x4b, 0xad, 0xf6,
	0x22, 0x58, 0xcb, 0xd2, 0x66, 0x5a, 0xc0, 0x0d, 0x43, 0x55, 0x15, 0x6c, 0x86, 0x94, 0xc4, 0x52,
	0x2f, 0x34, 0x4f, 0x6d, 0x5d, 0xcb, 0xb3, 0x0c, 0x22, 0x97, 0x3d, 0x14, 0xd6, 0x03, 0xb5, 0xe2,
	0x7b, 0xa0, 0xb1, 0xd5, 0xf6, 0x1c, 0xd7, 0x47, 0x5b, 0x6d, 0x7f, 0x77, 0xbe, 0xb2, 0xda, 0x6f,
	0x6c, 0xef, 0x39, 0xde, 0xa8, 0xaa, 0xec, 0xe9, 0x6a, 0x4a, 0x93, 0xb8, 0x6c, 0xc0, 0x6f, 0x72,
	0xb4, 0xc3, 0x44, 0xb9, 0x10, 0x6d, 0x43, 0xd1, 0xbe, 0xb5, 0x78, 0x7a, 0x34, 0x35, 0x9e, 0x49,
	0x83, 0xb2, 0x01, 0x1f, 0xe5, 0x80, 0xe6, 0xa9, 0xae, 0xf3, 0x80, 0xf6, 0x14, 0xd0, 0x5d, 0xf0,
	0xc6, 0x60, 0x81, 0xc2, 0xb2, 0xcf, 0x2b, 0x28, 0x5d, 0xf6, 0x1a, 0xf2, 0x4f, 0x13, 0xac, 0x4e,
	0xee, 0x9c, 0x07, 0x54, 0x1e, 0xbd, 0xc3, 0xd8, 0x47, 0xcb, 0xe4, 0xf2, 0xf7, 0xa6, 0xa2, 0xfd,
	0xda, 0xbc, 0xcc, 0x4d, 0xd4, 0x3d, 0x00, 0xd7, 0x26, 0xb9, 0x37, 0x49, 0x8f, 0x71, 0xa2, 0xc8,
	0x61, 0xbd, 0x4f, 0xe5, 0xd1, 0xa0, 0x53, 0xed, 0xb2, 0xa8, 0x26, 0xbb, 0x71, 0x37, 0x64, 0x83,
	0x40, 0xf7, 0x98, 0xee, 0xf5, 0x3e, 0x89, 0xaf, 0x8f, 0xba, 0xd5, 0x54, 0xaf, 0x3b, 0x52, 0xef,
	0x7d, 0x6f, 0xff, 0xac, 0x90, 0x46, 0x4f, 0x12, 0x5e, 0x40, 0x5c, 0xf8, 0x73, 0x66, 0x5a, 0xef,
	0xfa, 0x45, 0x98, 0xfe, 0xc3, 0x50, 0xa6, 0x1f, 0x1b, 0xe0, 0xd5, 0xf9, 0x1a, 0x80, 0xb2, 0xf8,
	0xff, 0x33, 0xf7, 0x38, 0x33, 0xa7, 0x4b, 0xe8, 0x82, 0xe6, 0xce, 0x74, 0xaa, 0x2f, 0xd2, 0x1c,
	0xfd, 0xcc, 0x2c, 0xbe, 0x57, 0x8d, 0xfd, 0xea, 0xc8, 0x97, 0xe0, 0x57, 0x07, 0x2e, 0xcc, 0xef,
	0x6f, 0x99, 0x5f, 0xbd, 0x67, 0x8e, 0xfd, 0x2e, 0xd9, 0x65, 0xff, 0x4e, 0xd3, 0xf3, 0x2f, 0xa3,
	0x98, 0x3e, 0x3b, 0x16, 0xab, 0x31, 0x2f, 0x41, 0xac, 0x0e, 0x5c, 0x98, 0xd8, 0x47, 0x26, 0x58,
	0x9d, 0xec, 0xd4, 0x63, 0xb1, 0x8b, 0xb7, 0xec, 0x5f, 0x53, 0x97, 0xbf, 0x18, 0x33, 0x9b, 0xb6,
	0x52, 0x34, 0xb9, 0x60, 0xa1, 0x8a, 0x26, 0x03, 0x17, 0xa5, 0xe8, 0x86, 0x01, 0x7f, 0x37, 0xc1,
	0xda, 0x74, 0x9b, 0x9c, 0xb3, 0xc6, 0xcf, 0xeb, 0x97, 0x9f, 0xa7, 0xe5, 0xfd, 0x8f, 0x01, 0x2a,
	0xe7, 0x76, 0xcc, 0x39, 0x7b, 0xa4, 0xfb, 0x3e, 0x78, 0x61, 0x1a, 0xaf, 0x38, 0xb1, 0xf7, 0x9f,
	0xf4, 0xf6, 0x45, 0xe9, 0x2d, 0x1b, 0xa5, 0x0f, 0xbf, 0x3c, 0x3d, 0x31, 0x3f, 0x00, 0x0f, 0x40,
	0xa9, 0xaa, 0x8f, 0x5b, 0xd5, 0xd1, 0x71, 0xab, 0xea, 0x8f, 0xce, 0x63, 0xcf, 0x3e, 0x63, 0xad,
	0xec, 0x1c, 0xab, 0xdb, 0xca, 0xeb, 0x8b, 0xae, 0x17, 0x1d, 0x2b, 0x5f, 0xdf, 0x9e, 0x9e, 0x98,
	0xc6, 0xa6, 0x73, 0xaf, 0x79, 0x51, 0xdc, 0xf4, 0x84, 0xf9, 0x66, 0x7a, 0xed, 0xac, 0xa4, 0x13,
	0x5e, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xee, 0x86, 0x28, 0xde, 0x8e, 0x0e, 0x00, 0x00,
}
