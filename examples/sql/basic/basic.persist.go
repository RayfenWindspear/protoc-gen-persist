// This file is generated by protoc-gen-persist
// Source File: examples/sql/basic/basic.proto
// DO NOT EDIT !
package basic

import (
	sql "database/sql"
	io "io"

	hooks "github.com/tcncloud/protoc-gen-persist/examples/hooks"
	mytime "github.com/tcncloud/protoc-gen-persist/examples/mytime"
	persist_lib "github.com/tcncloud/protoc-gen-persist/examples/sql/basic/persist_lib"
	test "github.com/tcncloud/protoc-gen-persist/examples/test"
	context "golang.org/x/net/context"
	codes "google.golang.org/grpc/codes"
	gstatus "google.golang.org/grpc/status"
)

type AmazingImpl struct {
	PERSIST   *persist_lib.AmazingMethodReceiver
	FORWARDED RestOfAmazingHandlers
}
type RestOfAmazingHandlers interface {
	UnImplementedPersistMethod(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error)
}
type AmazingImplBuilder struct {
	err           error
	rest          RestOfAmazingHandlers
	queryHandlers *persist_lib.AmazingQueryHandlers
	i             *AmazingImpl
	db            sql.DB
}

func NewAmazingBuilder() *AmazingImplBuilder {
	return &AmazingImplBuilder{i: &AmazingImpl{}}
}
func (b *AmazingImplBuilder) WithRestOfGrpcHandlers(r RestOfAmazingHandlers) *AmazingImplBuilder {
	b.rest = r
	return b
}
func (b *AmazingImplBuilder) WithPersistQueryHandlers(p *persist_lib.AmazingQueryHandlers) *AmazingImplBuilder {
	b.queryHandlers = p
	return b
}
func (b *AmazingImplBuilder) WithDefaultQueryHandlers() *AmazingImplBuilder {
	accessor := persist_lib.NewSqlClientGetter(&b.db)
	queryHandlers := &persist_lib.AmazingQueryHandlers{
		UniarySelectHandler:           persist_lib.DefaultUniarySelectHandler(accessor),
		UniarySelectWithHooksHandler:  persist_lib.DefaultUniarySelectWithHooksHandler(accessor),
		ServerStreamHandler:           persist_lib.DefaultServerStreamHandler(accessor),
		ServerStreamWithHooksHandler:  persist_lib.DefaultServerStreamWithHooksHandler(accessor),
		BidirectionalHandler:          persist_lib.DefaultBidirectionalHandler(accessor),
		BidirectionalWithHooksHandler: persist_lib.DefaultBidirectionalWithHooksHandler(accessor),
		ClientStreamHandler:           persist_lib.DefaultClientStreamHandler(accessor),
		ClientStreamWithHookHandler:   persist_lib.DefaultClientStreamWithHookHandler(accessor),
	}
	b.queryHandlers = queryHandlers
	return b
}

// set the custom handlers you want to use in the handlers
// this method will make sure to use a default handler if
// the handler is nil.
func (b *AmazingImplBuilder) WithNilAsDefaultQueryHandlers(p *persist_lib.AmazingQueryHandlers) *AmazingImplBuilder {
	accessor := persist_lib.NewSqlClientGetter(&b.db)
	if p.UniarySelectHandler == nil {
		p.UniarySelectHandler = persist_lib.DefaultUniarySelectHandler(accessor)
	}
	if p.UniarySelectWithHooksHandler == nil {
		p.UniarySelectWithHooksHandler = persist_lib.DefaultUniarySelectWithHooksHandler(accessor)
	}
	if p.ServerStreamHandler == nil {
		p.ServerStreamHandler = persist_lib.DefaultServerStreamHandler(accessor)
	}
	if p.ServerStreamWithHooksHandler == nil {
		p.ServerStreamWithHooksHandler = persist_lib.DefaultServerStreamWithHooksHandler(accessor)
	}
	if p.BidirectionalHandler == nil {
		p.BidirectionalHandler = persist_lib.DefaultBidirectionalHandler(accessor)
	}
	if p.BidirectionalWithHooksHandler == nil {
		p.BidirectionalWithHooksHandler = persist_lib.DefaultBidirectionalWithHooksHandler(accessor)
	}
	if p.ClientStreamHandler == nil {
		p.ClientStreamHandler = persist_lib.DefaultClientStreamHandler(accessor)
	}
	if p.ClientStreamWithHookHandler == nil {
		p.ClientStreamWithHookHandler = persist_lib.DefaultClientStreamWithHookHandler(accessor)
	}
	b.queryHandlers = p
	return b
}
func (b *AmazingImplBuilder) WithSqlClient(c *sql.DB) *AmazingImplBuilder {
	b.db = *c
	return b
}
func (b *AmazingImplBuilder) WithNewSqlDb(driverName, dataSourceName string) *AmazingImplBuilder {
	db, err := sql.Open(driverName, dataSourceName)
	b.err = err
	b.db = *db
	return b
}
func (b *AmazingImplBuilder) Build() (*AmazingImpl, error) {
	if b.err != nil {
		return nil, b.err
	}
	b.i.PERSIST = &persist_lib.AmazingMethodReceiver{Handlers: *b.queryHandlers}
	b.i.FORWARDED = b.rest
	return b.i, nil
}
func (b *AmazingImplBuilder) MustBuild() *AmazingImpl {
	s, err := b.Build()
	if err != nil {
		panic("error in builder: " + err.Error())
	}
	return s
}
func (s *AmazingImpl) UniarySelect(ctx context.Context, req *test.PartialTable) (*test.ExampleTable, error) {
	var err error
	var res = test.ExampleTable{}
	_ = err
	_ = res
	params := &persist_lib.Test_PartialTableForAmazing{}
	err = func() error {
		params.Id = req.Id
		params.StartTime = (mytime.MyTime{}).ToSql(req.StartTime)
		return nil
	}()
	if err != nil {
		return nil, err
	}
	var iterErr error
	err = s.PERSIST.UniarySelect(ctx, params, func(row persist_lib.Scanable) {
		if row == nil { // there was no return data
			return
		}
		res = test.ExampleTable{}
		err = func() error {
			var Id_ int64
			var StartTime_ mytime.MyTime
			var Name_ string
			if err := row.Scan(
				&Id_,
				&StartTime_,
				&Name_,
			); err != nil {
				return err
			}
			res.Id = Id_
			res.StartTime = StartTime_.ToProto()
			res.Name = Name_
			return nil
		}()
		if err != nil {
			iterErr = err
			return
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error calling persist service: %v", err)
	} else if iterErr != nil {
		return nil, iterErr
	}
	return &res, nil
}
func (s *AmazingImpl) UniarySelectWithHooks(ctx context.Context, req *test.PartialTable) (*test.ExampleTable, error) {
	var err error
	var res = test.ExampleTable{}
	_ = err
	_ = res
	beforeRes, err := hooks.UniarySelectBeforeHook(req)
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
	} else if beforeRes != nil {
		return beforeRes, nil
	}
	params := &persist_lib.Test_PartialTableForAmazing{}
	err = func() error {
		params.Id = req.Id
		params.StartTime = (mytime.MyTime{}).ToSql(req.StartTime)
		return nil
	}()
	if err != nil {
		return nil, err
	}
	var iterErr error
	err = s.PERSIST.UniarySelectWithHooks(ctx, params, func(row persist_lib.Scanable) {
		if row == nil { // there was no return data
			return
		}
		res = test.ExampleTable{}
		err = func() error {
			var Id_ int64
			var StartTime_ mytime.MyTime
			var Name_ string
			if err := row.Scan(
				&Id_,
				&StartTime_,
				&Name_,
			); err != nil {
				return err
			}
			res.Id = Id_
			res.StartTime = StartTime_.ToProto()
			res.Name = Name_
			return nil
		}()
		if err != nil {
			iterErr = err
			return
		}
	})
	if err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error calling persist service: %v", err)
	} else if iterErr != nil {
		return nil, iterErr
	}
	if err := hooks.UniarySelectAfterHook(req, &res); err != nil {
		return nil, gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
	}
	return &res, nil
}
func (s *AmazingImpl) ServerStream(req *test.Name, stream Amazing_ServerStreamServer) error {
	var err error
	_ = err
	params := &persist_lib.Test_NameForAmazing{}
	err = func() error {
		params.Name = req.Name
		return nil
	}()
	if err != nil {
		return err
	}
	var iterErr error
	err = s.PERSIST.ServerStream(stream.Context(), params, func(row persist_lib.Scanable) {
		if row == nil { // there was no return data
			return
		}
		res := test.ExampleTable{}
		err = func() error {
			var Id_ int64
			var StartTime_ mytime.MyTime
			var Name_ string
			if err := row.Scan(
				&Id_,
				&StartTime_,
				&Name_,
			); err != nil {
				return err
			}
			res.Id = Id_
			res.StartTime = StartTime_.ToProto()
			res.Name = Name_
			return nil
		}()
		if err != nil {
			iterErr = err
			return
		}
		if err := stream.Send(&res); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "error during iteration: %v", err)
		}
	})
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error during iteration: %v", err)
	} else if iterErr != nil {
		return iterErr
	}
	return nil
}
func (s *AmazingImpl) ServerStreamWithHooks(req *test.Name, stream Amazing_ServerStreamWithHooksServer) error {
	var err error
	_ = err
	beforeRes, err := hooks.ServerStreamBeforeHook(req)
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
	} else if beforeRes != nil {
		for _, res := range beforeRes {
			if err := stream.Send(res); err != nil {
				return gstatus.Errorf(codes.Unknown, "error sending back before hook result: %v", err)
			}
		}
	}
	params := &persist_lib.Test_NameForAmazing{}
	err = func() error {
		params.Name = req.Name
		return nil
	}()
	if err != nil {
		return err
	}
	var iterErr error
	err = s.PERSIST.ServerStreamWithHooks(stream.Context(), params, func(row persist_lib.Scanable) {
		if row == nil { // there was no return data
			return
		}
		res := test.ExampleTable{}
		err = func() error {
			var Id_ int64
			var StartTime_ mytime.MyTime
			var Name_ string
			if err := row.Scan(
				&Id_,
				&StartTime_,
				&Name_,
			); err != nil {
				return err
			}
			res.Id = Id_
			res.StartTime = StartTime_.ToProto()
			res.Name = Name_
			return nil
		}()
		if err != nil {
			iterErr = err
			return
		}
		if err := hooks.ServerStreamAfterHook(req, &res); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
			return
		}
		if err := stream.Send(&res); err != nil {
			iterErr = gstatus.Errorf(codes.Unknown, "error during iteration: %v", err)
		}
	})
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error during iteration: %v", err)
	} else if iterErr != nil {
		return iterErr
	}
	return nil
}
func (s *AmazingImpl) Bidirectional(stream Amazing_BidirectionalServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.Bidirectional(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, "error receiving request: %v", err)
		}
		params := &persist_lib.Test_ExampleTableForAmazing{}
		err = func() error {
			params.Id = req.Id
			params.StartTime = (mytime.MyTime{}).ToSql(req.StartTime)
			params.Name = req.Name
			return nil
		}()
		if err != nil {
			return err
		}
		row, err := feed(params)
		if err != nil {
			return gstatus.Errorf(codes.Unknown, "error receiving result row: %v", err)
		}
		if row != nil {
			res := test.ExampleTable{}
			err = func() error {
				var Id_ int64
				var StartTime_ mytime.MyTime
				var Name_ string
				if err := row.Scan(
					&Id_,
					&StartTime_,
					&Name_,
				); err != nil {
					return err
				}
				res.Id = Id_
				res.StartTime = StartTime_.ToProto()
				res.Name = Name_
				return nil
			}()
			if err != nil {
				return err
			}
		}
	}
	return stop()
}
func (s *AmazingImpl) BidirectionalWithHooks(stream Amazing_BidirectionalWithHooksServer) error {
	var err error
	_ = err
	feed, stop := s.PERSIST.BidirectionalWithHooks(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, "error receiving request: %v", err)
		}
		beforeRes, err := hooks.BidirectionalBeforeHook(req)
		if err != nil {
			return gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
		} else if beforeRes != nil {
			continue
		}
		params := &persist_lib.Test_ExampleTableForAmazing{}
		err = func() error {
			params.Id = req.Id
			params.StartTime = (mytime.MyTime{}).ToSql(req.StartTime)
			params.Name = req.Name
			return nil
		}()
		if err != nil {
			return err
		}
		row, err := feed(params)
		if err != nil {
			return gstatus.Errorf(codes.Unknown, "error receiving result row: %v", err)
		}
		if row != nil {
			res := test.ExampleTable{}
			err = func() error {
				var Id_ int64
				var StartTime_ mytime.MyTime
				var Name_ string
				if err := row.Scan(
					&Id_,
					&StartTime_,
					&Name_,
				); err != nil {
					return err
				}
				res.Id = Id_
				res.StartTime = StartTime_.ToProto()
				res.Name = Name_
				return nil
			}()
			if err != nil {
				return err
			}
			if err := hooks.BidirectionalAfterHook(req, &res); err != nil {
				return gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
			}
		}
	}
	return stop()
}
func (s *AmazingImpl) ClientStream(stream Amazing_ClientStreamServer) error {
	var err error
	_ = err
	res := test.NumRows{}
	feed, stop := s.PERSIST.ClientStream(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, "error receiving request: %v", err)
		}
		params := &persist_lib.Test_ExampleTableForAmazing{}
		err = func() error {
			params.Id = req.Id
			params.StartTime = (mytime.MyTime{}).ToSql(req.StartTime)
			params.Name = req.Name
			return nil
		}()
		if err != nil {
			return err
		}
		feed(params)
	}
	row, err := stop()
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error receiving result row: %v", err)
	}
	if row != nil {
		err = func() error {
			var Count_ int64
			if err := row.Scan(
				&Count_,
			); err != nil {
				return err
			}
			res.Count = Count_
			return nil
		}()
	}
	if err := stream.SendAndClose(&res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error sending back response: %v", err)
	}
	return nil
}
func (s *AmazingImpl) ClientStreamWithHook(stream Amazing_ClientStreamWithHookServer) error {
	var err error
	_ = err
	res := test.Ids{}
	feed, stop := s.PERSIST.ClientStreamWithHook(stream.Context())
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return gstatus.Errorf(codes.Unknown, "error receiving request: %v", err)
		}
		beforeRes, err := hooks.ClientStreamBeforeHook(req)
		if err != nil {
			return gstatus.Errorf(codes.Unknown, "error in before hook: %v", err)
		} else if beforeRes != nil {
			continue
		}
		params := &persist_lib.Test_ExampleTableForAmazing{}
		err = func() error {
			params.Id = req.Id
			params.StartTime = (mytime.MyTime{}).ToSql(req.StartTime)
			params.Name = req.Name
			return nil
		}()
		if err != nil {
			return err
		}
		feed(params)
	}
	row, err := stop()
	if err != nil {
		return gstatus.Errorf(codes.Unknown, "error receiving result row: %v", err)
	}
	if row != nil {
		err = func() error {
			var Ids_ []int64
			if err := row.Scan(
				&Ids_,
			); err != nil {
				return err
			}
			res.Ids = Ids_
			return nil
		}()
	}
	// NOTE: I dont want to store your requests in memory
	// so the after hook for client streaming calls
	// is called with an empty request struct
	fakeReq := &test.ExampleTable{}
	if err := hooks.ClientStreamAfterHook(fakeReq, &res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error in after hook: %v", err)
	}
	if err := stream.SendAndClose(&res); err != nil {
		return gstatus.Errorf(codes.Unknown, "error sending back response: %v", err)
	}
	return nil
}
func (s *AmazingImpl) UnImplementedPersistMethod(ctx context.Context, req *test.ExampleTable) (*test.ExampleTable, error) {
	return s.FORWARDED.UnImplementedPersistMethod(ctx, req)
}
