// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/sql/little_of_everything/little_of_everything.proto

/*
Package little_of_everything is a generated protocol buffer package.

It is generated from these files:
	examples/sql/little_of_everything/little_of_everything.proto

It has these top-level messages:
	ExampleTable1
	ExternalTypeTestMessage
	CountRows
*/
package little_of_everything

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/tcncloud/protoc-gen-persist/persist"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"
import examples_test "github.com/tcncloud/protoc-gen-persist/examples/test"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestEnum int32

const (
	TestEnum_OPTION_0 TestEnum = 0
	TestEnum_OPTION_1 TestEnum = 1
)

var TestEnum_name = map[int32]string{
	0: "OPTION_0",
	1: "OPTION_1",
}
var TestEnum_value = map[string]int32{
	"OPTION_0": 0,
	"OPTION_1": 1,
}

func (x TestEnum) String() string {
	return proto.EnumName(TestEnum_name, int32(x))
}
func (TestEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ExampleTable1_InnerEnum int32

const (
	ExampleTable1_OP_0 ExampleTable1_InnerEnum = 0
	ExampleTable1_OP_1 ExampleTable1_InnerEnum = 1
)

var ExampleTable1_InnerEnum_name = map[int32]string{
	0: "OP_0",
	1: "OP_1",
}
var ExampleTable1_InnerEnum_value = map[string]int32{
	"OP_0": 0,
	"OP_1": 1,
}

func (x ExampleTable1_InnerEnum) String() string {
	return proto.EnumName(ExampleTable1_InnerEnum_name, int32(x))
}
func (ExampleTable1_InnerEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ExampleTable1 struct {
	TableId      int32                       `protobuf:"varint,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Key          string                      `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value        string                      `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	InnerMessage *ExampleTable1_InnerMessage `protobuf:"bytes,4,opt,name=inner_message,json=innerMessage" json:"inner_message,omitempty"`
	InnerEnum    ExampleTable1_InnerEnum     `protobuf:"varint,5,opt,name=inner_enum,json=innerEnum,enum=examples.ExampleTable1_InnerEnum" json:"inner_enum,omitempty"`
	StringArray  []string                    `protobuf:"bytes,6,rep,name=string_array,json=stringArray" json:"string_array,omitempty"`
	BytesField   []byte                      `protobuf:"bytes,7,opt,name=bytes_field,json=bytesField,proto3" json:"bytes_field,omitempty"`
	StartTime    *google_protobuf1.Timestamp `protobuf:"bytes,10,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	TestField    *examples_test.Test         `protobuf:"bytes,100,opt,name=test_field,json=testField" json:"test_field,omitempty"`
	// Types that are valid to be assigned to SkipOneOf:
	//	*ExampleTable1_TestId
	//	*ExampleTable1_TestValue
	//	*ExampleTable1_TestOutMessage
	SkipOneOf isExampleTable1_SkipOneOf `protobuf_oneof:"skip_one_of"`
}

func (m *ExampleTable1) Reset()                    { *m = ExampleTable1{} }
func (m *ExampleTable1) String() string            { return proto.CompactTextString(m) }
func (*ExampleTable1) ProtoMessage()               {}
func (*ExampleTable1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isExampleTable1_SkipOneOf interface {
	isExampleTable1_SkipOneOf()
}

type ExampleTable1_TestId struct {
	TestId int32 `protobuf:"varint,1001,opt,name=test_id,json=testId,oneof"`
}
type ExampleTable1_TestValue struct {
	TestValue string `protobuf:"bytes,1002,opt,name=test_value,json=testValue,oneof"`
}
type ExampleTable1_TestOutMessage struct {
	TestOutMessage *examples_test.Test `protobuf:"bytes,1003,opt,name=test_out_message,json=testOutMessage,oneof"`
}

func (*ExampleTable1_TestId) isExampleTable1_SkipOneOf()         {}
func (*ExampleTable1_TestValue) isExampleTable1_SkipOneOf()      {}
func (*ExampleTable1_TestOutMessage) isExampleTable1_SkipOneOf() {}

func (m *ExampleTable1) GetSkipOneOf() isExampleTable1_SkipOneOf {
	if m != nil {
		return m.SkipOneOf
	}
	return nil
}

func (m *ExampleTable1) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *ExampleTable1) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ExampleTable1) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ExampleTable1) GetInnerMessage() *ExampleTable1_InnerMessage {
	if m != nil {
		return m.InnerMessage
	}
	return nil
}

func (m *ExampleTable1) GetInnerEnum() ExampleTable1_InnerEnum {
	if m != nil {
		return m.InnerEnum
	}
	return ExampleTable1_OP_0
}

func (m *ExampleTable1) GetStringArray() []string {
	if m != nil {
		return m.StringArray
	}
	return nil
}

func (m *ExampleTable1) GetBytesField() []byte {
	if m != nil {
		return m.BytesField
	}
	return nil
}

func (m *ExampleTable1) GetStartTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ExampleTable1) GetTestField() *examples_test.Test {
	if m != nil {
		return m.TestField
	}
	return nil
}

func (m *ExampleTable1) GetTestId() int32 {
	if x, ok := m.GetSkipOneOf().(*ExampleTable1_TestId); ok {
		return x.TestId
	}
	return 0
}

func (m *ExampleTable1) GetTestValue() string {
	if x, ok := m.GetSkipOneOf().(*ExampleTable1_TestValue); ok {
		return x.TestValue
	}
	return ""
}

func (m *ExampleTable1) GetTestOutMessage() *examples_test.Test {
	if x, ok := m.GetSkipOneOf().(*ExampleTable1_TestOutMessage); ok {
		return x.TestOutMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExampleTable1) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExampleTable1_OneofMarshaler, _ExampleTable1_OneofUnmarshaler, _ExampleTable1_OneofSizer, []interface{}{
		(*ExampleTable1_TestId)(nil),
		(*ExampleTable1_TestValue)(nil),
		(*ExampleTable1_TestOutMessage)(nil),
	}
}

func _ExampleTable1_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExampleTable1)
	// skip_one_of
	switch x := m.SkipOneOf.(type) {
	case *ExampleTable1_TestId:
		b.EncodeVarint(1001<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TestId))
	case *ExampleTable1_TestValue:
		b.EncodeVarint(1002<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TestValue)
	case *ExampleTable1_TestOutMessage:
		b.EncodeVarint(1003<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TestOutMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExampleTable1.SkipOneOf has unexpected type %T", x)
	}
	return nil
}

func _ExampleTable1_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExampleTable1)
	switch tag {
	case 1001: // skip_one_of.test_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SkipOneOf = &ExampleTable1_TestId{int32(x)}
		return true, err
	case 1002: // skip_one_of.test_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SkipOneOf = &ExampleTable1_TestValue{x}
		return true, err
	case 1003: // skip_one_of.test_out_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(examples_test.Test)
		err := b.DecodeMessage(msg)
		m.SkipOneOf = &ExampleTable1_TestOutMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExampleTable1_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExampleTable1)
	// skip_one_of
	switch x := m.SkipOneOf.(type) {
	case *ExampleTable1_TestId:
		n += proto.SizeVarint(1001<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TestId))
	case *ExampleTable1_TestValue:
		n += proto.SizeVarint(1002<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TestValue)))
		n += len(x.TestValue)
	case *ExampleTable1_TestOutMessage:
		s := proto.Size(x.TestOutMessage)
		n += proto.SizeVarint(1003<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ExampleTable1_InnerMessage struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ExampleTable1_InnerMessage) Reset()                    { *m = ExampleTable1_InnerMessage{} }
func (m *ExampleTable1_InnerMessage) String() string            { return proto.CompactTextString(m) }
func (*ExampleTable1_InnerMessage) ProtoMessage()               {}
func (*ExampleTable1_InnerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *ExampleTable1_InnerMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ExternalTypeTestMessage struct {
	Time *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
}

func (m *ExternalTypeTestMessage) Reset()                    { *m = ExternalTypeTestMessage{} }
func (m *ExternalTypeTestMessage) String() string            { return proto.CompactTextString(m) }
func (*ExternalTypeTestMessage) ProtoMessage()               {}
func (*ExternalTypeTestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExternalTypeTestMessage) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type CountRows struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *CountRows) Reset()                    { *m = CountRows{} }
func (m *CountRows) String() string            { return proto.CompactTextString(m) }
func (*CountRows) ProtoMessage()               {}
func (*CountRows) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CountRows) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*ExampleTable1)(nil), "examples.ExampleTable1")
	proto.RegisterType((*ExampleTable1_InnerMessage)(nil), "examples.ExampleTable1.InnerMessage")
	proto.RegisterType((*ExternalTypeTestMessage)(nil), "examples.ExternalTypeTestMessage")
	proto.RegisterType((*CountRows)(nil), "examples.CountRows")
	proto.RegisterEnum("examples.TestEnum", TestEnum_name, TestEnum_value)
	proto.RegisterEnum("examples.ExampleTable1_InnerEnum", ExampleTable1_InnerEnum_name, ExampleTable1_InnerEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExampleService1 service

type ExampleService1Client interface {
	UnaryExample1(ctx context.Context, in *ExampleTable1, opts ...grpc.CallOption) (*ExampleTable1, error)
	UnaryExample2(ctx context.Context, in *examples_test.Test, opts ...grpc.CallOption) (*ExampleTable1, error)
	ServerStreamSelect(ctx context.Context, in *ExampleTable1, opts ...grpc.CallOption) (ExampleService1_ServerStreamSelectClient, error)
	ClientStreamingExample(ctx context.Context, opts ...grpc.CallOption) (ExampleService1_ClientStreamingExampleClient, error)
}

type exampleService1Client struct {
	cc *grpc.ClientConn
}

func NewExampleService1Client(cc *grpc.ClientConn) ExampleService1Client {
	return &exampleService1Client{cc}
}

func (c *exampleService1Client) UnaryExample1(ctx context.Context, in *ExampleTable1, opts ...grpc.CallOption) (*ExampleTable1, error) {
	out := new(ExampleTable1)
	err := grpc.Invoke(ctx, "/examples.ExampleService1/UnaryExample1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService1Client) UnaryExample2(ctx context.Context, in *examples_test.Test, opts ...grpc.CallOption) (*ExampleTable1, error) {
	out := new(ExampleTable1)
	err := grpc.Invoke(ctx, "/examples.ExampleService1/UnaryExample2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService1Client) ServerStreamSelect(ctx context.Context, in *ExampleTable1, opts ...grpc.CallOption) (ExampleService1_ServerStreamSelectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ExampleService1_serviceDesc.Streams[0], c.cc, "/examples.ExampleService1/ServerStreamSelect", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleService1ServerStreamSelectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExampleService1_ServerStreamSelectClient interface {
	Recv() (*ExampleTable1, error)
	grpc.ClientStream
}

type exampleService1ServerStreamSelectClient struct {
	grpc.ClientStream
}

func (x *exampleService1ServerStreamSelectClient) Recv() (*ExampleTable1, error) {
	m := new(ExampleTable1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleService1Client) ClientStreamingExample(ctx context.Context, opts ...grpc.CallOption) (ExampleService1_ClientStreamingExampleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ExampleService1_serviceDesc.Streams[1], c.cc, "/examples.ExampleService1/ClientStreamingExample", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleService1ClientStreamingExampleClient{stream}
	return x, nil
}

type ExampleService1_ClientStreamingExampleClient interface {
	Send(*ExampleTable1) error
	CloseAndRecv() (*CountRows, error)
	grpc.ClientStream
}

type exampleService1ClientStreamingExampleClient struct {
	grpc.ClientStream
}

func (x *exampleService1ClientStreamingExampleClient) Send(m *ExampleTable1) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleService1ClientStreamingExampleClient) CloseAndRecv() (*CountRows, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CountRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ExampleService1 service

type ExampleService1Server interface {
	UnaryExample1(context.Context, *ExampleTable1) (*ExampleTable1, error)
	UnaryExample2(context.Context, *examples_test.Test) (*ExampleTable1, error)
	ServerStreamSelect(*ExampleTable1, ExampleService1_ServerStreamSelectServer) error
	ClientStreamingExample(ExampleService1_ClientStreamingExampleServer) error
}

func RegisterExampleService1Server(s *grpc.Server, srv ExampleService1Server) {
	s.RegisterService(&_ExampleService1_serviceDesc, srv)
}

func _ExampleService1_UnaryExample1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleTable1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleService1Server).UnaryExample1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.ExampleService1/UnaryExample1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleService1Server).UnaryExample1(ctx, req.(*ExampleTable1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService1_UnaryExample2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(examples_test.Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleService1Server).UnaryExample2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.ExampleService1/UnaryExample2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleService1Server).UnaryExample2(ctx, req.(*examples_test.Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService1_ServerStreamSelect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExampleTable1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleService1Server).ServerStreamSelect(m, &exampleService1ServerStreamSelectServer{stream})
}

type ExampleService1_ServerStreamSelectServer interface {
	Send(*ExampleTable1) error
	grpc.ServerStream
}

type exampleService1ServerStreamSelectServer struct {
	grpc.ServerStream
}

func (x *exampleService1ServerStreamSelectServer) Send(m *ExampleTable1) error {
	return x.ServerStream.SendMsg(m)
}

func _ExampleService1_ClientStreamingExample_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleService1Server).ClientStreamingExample(&exampleService1ClientStreamingExampleServer{stream})
}

type ExampleService1_ClientStreamingExampleServer interface {
	SendAndClose(*CountRows) error
	Recv() (*ExampleTable1, error)
	grpc.ServerStream
}

type exampleService1ClientStreamingExampleServer struct {
	grpc.ServerStream
}

func (x *exampleService1ClientStreamingExampleServer) SendAndClose(m *CountRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleService1ClientStreamingExampleServer) Recv() (*ExampleTable1, error) {
	m := new(ExampleTable1)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ExampleService1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "examples.ExampleService1",
	HandlerType: (*ExampleService1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryExample1",
			Handler:    _ExampleService1_UnaryExample1_Handler,
		},
		{
			MethodName: "UnaryExample2",
			Handler:    _ExampleService1_UnaryExample2_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamSelect",
			Handler:       _ExampleService1_ServerStreamSelect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingExample",
			Handler:       _ExampleService1_ClientStreamingExample_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "examples/sql/little_of_everything/little_of_everything.proto",
}

// Client API for NotEnabledService service

type NotEnabledServiceClient interface {
}

type notEnabledServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotEnabledServiceClient(cc *grpc.ClientConn) NotEnabledServiceClient {
	return &notEnabledServiceClient{cc}
}

// Server API for NotEnabledService service

type NotEnabledServiceServer interface {
}

func RegisterNotEnabledServiceServer(s *grpc.Server, srv NotEnabledServiceServer) {
	s.RegisterService(&_NotEnabledService_serviceDesc, srv)
}

var _NotEnabledService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "examples.NotEnabledService",
	HandlerType: (*NotEnabledServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "examples/sql/little_of_everything/little_of_everything.proto",
}

func init() {
	proto.RegisterFile("examples/sql/little_of_everything/little_of_everything.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xcf, 0xa4, 0x7f, 0x92, 0xbc, 0xa4, 0x25, 0xcc, 0x02, 0x6b, 0x72, 0xa0, 0xd3, 0x68, 0x85,
	0xa2, 0x55, 0xd7, 0xd9, 0x04, 0x09, 0x09, 0x01, 0xd2, 0xee, 0x56, 0x5e, 0x35, 0x12, 0xdd, 0xac,
	0x9c, 0x00, 0x12, 0x12, 0x18, 0xc7, 0x9e, 0x7a, 0x87, 0xda, 0x63, 0xe3, 0x19, 0x97, 0xfa, 0xc2,
	0x01, 0x89, 0x0b, 0x5c, 0xe8, 0x95, 0x0b, 0x1f, 0x83, 0x5e, 0xb9, 0x71, 0xe3, 0x3b, 0x70, 0x03,
	0xbe, 0x04, 0x9a, 0xb1, 0x9d, 0x76, 0x57, 0xcd, 0x22, 0x90, 0xd8, 0x5e, 0xac, 0x79, 0x7f, 0xe6,
	0xbd, 0xf7, 0x7b, 0xbf, 0xdf, 0xc8, 0xf0, 0x1e, 0x3d, 0x75, 0xa3, 0x24, 0xa4, 0x62, 0x28, 0xbe,
	0x0c, 0x87, 0x21, 0x93, 0x32, 0xa4, 0x4e, 0x7c, 0xe4, 0xd0, 0x13, 0x9a, 0xe6, 0xf2, 0x09, 0xe3,
	0xc1, 0x95, 0x4e, 0x33, 0x49, 0x63, 0x19, 0xe3, 0x66, 0x75, 0xbb, 0xf7, 0x6a, 0x42, 0x53, 0xc1,
	0x84, 0x1c, 0xc6, 0x89, 0x64, 0x31, 0x17, 0x45, 0x42, 0x6f, 0x27, 0x88, 0xe3, 0x20, 0xa4, 0x43,
	0x6d, 0x2d, 0xb2, 0xa3, 0xa1, 0x64, 0x11, 0x15, 0xd2, 0x8d, 0x92, 0x32, 0x81, 0x3c, 0x9b, 0xe0,
	0x53, 0xe1, 0xa5, 0x2c, 0x91, 0x71, 0x5a, 0x66, 0x18, 0xcb, 0x09, 0x25, 0x15, 0x52, 0x7f, 0x8a,
	0x48, 0xff, 0xf7, 0x75, 0xd8, 0xb2, 0x8a, 0xe0, 0xdc, 0x5d, 0x84, 0x74, 0x84, 0x5f, 0x87, 0xa6,
	0x54, 0x27, 0x87, 0xf9, 0x06, 0x22, 0x68, 0xb0, 0x61, 0x37, 0xb4, 0x3d, 0xf1, 0x71, 0x17, 0xd6,
	0x8e, 0x69, 0x6e, 0xd4, 0x09, 0x1a, 0xb4, 0x6c, 0x75, 0xc4, 0xaf, 0xc0, 0xc6, 0x89, 0x1b, 0x66,
	0xd4, 0x58, 0xd3, 0xbe, 0xc2, 0xc0, 0x13, 0xd8, 0x62, 0x9c, 0xd3, 0xd4, 0x89, 0xa8, 0x10, 0x6e,
	0x40, 0x8d, 0x75, 0x82, 0x06, 0xed, 0xf1, 0x2d, 0xb3, 0x1a, 0xc3, 0x7c, 0xaa, 0xa5, 0x39, 0x51,
	0xc9, 0x87, 0x45, 0xae, 0xdd, 0x61, 0x97, 0x2c, 0x7c, 0x0f, 0xa0, 0x28, 0x45, 0x79, 0x16, 0x19,
	0x1b, 0x04, 0x0d, 0xb6, 0xc7, 0xbb, 0xcf, 0xad, 0x63, 0xf1, 0x2c, 0xb2, 0x5b, 0xac, 0x3a, 0xe2,
	0x5d, 0xe8, 0x08, 0x99, 0x32, 0x1e, 0x38, 0x6e, 0x9a, 0xba, 0xb9, 0xb1, 0x49, 0xd6, 0x06, 0x2d,
	0xbb, 0x5d, 0xf8, 0xee, 0x2b, 0x17, 0xde, 0x81, 0xf6, 0x22, 0x97, 0x54, 0x38, 0x47, 0x8c, 0x86,
	0xbe, 0xd1, 0x20, 0x68, 0xd0, 0xb1, 0x41, 0xbb, 0x1e, 0x2a, 0x0f, 0x7e, 0x07, 0x40, 0x48, 0x37,
	0x95, 0x8e, 0x5a, 0xbd, 0x01, 0x1a, 0x4d, 0xcf, 0x2c, 0xd6, 0x6e, 0x56, 0x6b, 0x37, 0xe7, 0x15,
	0x2f, 0x76, 0x4b, 0x67, 0x2b, 0x1b, 0x8f, 0x01, 0xd4, 0xba, 0xcb, 0xd2, 0xbe, 0xbe, 0x7a, 0xe3,
	0x02, 0x80, 0xa6, 0x62, 0x4e, 0x85, 0xb4, 0x5b, 0xea, 0x58, 0xb4, 0xeb, 0x41, 0x43, 0xdf, 0x61,
	0xbe, 0xf1, 0x87, 0x1a, 0x66, 0xe3, 0xa0, 0x66, 0x6f, 0x2a, 0xcf, 0xc4, 0xc7, 0xa4, 0xac, 0x57,
	0xac, 0xfd, 0x4f, 0x15, 0x6e, 0x1d, 0xd4, 0x8a, 0xdb, 0x1f, 0xe9, 0xed, 0xdf, 0x83, 0xae, 0xce,
	0x88, 0x33, 0xb9, 0x24, 0xe0, 0xaf, 0xc6, 0xca, 0xc6, 0x07, 0x35, 0x7b, 0x5b, 0x19, 0xd3, 0x4c,
	0x96, 0x4b, 0xef, 0xbd, 0x01, 0x9d, 0xcb, 0x94, 0xe0, 0x6d, 0xa8, 0x2f, 0xc5, 0x50, 0x67, 0x7e,
	0x7f, 0x07, 0x5a, 0xcb, 0x55, 0xe3, 0x26, 0xac, 0x4f, 0x1f, 0x3b, 0x77, 0xbb, 0xb5, 0xf2, 0x34,
	0xea, 0xa2, 0x07, 0x5b, 0xd0, 0x16, 0xc7, 0x2c, 0x71, 0x62, 0xae, 0x34, 0xdf, 0x9f, 0xc0, 0x4d,
	0xeb, 0x54, 0xd2, 0x94, 0xbb, 0xe1, 0x3c, 0x4f, 0xa8, 0xea, 0x5a, 0x95, 0x36, 0x61, 0x5d, 0xef,
	0x14, 0xfd, 0xe3, 0x4e, 0x75, 0x5e, 0x7f, 0x17, 0x5a, 0xfb, 0x71, 0xc6, 0xa5, 0x1d, 0x7f, 0x25,
	0x94, 0xfa, 0x3c, 0x65, 0xe8, 0xdb, 0x6b, 0x76, 0x61, 0xdc, 0x7e, 0x13, 0x9a, 0xaa, 0x83, 0x1e,
	0xae, 0x03, 0xcd, 0xe9, 0xe3, 0xf9, 0x64, 0xfa, 0x48, 0x0f, 0x78, 0x61, 0x8d, 0xba, 0x68, 0xfc,
	0x53, 0x03, 0x5e, 0x2a, 0xf5, 0x33, 0xa3, 0xe9, 0x09, 0xf3, 0xe8, 0x08, 0xff, 0x86, 0x60, 0xeb,
	0x43, 0xee, 0xa6, 0x79, 0x19, 0x18, 0xe1, 0x9b, 0x2b, 0xc4, 0xd6, 0x5b, 0x15, 0xe8, 0x7f, 0x8f,
	0xbe, 0x39, 0x3f, 0xab, 0x7f, 0x8b, 0x20, 0x9a, 0x59, 0x1f, 0x58, 0xfb, 0x73, 0xc2, 0x7c, 0x72,
	0x7f, 0x46, 0xfa, 0xd5, 0xab, 0xea, 0xef, 0x91, 0x63, 0x9a, 0xef, 0x11, 0xcd, 0xe0, 0x1e, 0x89,
	0x44, 0x40, 0x5c, 0x41, 0x9e, 0x7a, 0x30, 0x7b, 0x44, 0x48, 0x57, 0x66, 0xe2, 0x22, 0xa0, 0xe4,
	0x4f, 0x1e, 0xda, 0xd3, 0x43, 0xa2, 0xb9, 0xd5, 0xb5, 0xc8, 0xc7, 0x07, 0x96, 0x6d, 0xa9, 0xf2,
	0xef, 0x93, 0x5b, 0x23, 0xbc, 0x7c, 0xb6, 0xf8, 0x92, 0x58, 0xf1, 0xcf, 0xcf, 0x20, 0x1a, 0xe3,
	0xab, 0x44, 0xb0, 0x1a, 0xcd, 0xa9, 0x02, 0x23, 0x5e, 0x34, 0x96, 0x3a, 0xf3, 0xf1, 0xaf, 0x08,
	0xb0, 0x22, 0x86, 0xa6, 0x33, 0x99, 0x52, 0x37, 0x9a, 0xd1, 0x90, 0x7a, 0xf2, 0x3f, 0x10, 0xf2,
	0xb5, 0x82, 0x90, 0x5f, 0x1b, 0x1d, 0x77, 0x91, 0x82, 0xf2, 0xda, 0x7e, 0xc8, 0x28, 0x97, 0x05,
	0x14, 0xc6, 0x83, 0x72, 0xc4, 0xd5, 0x70, 0x2e, 0xd1, 0xb4, 0x54, 0xfc, 0x75, 0x43, 0x19, 0xa0,
	0xde, 0x17, 0xdf, 0x9d, 0x9f, 0xd5, 0x3f, 0x87, 0xcf, 0xe0, 0x39, 0x6f, 0xb5, 0xdb, 0xee, 0x6f,
	0x1e, 0xe6, 0xca, 0xbc, 0xfd, 0x76, 0xc0, 0xe4, 0x93, 0x6c, 0x61, 0x7a, 0x71, 0x34, 0x94, 0x1e,
	0xf7, 0xc2, 0x38, 0xf3, 0x8b, 0x1f, 0x95, 0x77, 0x27, 0xa0, 0xfc, 0x4e, 0xf5, 0xcb, 0x5b, 0xfe,
	0xa0, 0xa2, 0x5c, 0xc9, 0xf6, 0x87, 0xf3, 0xb3, 0x7a, 0x6d, 0x7c, 0x03, 0x5e, 0x7e, 0x14, 0x4b,
	0x8b, 0xab, 0xee, 0x7e, 0xf9, 0x46, 0x1f, 0xfc, 0x82, 0x7e, 0x3c, 0x3f, 0xab, 0x7f, 0xfa, 0x6f,
	0xeb, 0xae, 0xfa, 0x35, 0xbf, 0x7b, 0x95, 0xf3, 0x93, 0xff, 0xb7, 0xfc, 0x62, 0x53, 0x97, 0x7a,
	0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x2f, 0x90, 0xa5, 0x3a, 0x08, 0x00, 0x00,
}
