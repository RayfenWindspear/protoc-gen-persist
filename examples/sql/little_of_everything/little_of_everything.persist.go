// This file is generated by protoc-gen-persist
// Source File: examples/sql/little_of_everything/little_of_everything.proto
// DO NOT EDIT !
package little_of_everything

import (
	sql "database/sql"
	fmt "fmt"
	io "io"
	strings "strings"

	mytime "github.com/tcncloud/protoc-gen-persist/examples/mytime"
	pb "github.com/tcncloud/protoc-gen-persist/examples/sql/little_of_everything"
	test "github.com/tcncloud/protoc-gen-persist/examples/test"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
)

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
// In order for your code to work you have to create a file
// in this package with the following content:
//
// type ExampleService1Impl struct {
// 	SqlDB *sql.DB
// }
// WARNING ! WARNING ! WARNING ! WARNING !WARNING ! WARNING !
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// sql unary UnaryExample1
func (s *ExampleService1Impl) UnaryExample1(ctx context.Context, req *pb.ExampleTable1) (*pb.ExampleTable1, error) {
	var (
		BytesField   []byte
		InnerEnum    int32
		InnerMessage pb.ExampleTable1_InnerMessage
		Key          string
		StartTime    mytime.MyTime
		StringArray  []string
		TableId      int32
		TestField    test.Test
		Value        string
		err          error
	)

	err = s.SqlDB.QueryRow("SELECT id AS \"table_id\", key, value, msg as inner_message, status as inner_enum FROM test_table WHERE id = $1", req.TableId, mytime.MyTime{}.ToSql(req.StartTime)).
		Scan(&TableId,
			&Key,
			&Value,
			&InnerMessage,
			&InnerEnum,
			&StringArray,
			&BytesField,
			&StartTime,
			&TestField,
		)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, grpc.Errorf(codes.NotFound, "%+v doesn't exist", req)
		} else if strings.Contains(err.Error(), "duplicate key") {
			return nil, grpc.Errorf(codes.AlreadyExists, "%+v already exists", req)
		}
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	res := pb.ExampleTable1{

		BytesField:   BytesField,
		InnerEnum:    pb.ExampleTable1_InnerEnum(InnerEnum.ToProto()),
		InnerMessage: &InnerMessage,
		Key:          Key,
		StartTime:    StartTime.ToProto(),
		StringArray:  StringArray,
		TableId:      TableId,
		TestField:    &TestField,
		Value:        Value,
	}

	return &res, nil
}

// sql unary UnaryExample2
func (s *ExampleService1Impl) UnaryExample2(ctx context.Context, req *test.Test) (*pb.ExampleTable1, error) {
	var (
		BytesField   []byte
		InnerEnum    int32
		InnerMessage pb.ExampleTable1_InnerMessage
		Key          string
		StartTime    mytime.MyTime
		StringArray  []string
		TableId      int32
		TestField    test.Test
		Value        string
		err          error
	)

	err = s.SqlDB.QueryRow("SELECT id AS \"table_id\", key, value, msg as inner_message, status as inner_enum FROM test_table WHERE id = $1", req.Id).
		Scan(&TableId,
			&Key,
			&Value,
			&InnerMessage,
			&InnerEnum,
			&StringArray,
			&BytesField,
			&StartTime,
			&TestField,
		)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, grpc.Errorf(codes.NotFound, "%+v doesn't exist", req)
		} else if strings.Contains(err.Error(), "duplicate key") {
			return nil, grpc.Errorf(codes.AlreadyExists, "%+v already exists", req)
		}
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	res := pb.ExampleTable1{

		BytesField:   BytesField,
		InnerEnum:    pb.ExampleTable1_InnerEnum(InnerEnum.ToProto()),
		InnerMessage: &InnerMessage,
		Key:          Key,
		StartTime:    StartTime.ToProto(),
		StringArray:  StringArray,
		TableId:      TableId,
		TestField:    &TestField,
		Value:        Value,
	}

	return &res, nil
}

// sql server streaming ServerStreamSelect
func (s *ExampleService1Impl) ServerStreamSelect(req *pb.ExampleTable1, stream pb.ExampleService1_ServerStreamSelectServer) error {
	var (
		BytesField   []byte
		InnerEnum    int32
		InnerMessage pb.ExampleTable1_InnerMessage
		Key          string
		StartTime    mytime.MyTime
		StringArray  []string
		TableId      int32
		TestField    test.Test
		Value        string
		err          error
	)

	rows, err := s.SqlDB.Query("SELECT id AS \"table_id\", key, value, msg as inner_message, status as inner_enum FROM test_table WHERE id = $1", req.TableId)
	if err != nil {
		return grpc.Errorf(codes.Unknown, err.Error())
	}
	defer rows.Close()
	for rows.Next() {
		err = rows.Err()
		if err != nil {
			if err == sql.ErrNoRows {
				return grpc.Errorf(codes.NotFound, "%+v doesn't exist", req)
			} else if strings.Contains(err.Error(), "duplicate key") {
				return grpc.Errorf(codes.AlreadyExists, "%+v already exists", req)
			}
			return grpc.Errorf(codes.Unknown, err.Error())
		}
		err := rows.Scan(&TableId, &Key, &Value, &InnerMessage, &InnerEnum, &StringArray, &BytesField, &StartTime, &TestField)
		if err != nil {
			return grpc.Errorf(codes.Unknown, err.Error())
		}
		res := pb.ExampleTable1{

			BytesField:   BytesField,
			InnerEnum:    pb.ExampleTable1_InnerEnum(InnerEnum.ToProto()),
			InnerMessage: &InnerMessage,
			Key:          Key,
			StartTime:    StartTime.ToProto(),
			StringArray:  StringArray,
			TableId:      TableId,
			TestField:    &TestField,
			Value:        Value,
		}

		stream.Send(&res)
	}
	return nil
}

// sql client streaming ClientStreamingExample
func (s *ExampleService1Impl) ClientStreamingExample(stream pb.ExampleService1_ClientStreamingExampleServer) error {
	var err error
	tx, err := s.SqlDB.Begin()
	if err != nil {
		return err
	}
	stmt, err := tx.Prepare("SELECT id AS \"table_id\", key, value, msg as inner_message, status as inner_enum FROM test_table WHERE id = $1")
	if err != nil {
		return err
	}

	res := pb.CountRows{}
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			tx.Rollback()
			return grpc.Errorf(codes.Unknown, err.Error())
		}

		_, err = stmt.Exec(req.TableId)
		if err != nil {
			tx.Rollback()
			if err == sql.ErrNoRows {
				return grpc.Errorf(codes.NotFound, "%+v doesn't exist", req)
			} else if strings.Contains(err.Error(), "duplicate key") {
				return grpc.Errorf(codes.AlreadyExists, "%+v already exists", req)
			}
			return grpc.Errorf(codes.Unknown, err.Error())
		}

	}
	err = tx.Commit()
	if err != nil {
		fmt.Println("Commiting transaction failed, rolling back...")
		return grpc.Errorf(codes.Unknown, err.Error())
	}
	stream.SendAndClose(&res)
	return nil
}
