// Copyright 2017, TCN Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package pb;

//option go_package="github.com/tcncloud/protoc-gen-persist/examples/user_sql/pb;pb";
// if we wanted to generate persist implementation in a different package than our go
// implementation.  we would need to put (persist.package) = "path/for/my/impl;impl_package";

import "persist/options.proto";
import "google/protobuf/timestamp.proto";

message User {
	int64 id = 1;
	string name = 2;
	Friends friends = 3;
	google.protobuf.Timestamp created_on = 4;
}

message Friends {
	repeated string names = 1;
}

message SliceStringParam {
	repeated string slice = 1;
}
message FriendsReq {
	SliceStringParam names = 2;
}

message Empty{}

service UServ {
	option (persist.service_type) = SQL;
	option (persist.mapping) = {
		types: [
		{
			proto_type_name: ".google.protobuf.Timestamp",
			proto_type: TYPE_MESSAGE,
			go_type: "TimeString",
			go_package: "github.com/tcncloud/protoc-gen-persist/examples/user_sql/pb",
		},
		{ proto_type_name: ".pb.SliceStringParam",
			proto_type: TYPE_MESSAGE,
			go_type: "SliceStringConverter",
			go_package: "github.com/tcncloud/protoc-gen-persist/examples/user_sql/pb",
		}
		]
	};
	rpc CreateTable(Empty) returns (Empty) {
		option (persist.ql) = {
			query: ["CREATE TABLE users(id integer PRIMARY KEY, name VARCHAR(50), friends BYTEA,",
							"created_on VARCHAR(50))"],
		};
	};
	rpc InsertUsers(stream User) returns (Empty) {
		option (persist.ql) = {
			query: ["INSERT INTO users (id, name, friends, created_on) VALUES ($1, $2, $3, $4)"],
			arguments: ["id", "name", "friends", "created_on"],
			before: true
			after: true
		};
	};
	rpc GetAllUsers(Empty) returns (stream User) {
		option (persist.ql) = {
			query: ["SELECT id, name, friends, created_on FROM users"]
			after: true
			before: true
		};
	};
	rpc SelectUserById(User) returns (User) {
		option (persist.ql) = {
			query: ["SELECT id, name, friends, created_on FROM users WHERE id = $1"],
			arguments: ["id"],
		};
	};
	rpc UpdateUserNames(stream User) returns (stream User) {
		option (persist.ql) = {
			query: ["Update users set name = $1 WHERE id = $2 ",
							"RETURNING id, name, friends, created_on"],
			arguments: ["name", "id"],
		};
	};
	rpc UpdateNameToFoo(User) returns (Empty) {
		option (persist.ql) = {
			query: ["Update users set name = 'foo' WHERE id = $1"],
			arguments: ["id"]
		};
	};
	rpc UpdateAllNames(Empty) returns (stream User) {};

	rpc GetFriends(FriendsReq) returns(stream User) {
		option (persist.ql) = {
			query: ["SELECT id, name, friends, created_on FROM users WHERE name = ANY($1)"],
			arguments: ["names"],
		};
	};
	rpc DropTable(Empty) returns (Empty) {
		option (persist.ql) = {
			query: ["drop table users"]
		};
	};
}
