// Code generated by protoc-gen-go.
// source: persist/options.proto
// DO NOT EDIT!

/*
Package persist is a generated protocol buffer package.

It is generated from these files:
	persist/options.proto

It has these top-level messages:
	QLImpl
	TypeMapping
*/
package persist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PersistenceOptions int32

const (
	PersistenceOptions_SQL PersistenceOptions = 0
)

var PersistenceOptions_name = map[int32]string{
	0: "SQL",
}
var PersistenceOptions_value = map[string]int32{
	"SQL": 0,
}

func (x PersistenceOptions) Enum() *PersistenceOptions {
	p := new(PersistenceOptions)
	*p = x
	return p
}
func (x PersistenceOptions) String() string {
	return proto.EnumName(PersistenceOptions_name, int32(x))
}
func (x *PersistenceOptions) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PersistenceOptions_value, data, "PersistenceOptions")
	if err != nil {
		return err
	}
	*x = PersistenceOptions(value)
	return nil
}
func (PersistenceOptions) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type QLImpl struct {
	// the query string with numeric placeholders for parameters
	Query *string `protobuf:"bytes,1,req,name=query" json:"query,omitempty"`
	// in order list of argument names that will be used as parameters for the query
	// the list of arguments represents the field names of the input type message
	Arguments []string `protobuf:"bytes,2,rep,name=arguments" json:"arguments,omitempty"`
	// persistence option, right now it has only one option, SQL
	// more options will be added when new query languages will be supported
	Persist *PersistenceOptions `protobuf:"varint,3,opt,name=persist,enum=persist.PersistenceOptions" json:"persist,omitempty"`
	// method level type mapping, if this does not exist it will be
	// used the type mapping at the service level, if that one will not exist
	// it will be used the default one, the code can be found
	// generator/service.go function GetSafeType()
	Mapping *TypeMapping `protobuf:"bytes,4,opt,name=mapping" json:"mapping,omitempty"`
	// the before function will be called before running any sql code for
	// every input data element and if the return will be not empty/nil and
	// the error will be nil the data returned by this function will be
	// returned by the function skipping the code execution
	Before *QLImpl_CallbackFunction `protobuf:"bytes,10,opt,name=before" json:"before,omitempty"`
	// the after function will be called after running any sql code for
	// every output data element, the return data of this function will be ignored
	After            *QLImpl_CallbackFunction `protobuf:"bytes,11,opt,name=after" json:"after,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *QLImpl) Reset()                    { *m = QLImpl{} }
func (m *QLImpl) String() string            { return proto.CompactTextString(m) }
func (*QLImpl) ProtoMessage()               {}
func (*QLImpl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QLImpl) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *QLImpl) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *QLImpl) GetPersist() PersistenceOptions {
	if m != nil && m.Persist != nil {
		return *m.Persist
	}
	return PersistenceOptions_SQL
}

func (m *QLImpl) GetMapping() *TypeMapping {
	if m != nil {
		return m.Mapping
	}
	return nil
}

func (m *QLImpl) GetBefore() *QLImpl_CallbackFunction {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *QLImpl) GetAfter() *QLImpl_CallbackFunction {
	if m != nil {
		return m.After
	}
	return nil
}

// Callback definition function
// define the name and the package of a function with the signature
// func CallbackFunction(message pb.Message) (pb.Message, error)
type QLImpl_CallbackFunction struct {
	// function name
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// function go package name in the following formats
	// github.com/repo;package
	// github.com/package
	// dir/package
	// package
	Package          *string `protobuf:"bytes,2,req,name=package" json:"package,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *QLImpl_CallbackFunction) Reset()                    { *m = QLImpl_CallbackFunction{} }
func (m *QLImpl_CallbackFunction) String() string            { return proto.CompactTextString(m) }
func (*QLImpl_CallbackFunction) ProtoMessage()               {}
func (*QLImpl_CallbackFunction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *QLImpl_CallbackFunction) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *QLImpl_CallbackFunction) GetPackage() string {
	if m != nil && m.Package != nil {
		return *m.Package
	}
	return ""
}

type TypeMapping struct {
	Types            []*TypeMapping_TypeDescriptor `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *TypeMapping) Reset()                    { *m = TypeMapping{} }
func (m *TypeMapping) String() string            { return proto.CompactTextString(m) }
func (*TypeMapping) ProtoMessage()               {}
func (*TypeMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TypeMapping) GetTypes() []*TypeMapping_TypeDescriptor {
	if m != nil {
		return m.Types
	}
	return nil
}

type TypeMapping_TypeDescriptor struct {
	// if this is not setup the proto_type must be one of the built-in types
	ProtoTypeName *string `protobuf:"bytes,1,opt,name=proto_type_name,json=protoTypeName" json:"proto_type_name,omitempty"`
	// If proto_type_name is set, this need not be set.  If both this and proto_type_name
	// are set, this must be one of TYPE_ENUM, TYPE_MESSAGE
	// TYPE_GROUP is not supported
	ProtoType *google_protobuf.FieldDescriptorProto_Type `protobuf:"varint,2,opt,name=proto_type,json=protoType,enum=google.protobuf.FieldDescriptorProto_Type" json:"proto_type,omitempty"`
	// if proto_label is not setup we consider any option except LABAEL_REPEATED
	ProtoLabel       *google_protobuf.FieldDescriptorProto_Label `protobuf:"varint,3,opt,name=proto_label,json=protoLabel,enum=google.protobuf.FieldDescriptorProto_Label" json:"proto_label,omitempty"`
	GoType           *string                                     `protobuf:"bytes,4,req,name=go_type,json=goType" json:"go_type,omitempty"`
	GoPackage        *string                                     `protobuf:"bytes,5,req,name=go_package,json=goPackage" json:"go_package,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *TypeMapping_TypeDescriptor) Reset()                    { *m = TypeMapping_TypeDescriptor{} }
func (m *TypeMapping_TypeDescriptor) String() string            { return proto.CompactTextString(m) }
func (*TypeMapping_TypeDescriptor) ProtoMessage()               {}
func (*TypeMapping_TypeDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *TypeMapping_TypeDescriptor) GetProtoTypeName() string {
	if m != nil && m.ProtoTypeName != nil {
		return *m.ProtoTypeName
	}
	return ""
}

func (m *TypeMapping_TypeDescriptor) GetProtoType() google_protobuf.FieldDescriptorProto_Type {
	if m != nil && m.ProtoType != nil {
		return *m.ProtoType
	}
	return google_protobuf.FieldDescriptorProto_TYPE_DOUBLE
}

func (m *TypeMapping_TypeDescriptor) GetProtoLabel() google_protobuf.FieldDescriptorProto_Label {
	if m != nil && m.ProtoLabel != nil {
		return *m.ProtoLabel
	}
	return google_protobuf.FieldDescriptorProto_LABEL_OPTIONAL
}

func (m *TypeMapping_TypeDescriptor) GetGoType() string {
	if m != nil && m.GoType != nil {
		return *m.GoType
	}
	return ""
}

func (m *TypeMapping_TypeDescriptor) GetGoPackage() string {
	if m != nil && m.GoPackage != nil {
		return *m.GoPackage
	}
	return ""
}

var E_Ql = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*QLImpl)(nil),
	Field:         560000,
	Name:          "persist.ql",
	Tag:           "bytes,560000,opt,name=ql",
	Filename:      "persist/options.proto",
}

var E_Mapping = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*TypeMapping)(nil),
	Field:         560001,
	Name:          "persist.mapping",
	Tag:           "bytes,560001,opt,name=mapping",
	Filename:      "persist/options.proto",
}

func init() {
	proto.RegisterType((*QLImpl)(nil), "persist.QLImpl")
	proto.RegisterType((*QLImpl_CallbackFunction)(nil), "persist.QLImpl.CallbackFunction")
	proto.RegisterType((*TypeMapping)(nil), "persist.TypeMapping")
	proto.RegisterType((*TypeMapping_TypeDescriptor)(nil), "persist.TypeMapping.TypeDescriptor")
	proto.RegisterEnum("persist.PersistenceOptions", PersistenceOptions_name, PersistenceOptions_value)
	proto.RegisterExtension(E_Ql)
	proto.RegisterExtension(E_Mapping)
}

func init() { proto.RegisterFile("persist/options.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x6b, 0xdb, 0x30,
	0x14, 0x5d, 0x9c, 0x2f, 0x7c, 0xc3, 0xda, 0x22, 0x3a, 0x26, 0xb2, 0x75, 0x33, 0x19, 0x0c, 0xd3,
	0x51, 0x07, 0x02, 0x2b, 0x5d, 0xf7, 0xb2, 0x2f, 0x0a, 0x85, 0x74, 0x4b, 0xd4, 0x3d, 0xed, 0x25,
	0x38, 0x8e, 0xa2, 0x9a, 0xca, 0x96, 0x62, 0xcb, 0x83, 0xbc, 0x6d, 0x8f, 0xfb, 0x05, 0xfb, 0x63,
	0x83, 0xfd, 0x9d, 0x61, 0x49, 0x76, 0xb6, 0x66, 0x94, 0x3e, 0x49, 0x3a, 0xf7, 0xdc, 0x7b, 0x8f,
	0x74, 0x8f, 0xe0, 0x81, 0xa4, 0x59, 0x1e, 0xe7, 0x6a, 0x28, 0xa4, 0x8a, 0x45, 0x9a, 0x07, 0x32,
	0x13, 0x4a, 0xa0, 0xae, 0x85, 0xfb, 0x1e, 0x13, 0x82, 0x71, 0x3a, 0xd4, 0xf0, 0xbc, 0x58, 0x0e,
	0x17, 0x34, 0x8f, 0xb2, 0x58, 0x2a, 0x91, 0x19, 0xea, 0xe0, 0xb7, 0x03, 0x9d, 0xe9, 0xf8, 0x3c,
	0x91, 0x1c, 0xed, 0x43, 0x7b, 0x55, 0xd0, 0x6c, 0x8d, 0x1b, 0x9e, 0xe3, 0xbb, 0xc4, 0x1c, 0xd0,
	0x63, 0x70, 0xc3, 0x8c, 0x15, 0x09, 0x4d, 0x55, 0x8e, 0x1d, 0xaf, 0xe9, 0xbb, 0x64, 0x03, 0xa0,
	0x97, 0x50, 0xf5, 0xc2, 0x4d, 0xaf, 0xe1, 0xef, 0x8c, 0x1e, 0x05, 0xf6, 0x1c, 0x4c, 0xcc, 0x4a,
	0xd3, 0x88, 0x7e, 0x32, 0xea, 0x48, 0xc5, 0x45, 0x01, 0x74, 0x93, 0x50, 0xca, 0x38, 0x65, 0xb8,
	0xe5, 0x35, 0xfc, 0xde, 0x68, 0xbf, 0x4e, 0xfb, 0xbc, 0x96, 0xf4, 0xc2, 0xc4, 0x48, 0x45, 0x42,
	0x27, 0xd0, 0x99, 0xd3, 0xa5, 0xc8, 0x28, 0x06, 0x4d, 0xf7, 0x6a, 0xba, 0xd1, 0x1e, 0xbc, 0x0f,
	0x39, 0x9f, 0x87, 0xd1, 0xf5, 0x59, 0x91, 0x46, 0x65, 0x2f, 0x62, 0xf9, 0xe8, 0x18, 0xda, 0xe1,
	0x52, 0xd1, 0x0c, 0xf7, 0xee, 0x98, 0x68, 0xe8, 0xfd, 0x37, 0xb0, 0x77, 0x33, 0x84, 0x10, 0xb4,
	0xd2, 0x30, 0xa1, 0xf6, 0x7d, 0xf4, 0x1e, 0x61, 0xe8, 0xca, 0x30, 0xba, 0x0e, 0x19, 0xc5, 0x8e,
	0x86, 0xab, 0xe3, 0xe0, 0x97, 0x03, 0xbd, 0xbf, 0x2e, 0x83, 0x5e, 0x41, 0x5b, 0xad, 0x25, 0xcd,
	0x71, 0xc3, 0x6b, 0xfa, 0xbd, 0xd1, 0xb3, 0xff, 0xdd, 0x58, 0xef, 0x3f, 0xd4, 0x33, 0x22, 0x26,
	0xa3, 0xff, 0xc3, 0x81, 0x9d, 0x7f, 0x23, 0xe8, 0x39, 0xec, 0xea, 0x01, 0xce, 0x4a, 0xc6, 0xcc,
	0xca, 0x6a, 0xf8, 0x2e, 0xb9, 0xaf, 0xe1, 0x92, 0xfd, 0xb1, 0xd4, 0x77, 0x0e, 0xb0, 0xe1, 0x61,
	0x47, 0xcf, 0xe8, 0x30, 0x30, 0xb6, 0x08, 0x2a, 0x5b, 0x04, 0x67, 0x31, 0xe5, 0x8b, 0x4d, 0xf5,
	0x49, 0x89, 0x6b, 0x2d, 0xc4, 0xad, 0xcb, 0xa1, 0x31, 0xf4, 0x4c, 0x29, 0x1e, 0xce, 0x29, 0xb7,
	0xf3, 0x7e, 0x71, 0xb7, 0x5a, 0xe3, 0x32, 0x85, 0x18, 0x29, 0x7a, 0x8f, 0x1e, 0x42, 0x97, 0x59,
	0x55, 0x2d, 0xfd, 0x70, 0x1d, 0x66, 0xda, 0x1c, 0x00, 0x30, 0x31, 0xab, 0x1e, 0xb5, 0xad, 0x63,
	0x2e, 0x13, 0x13, 0x03, 0x1c, 0x1e, 0x00, 0xda, 0x76, 0x16, 0xea, 0x42, 0xf3, 0x72, 0x3a, 0xde,
	0xbb, 0x77, 0xfa, 0x16, 0x9c, 0x15, 0x47, 0x4f, 0xb6, 0x54, 0x5d, 0x50, 0x75, 0x25, 0x16, 0x96,
	0x8e, 0xbf, 0xfd, 0x1c, 0x68, 0x3b, 0xec, 0xde, 0xb0, 0x03, 0x71, 0x56, 0xfc, 0x74, 0x5a, 0x9b,
	0x13, 0x3d, 0xdd, 0xaa, 0x73, 0x49, 0xb3, 0xaf, 0x71, 0xdd, 0x17, 0x7f, 0xb7, 0x85, 0x6e, 0xf7,
	0xef, 0xbb, 0x93, 0x2f, 0xc7, 0x2c, 0x56, 0x57, 0xc5, 0x3c, 0x88, 0x44, 0x32, 0x54, 0x51, 0x1a,
	0x71, 0x51, 0x2c, 0xcc, 0xb7, 0x8c, 0x8e, 0x18, 0x4d, 0x8f, 0xaa, 0x8f, 0x6c, 0xd7, 0xd7, 0x76,
	0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x17, 0xbc, 0x33, 0xe2, 0x03, 0x00, 0x00,
}
