// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/user.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/user.proto

It has these top-level messages:
	User
	Friends
	SliceStringParam
	FriendsQuery
	Empty
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/tcncloud/protoc-gen-persist/persist"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id        int64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string                      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Friends   *Friends                    `protobuf:"bytes,3,opt,name=friends" json:"friends,omitempty"`
	CreatedOn *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=created_on,json=createdOn" json:"created_on,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetFriends() *Friends {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *User) GetCreatedOn() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

type Friends struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *Friends) Reset()                    { *m = Friends{} }
func (m *Friends) String() string            { return proto.CompactTextString(m) }
func (*Friends) ProtoMessage()               {}
func (*Friends) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Friends) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type SliceStringParam struct {
	Slice []string `protobuf:"bytes,1,rep,name=slice" json:"slice,omitempty"`
}

func (m *SliceStringParam) Reset()                    { *m = SliceStringParam{} }
func (m *SliceStringParam) String() string            { return proto.CompactTextString(m) }
func (*SliceStringParam) ProtoMessage()               {}
func (*SliceStringParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SliceStringParam) GetSlice() []string {
	if m != nil {
		return m.Slice
	}
	return nil
}

type FriendsQuery struct {
	Names *SliceStringParam `protobuf:"bytes,2,opt,name=names" json:"names,omitempty"`
}

func (m *FriendsQuery) Reset()                    { *m = FriendsQuery{} }
func (m *FriendsQuery) String() string            { return proto.CompactTextString(m) }
func (*FriendsQuery) ProtoMessage()               {}
func (*FriendsQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FriendsQuery) GetNames() *SliceStringParam {
	if m != nil {
		return m.Names
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterType((*Friends)(nil), "pb.Friends")
	proto.RegisterType((*SliceStringParam)(nil), "pb.SliceStringParam")
	proto.RegisterType((*FriendsQuery)(nil), "pb.FriendsQuery")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UServ service

type UServClient interface {
	CreateTable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	InsertUsers(ctx context.Context, opts ...grpc.CallOption) (UServ_InsertUsersClient, error)
	GetAllUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UServ_GetAllUsersClient, error)
	SelectUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUserNames(ctx context.Context, opts ...grpc.CallOption) (UServ_UpdateUserNamesClient, error)
	UpdateNameToFoo(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	UpdateAllNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UServ_UpdateAllNamesClient, error)
	GetFriends(ctx context.Context, in *FriendsQuery, opts ...grpc.CallOption) (UServ_GetFriendsClient, error)
	DropTable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type uServClient struct {
	cc *grpc.ClientConn
}

func NewUServClient(cc *grpc.ClientConn) UServClient {
	return &uServClient{cc}
}

func (c *uServClient) CreateTable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.UServ/CreateTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uServClient) InsertUsers(ctx context.Context, opts ...grpc.CallOption) (UServ_InsertUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UServ_serviceDesc.Streams[0], c.cc, "/pb.UServ/InsertUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &uServInsertUsersClient{stream}
	return x, nil
}

type UServ_InsertUsersClient interface {
	Send(*User) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type uServInsertUsersClient struct {
	grpc.ClientStream
}

func (x *uServInsertUsersClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uServInsertUsersClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uServClient) GetAllUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UServ_GetAllUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UServ_serviceDesc.Streams[1], c.cc, "/pb.UServ/GetAllUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &uServGetAllUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UServ_GetAllUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type uServGetAllUsersClient struct {
	grpc.ClientStream
}

func (x *uServGetAllUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uServClient) SelectUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/pb.UServ/SelectUserById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uServClient) UpdateUserNames(ctx context.Context, opts ...grpc.CallOption) (UServ_UpdateUserNamesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UServ_serviceDesc.Streams[2], c.cc, "/pb.UServ/UpdateUserNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &uServUpdateUserNamesClient{stream}
	return x, nil
}

type UServ_UpdateUserNamesClient interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ClientStream
}

type uServUpdateUserNamesClient struct {
	grpc.ClientStream
}

func (x *uServUpdateUserNamesClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uServUpdateUserNamesClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uServClient) UpdateNameToFoo(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.UServ/UpdateNameToFoo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uServClient) UpdateAllNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UServ_UpdateAllNamesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UServ_serviceDesc.Streams[3], c.cc, "/pb.UServ/UpdateAllNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &uServUpdateAllNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UServ_UpdateAllNamesClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type uServUpdateAllNamesClient struct {
	grpc.ClientStream
}

func (x *uServUpdateAllNamesClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uServClient) GetFriends(ctx context.Context, in *FriendsQuery, opts ...grpc.CallOption) (UServ_GetFriendsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UServ_serviceDesc.Streams[4], c.cc, "/pb.UServ/GetFriends", opts...)
	if err != nil {
		return nil, err
	}
	x := &uServGetFriendsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UServ_GetFriendsClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type uServGetFriendsClient struct {
	grpc.ClientStream
}

func (x *uServGetFriendsClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uServClient) DropTable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.UServ/DropTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uServClient) Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.UServ/Shutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UServ service

type UServServer interface {
	CreateTable(context.Context, *Empty) (*Empty, error)
	InsertUsers(UServ_InsertUsersServer) error
	GetAllUsers(*Empty, UServ_GetAllUsersServer) error
	SelectUserById(context.Context, *User) (*User, error)
	UpdateUserNames(UServ_UpdateUserNamesServer) error
	UpdateNameToFoo(context.Context, *User) (*Empty, error)
	UpdateAllNames(*Empty, UServ_UpdateAllNamesServer) error
	GetFriends(*FriendsQuery, UServ_GetFriendsServer) error
	DropTable(context.Context, *Empty) (*Empty, error)
	Shutdown(context.Context, *Empty) (*Empty, error)
}

func RegisterUServServer(s *grpc.Server, srv UServServer) {
	s.RegisterService(&_UServ_serviceDesc, srv)
}

func _UServ_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UServServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UServ/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UServServer).CreateTable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UServ_InsertUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UServServer).InsertUsers(&uServInsertUsersServer{stream})
}

type UServ_InsertUsersServer interface {
	SendAndClose(*Empty) error
	Recv() (*User, error)
	grpc.ServerStream
}

type uServInsertUsersServer struct {
	grpc.ServerStream
}

func (x *uServInsertUsersServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uServInsertUsersServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UServ_GetAllUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UServServer).GetAllUsers(m, &uServGetAllUsersServer{stream})
}

type UServ_GetAllUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type uServGetAllUsersServer struct {
	grpc.ServerStream
}

func (x *uServGetAllUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UServ_SelectUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UServServer).SelectUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UServ/SelectUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UServServer).SelectUserById(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UServ_UpdateUserNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UServServer).UpdateUserNames(&uServUpdateUserNamesServer{stream})
}

type UServ_UpdateUserNamesServer interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ServerStream
}

type uServUpdateUserNamesServer struct {
	grpc.ServerStream
}

func (x *uServUpdateUserNamesServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uServUpdateUserNamesServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UServ_UpdateNameToFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UServServer).UpdateNameToFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UServ/UpdateNameToFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UServServer).UpdateNameToFoo(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UServ_UpdateAllNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UServServer).UpdateAllNames(m, &uServUpdateAllNamesServer{stream})
}

type UServ_UpdateAllNamesServer interface {
	Send(*User) error
	grpc.ServerStream
}

type uServUpdateAllNamesServer struct {
	grpc.ServerStream
}

func (x *uServUpdateAllNamesServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UServ_GetFriends_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FriendsQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UServServer).GetFriends(m, &uServGetFriendsServer{stream})
}

type UServ_GetFriendsServer interface {
	Send(*User) error
	grpc.ServerStream
}

type uServGetFriendsServer struct {
	grpc.ServerStream
}

func (x *uServGetFriendsServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UServ_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UServServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UServ/DropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UServServer).DropTable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UServ_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UServServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UServ/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UServServer).Shutdown(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UServ",
	HandlerType: (*UServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _UServ_CreateTable_Handler,
		},
		{
			MethodName: "SelectUserById",
			Handler:    _UServ_SelectUserById_Handler,
		},
		{
			MethodName: "UpdateNameToFoo",
			Handler:    _UServ_UpdateNameToFoo_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _UServ_DropTable_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _UServ_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertUsers",
			Handler:       _UServ_InsertUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAllUsers",
			Handler:       _UServ_GetAllUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateUserNames",
			Handler:       _UServ_UpdateUserNames_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateAllNames",
			Handler:       _UServ_UpdateAllNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFriends",
			Handler:       _UServ_GetFriends_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/user.proto",
}

func init() { proto.RegisterFile("pb/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1f, 0xce, 0x6c, 0x92, 0x7f, 0xea, 0x9f, 0xff, 0x04, 0x6b, 0x14, 0x54, 0xcb, 0x97, 0x8e, 0x56,
	0x46, 0x59, 0x17, 0xd7, 0x76, 0x52, 0x40, 0xa2, 0x28, 0x42, 0x6b, 0x77, 0x93, 0xac, 0x9a, 0x38,
	0x65, 0xbc, 0x2e, 0x0a, 0x42, 0x8d, 0xbc, 0xbb, 0x13, 0x77, 0xd5, 0xf5, 0xce, 0x32, 0x3b, 0x0e,
	0xca, 0x85, 0x03, 0x47, 0x40, 0xa8, 0xb9, 0xf2, 0x31, 0x7a, 0xf2, 0xa7, 0x81, 0x33, 0xdf, 0x02,
	0xcd, 0x8e, 0x37, 0x31, 0xc8, 0x8d, 0x04, 0xe1, 0x36, 0x2f, 0xcf, 0x3c, 0xcf, 0xf3, 0x7b, 0x1b,
	0x78, 0x2f, 0xf5, 0xdb, 0xd3, 0x8c, 0x89, 0x56, 0x2a, 0xb8, 0xe4, 0xd8, 0x48, 0xfd, 0xda, 0x07,
	0x29, 0x13, 0x59, 0x94, 0xc9, 0x36, 0x4f, 0x65, 0xc4, 0x93, 0x4c, 0x5f, 0xd5, 0x1e, 0x8c, 0x39,
	0x1f, 0xc7, 0xac, 0x9d, 0xef, 0xfc, 0xe9, 0x79, 0x5b, 0x46, 0x13, 0x96, 0xc9, 0xd1, 0x24, 0xd5,
	0x00, 0xf3, 0x67, 0x04, 0x6b, 0xc3, 0x8c, 0x09, 0xbc, 0x09, 0x46, 0x14, 0x56, 0x11, 0x41, 0xd6,
	0x2a, 0x35, 0xa2, 0x10, 0x63, 0x58, 0x4b, 0x46, 0x13, 0x56, 0x35, 0x08, 0xb2, 0x4a, 0x34, 0x5f,
	0xe3, 0x0f, 0x61, 0xe3, 0x5c, 0x44, 0x2c, 0x09, 0xb3, 0xea, 0x2a, 0x41, 0x56, 0x79, 0xb7, 0xdc,
	0x4a, 0xfd, 0xd6, 0xbe, 0x3e, 0xa2, 0xc5, 0x1d, 0xfe, 0x0c, 0x20, 0x10, 0x6c, 0x24, 0x59, 0x78,
	0xc6, 0x93, 0xea, 0x5a, 0x8e, 0xac, 0xb5, 0xb4, 0x93, 0x56, 0xe1, 0xa4, 0xe5, 0x15, 0x4e, 0x68,
	0x69, 0x8e, 0x3e, 0x49, 0xcc, 0x07, 0xb0, 0x31, 0xa7, 0xc3, 0x5b, 0xb0, 0xae, 0x44, 0xb3, 0x2a,
	0x22, 0xab, 0x56, 0x89, 0xea, 0x8d, 0x69, 0x41, 0x65, 0x10, 0x47, 0x01, 0x1b, 0x48, 0x11, 0x25,
	0xe3, 0xe7, 0x23, 0x31, 0x9a, 0x28, 0x64, 0xa6, 0xce, 0x0a, 0x64, 0xbe, 0x31, 0x9f, 0xc0, 0xff,
	0xe7, 0x54, 0x5f, 0x4e, 0x99, 0xb8, 0xc4, 0x0f, 0x0b, 0x3e, 0x23, 0x37, 0xb4, 0xa5, 0xac, 0xff,
	0x9d, 0xaa, 0x50, 0xd9, 0x80, 0x75, 0x67, 0x92, 0xca, 0xcb, 0xdd, 0xb7, 0x00, 0xeb, 0xc3, 0x01,
	0x13, 0x17, 0xf8, 0x0d, 0x82, 0x72, 0x2f, 0xf7, 0xe9, 0x8d, 0xfc, 0x98, 0xe1, 0x92, 0x7a, 0x9f,
	0x83, 0x6a, 0x37, 0x4b, 0xf3, 0xf5, 0x0f, 0xb3, 0x2b, 0xe3, 0x1c, 0x9e, 0xf5, 0xa8, 0x63, 0x7b,
	0x0e, 0xf1, 0xec, 0xee, 0x91, 0x43, 0x54, 0xa9, 0x32, 0x2b, 0x0a, 0x49, 0x94, 0x48, 0x36, 0x66,
	0x82, 0x3c, 0xa7, 0xee, 0xb1, 0x4d, 0x4f, 0xc9, 0x33, 0xe7, 0xb4, 0x49, 0x94, 0x22, 0x79, 0x61,
	0xd3, 0xde, 0xa1, 0x4d, 0xad, 0x4f, 0x3a, 0x8d, 0x26, 0x99, 0xe7, 0x91, 0x74, 0x4f, 0x3d, 0xc7,
	0x6e, 0xc2, 0xfd, 0x9b, 0x64, 0x2e, 0xe2, 0x1a, 0xf8, 0x77, 0x04, 0x65, 0x37, 0xc9, 0x98, 0x90,
	0xaa, 0x82, 0x19, 0xbe, 0xa7, 0x7c, 0xa8, 0xe5, 0xa2, 0xa3, 0x19, 0x52, 0x96, 0xde, 0x22, 0x70,
	0xdd, 0xfe, 0xc0, 0xa1, 0x1e, 0x71, 0xfb, 0xde, 0x89, 0xb6, 0x44, 0xac, 0x28, 0xd4, 0xfa, 0xd7,
	0x9a, 0x4d, 0x72, 0x23, 0xd6, 0x20, 0x2f, 0xec, 0xa3, 0xa1, 0x33, 0x20, 0x56, 0x7d, 0xa7, 0x49,
	0xea, 0xbb, 0x4d, 0x52, 0x7f, 0xdc, 0x24, 0xf5, 0x8f, 0x1b, 0x58, 0xf5, 0x87, 0xee, 0x88, 0xeb,
	0x9a, 0x2f, 0x54, 0x9c, 0xee, 0xc3, 0xba, 0x9b, 0x04, 0x6e, 0x88, 0xf7, 0xc6, 0x91, 0x7c, 0x35,
	0xf5, 0x5b, 0x01, 0x9f, 0xb4, 0x65, 0x90, 0x04, 0x31, 0x9f, 0x86, 0xba, 0x15, 0x83, 0x47, 0x63,
	0x96, 0x3c, 0x2a, 0x7a, 0x56, 0xb2, 0x4c, 0x9e, 0x65, 0x4c, 0x5c, 0x44, 0x01, 0xcb, 0x1b, 0xfb,
	0x2c, 0xfb, 0x36, 0x6e, 0x5b, 0x08, 0x7f, 0x03, 0xe5, 0x03, 0x26, 0xed, 0x38, 0xd6, 0x01, 0x2e,
	0xe4, 0xfc, 0x3a, 0x56, 0xf3, 0x53, 0x15, 0xdf, 0x0e, 0xb4, 0x07, 0xce, 0x91, 0xd3, 0xf3, 0xc8,
	0xad, 0x21, 0x91, 0x7d, 0x7a, 0x72, 0xac, 0x83, 0xef, 0x20, 0x9c, 0xc0, 0xe6, 0x80, 0xc5, 0x2c,
	0xc8, 0xd3, 0xd7, 0xbd, 0x74, 0xc3, 0x85, 0x0c, 0xde, 0xf0, 0x1f, 0x2a, 0xfe, 0x1e, 0xec, 0xfd,
	0x43, 0x7e, 0xf2, 0xd5, 0xa1, 0x43, 0x1d, 0x12, 0x85, 0x64, 0x8f, 0xd4, 0x77, 0xf2, 0x94, 0xfd,
	0x82, 0xe0, 0xfd, 0x61, 0x1a, 0x8e, 0x24, 0x53, 0xc4, 0x7d, 0xd5, 0x69, 0x4b, 0x15, 0x03, 0xa5,
	0xf8, 0x12, 0x1a, 0x1a, 0x3b, 0xa7, 0xcb, 0x98, 0xd4, 0xad, 0xa2, 0xe8, 0xfe, 0x42, 0xbe, 0x4b,
	0x60, 0x9b, 0x3a, 0xde, 0x90, 0xf6, 0xdd, 0xfe, 0xc1, 0xed, 0xfe, 0xe6, 0x55, 0x33, 0xa2, 0xd0,
	0x42, 0x1d, 0x84, 0x5f, 0x16, 0x7e, 0x94, 0x17, 0x8f, 0xef, 0x73, 0xbe, 0xbc, 0x87, 0xe6, 0x29,
	0xfe, 0xe8, 0x5d, 0x86, 0xb6, 0xcf, 0x39, 0xdf, 0x5e, 0x12, 0x70, 0x03, 0x36, 0xf5, 0x13, 0x3b,
	0x8e, 0x75, 0xb8, 0x4b, 0x2b, 0xb8, 0xd2, 0x41, 0xf8, 0x7b, 0x80, 0x03, 0x26, 0x8b, 0xd9, 0xaf,
	0x2c, 0xfc, 0x2b, 0xf9, 0xf4, 0x2e, 0xa0, 0xa9, 0x32, 0x73, 0x0c, 0x4f, 0xff, 0x5d, 0x3d, 0xe6,
	0x8e, 0xed, 0xfe, 0xa9, 0x55, 0xdf, 0x69, 0x60, 0x3d, 0xef, 0x1d, 0x84, 0x9f, 0x40, 0xe9, 0xa9,
	0xe0, 0xe9, 0x6d, 0xb3, 0x7d, 0x5f, 0x09, 0x63, 0xa8, 0x84, 0x82, 0xa7, 0x44, 0x2a, 0xa0, 0x66,
	0xc6, 0x26, 0xdc, 0x1b, 0xbc, 0x9a, 0xca, 0x90, 0x7f, 0x97, 0xbc, 0xe3, 0xe9, 0x4a, 0xed, 0x0f,
	0xf4, 0xe3, 0xec, 0xca, 0xf8, 0x0d, 0xc1, 0x6b, 0xb8, 0xe5, 0x2b, 0xac, 0x94, 0x4d, 0x50, 0x1b,
	0xfd, 0x25, 0x3d, 0xfc, 0xe2, 0x4e, 0xf3, 0x93, 0xfa, 0xc0, 0x61, 0xe9, 0x37, 0x57, 0x29, 0x9b,
	0x5b, 0x0b, 0x67, 0x3d, 0x9e, 0x5c, 0x30, 0x21, 0x99, 0xb8, 0xb3, 0xe0, 0x9b, 0xd9, 0x95, 0xb1,
	0xd2, 0xfd, 0x09, 0xfd, 0x3a, 0xbb, 0x32, 0xba, 0x77, 0xe4, 0xfa, 0x3c, 0xf5, 0xbf, 0xfe, 0x0f,
	0x38, 0xfc, 0xff, 0xe5, 0xf8, 0xc7, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x63, 0xd8, 0xe5, 0x0b,
	0x35, 0x07, 0x00, 0x00,
}
