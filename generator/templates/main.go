// Copyright 2017, TCN Inc.
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package templates

const MainTemplate = `// This file is generated by protoc-gen-persist
// Source File: {{.GetOrigName}}
// DO NOT EDIT !

package {{.GetImplPackage}}

{{template "import_template" .}}

{{template "implement_structs" .Structures}}

{{template "implement_services" .ServiceList}}
`
const PersistLibTemplate = `// This file is generated by protoc-gen-persist
{{$file := .}}
// Source File: {{.GetOrigName}}
// DO NOT EDIT

package persist_lib

import (
	"cloud.google.com/go/spanner"
	"golang.org/x/net/context"
)

{{range $i, $s := .ServiceList -}}
type {{$s.GetName}}PersistHelper struct {
{{range $method := $s.Methods}}{{if $method.IsSpanner -}}
	{{if $method.IsUnary -}}
	{{$method.GetName}}Handler func(context.Context, *{{template "persist_lib_input_name" $method}}, func(*spanner.Row)){{end}}
	{{- if $method.IsClientStreaming -}}
	{{$method.GetName}}Handler func(context.Context)(func(*{{template "persist_lib_input_name" $method}})error, func() *spanner.Row){{end}}
	{{- if $method.IsServerStreaming -}}
	{{$method.GetName}}Handler func(context.Context, *{{template "persist_lib_input_name" $method}}, func(*spanner.Row)){{end}}
{{end}}{{end -}}
}
{{end}}

{{range $srv := .ServiceList}}{{range $method := $srv.Methods}}{{if $method.IsSpanner}}
{{if $method.IsUnary -}}
func(p *{{$srv.GetName}}PersistHelper) {{$method.GetName}}(ctx context.Context, params *{{template "persist_lib_input_name" $method}}, fn func(row *spanner.Row)) {
	p.{{$method.GetName}}Handler(ctx, params, fn)
}
{{end -}}
{{if $method.IsServerStreaming -}}
func(p *{{$srv.GetName}}PersistHelper) {{$method.GetName}}(ctx context.Context, params *{{template "persist_lib_input_name" $method}}, fn func(row *spanner.Row)) {
	p.{{$method.GetName}}Handler(ctx, params, fn)
}
{{end -}}
{{if $method.IsClientStreaming -}}
// given a context, returns two functions.  (feed, stop)
// feed will be called once for every row recieved by the handler
// stop will be called when the client is done streaming it expects some sort of results to be returned
// that can be marshalled into a response
func(p *{{$srv.GetName}}PersistHelper) {{$method.GetName}}(ctx context.Context)(func(*{{template "persist_lib_input_name" $method}}) error, func() *spanner.Row) {
	return p.{{$method.GetName}}Handler(ctx)
}
{{end -}}
{{end}}{{end}}{{end}}

// input type definitions

{{range $srv := .ServiceList}}{{range $method := $srv.Methods}}{{if $method.IsSpanner -}}
	{{template "persist_lib_input" $method}}
{{end}}{{end}}{{end}}

{{range $srv := .ServiceList}}{{range $method := $srv.Methods}}{{if $method.IsSpanner}}
{{if $method.IsSelect -}}
func {{$method.GetInputTypeName}}For{{$method.Desc.GetName}}(req *{{template "persist_lib_input_name" $method}}) *spanner.Statement {
	return &{{$method.Query.String}}
}
{{else -}}
func {{$method.GetInputTypeName}}For{{$method.Desc.GetName}}(req *{{template "persist_lib_input_name" $method}}) *spanner.Mutation{
	return {{$method.Query.String}}
}
{{end -}}
{{end}}{{end}}{{end}}
`
